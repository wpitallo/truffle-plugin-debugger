{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abiParameterToType = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:abi-data:import\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nfunction abiParameterToType(abi) {\n  var typeName = abi.type;\n  var typeHint = abi.internalType; //first: is it an array?\n\n  var arrayMatch = typeName.match(/(.*)\\[(\\d*)\\]$/);\n\n  if (arrayMatch) {\n    var baseTypeName = arrayMatch[1];\n    var lengthAsString = arrayMatch[2]; //may be empty!\n\n    var baseAbi = Object.assign(Object.assign({}, abi), {\n      type: baseTypeName\n    });\n    var baseType = abiParameterToType(baseAbi);\n\n    if (lengthAsString === \"\") {\n      return {\n        typeClass: \"array\",\n        kind: \"dynamic\",\n        baseType: baseType,\n        typeHint: typeHint\n      };\n    } else {\n      var length = new bn_js_1.default(lengthAsString);\n      return {\n        typeClass: \"array\",\n        kind: \"static\",\n        length: length,\n        baseType: baseType,\n        typeHint: typeHint\n      };\n    }\n  } //otherwise, here are the simple cases\n\n\n  var typeClass = typeName.match(/^([^0-9]+)/)[1];\n\n  switch (typeClass) {\n    case \"uint\":\n    case \"int\":\n      {\n        var bits = typeName.match(/^u?int([0-9]+)/)[1];\n        return {\n          typeClass: typeClass,\n          bits: parseInt(bits),\n          typeHint: typeHint\n        };\n      }\n\n    case \"bytes\":\n      var _length = typeName.match(/^bytes([0-9]*)/)[1];\n\n      if (_length === \"\") {\n        return {\n          typeClass: typeClass,\n          kind: \"dynamic\",\n          typeHint: typeHint\n        };\n      } else {\n        return {\n          typeClass: typeClass,\n          kind: \"static\",\n          length: parseInt(_length),\n          typeHint: typeHint\n        };\n      }\n\n    case \"address\":\n      return {\n        typeClass: typeClass,\n        kind: \"general\",\n        typeHint: typeHint\n      };\n\n    case \"string\":\n    case \"bool\":\n      return {\n        typeClass: typeClass,\n        typeHint: typeHint\n      };\n\n    case \"fixed\":\n    case \"ufixed\":\n      {\n        var _typeName$match = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/),\n            _typeName$match2 = _slicedToArray(_typeName$match, 3),\n            _ = _typeName$match2[0],\n            _bits = _typeName$match2[1],\n            places = _typeName$match2[2];\n\n        return {\n          typeClass: typeClass,\n          bits: parseInt(_bits),\n          places: parseInt(places),\n          typeHint: typeHint\n        };\n      }\n\n    case \"function\":\n      return {\n        typeClass: typeClass,\n        visibility: \"external\",\n        kind: \"general\",\n        typeHint: typeHint\n      };\n\n    case \"tuple\":\n      var memberTypes = abi.components.map(function (component) {\n        return {\n          name: component.name || undefined,\n          type: abiParameterToType(component)\n        };\n      });\n      return {\n        typeClass: typeClass,\n        memberTypes: memberTypes,\n        typeHint: typeHint\n      };\n  }\n}\n\nexports.abiParameterToType = abiParameterToType;","map":{"version":3,"sources":["../../../../lib/abi-data/import/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.abiParameterToType = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:abi-data:import\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nfunction abiParameterToType(abi) {\n    let typeName = abi.type;\n    let typeHint = abi.internalType;\n    //first: is it an array?\n    let arrayMatch = typeName.match(/(.*)\\[(\\d*)\\]$/);\n    if (arrayMatch) {\n        let baseTypeName = arrayMatch[1];\n        let lengthAsString = arrayMatch[2]; //may be empty!\n        let baseAbi = Object.assign(Object.assign({}, abi), { type: baseTypeName });\n        let baseType = abiParameterToType(baseAbi);\n        if (lengthAsString === \"\") {\n            return {\n                typeClass: \"array\",\n                kind: \"dynamic\",\n                baseType,\n                typeHint\n            };\n        }\n        else {\n            let length = new bn_js_1.default(lengthAsString);\n            return {\n                typeClass: \"array\",\n                kind: \"static\",\n                length,\n                baseType,\n                typeHint\n            };\n        }\n    }\n    //otherwise, here are the simple cases\n    let typeClass = typeName.match(/^([^0-9]+)/)[1];\n    switch (typeClass) {\n        case \"uint\":\n        case \"int\": {\n            let bits = typeName.match(/^u?int([0-9]+)/)[1];\n            return {\n                typeClass,\n                bits: parseInt(bits),\n                typeHint\n            };\n        }\n        case \"bytes\":\n            let length = typeName.match(/^bytes([0-9]*)/)[1];\n            if (length === \"\") {\n                return {\n                    typeClass,\n                    kind: \"dynamic\",\n                    typeHint\n                };\n            }\n            else {\n                return {\n                    typeClass,\n                    kind: \"static\",\n                    length: parseInt(length),\n                    typeHint\n                };\n            }\n        case \"address\":\n            return {\n                typeClass,\n                kind: \"general\",\n                typeHint\n            };\n        case \"string\":\n        case \"bool\":\n            return {\n                typeClass,\n                typeHint\n            };\n        case \"fixed\":\n        case \"ufixed\": {\n            let [_, bits, places] = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/);\n            return {\n                typeClass,\n                bits: parseInt(bits),\n                places: parseInt(places),\n                typeHint\n            };\n        }\n        case \"function\":\n            return {\n                typeClass,\n                visibility: \"external\",\n                kind: \"general\",\n                typeHint\n            };\n        case \"tuple\":\n            let memberTypes = abi.components.map(component => ({\n                name: component.name || undefined,\n                type: abiParameterToType(component)\n            }));\n            return {\n                typeClass,\n                memberTypes,\n                typeHint\n            };\n    }\n}\nexports.abiParameterToType = abiParameterToType;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}