{"ast":null,"code":"var _toConsumableArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nfunction shimOutput(_ref) {\n  var list = _ref.contracts,\n      sourceIndexes = _ref.sourceIndexes,\n      compilerInfo = _ref.compilerInfo;\n  var contracts = list // get old format\n  .map(function (contract) {\n    return shimContract(contract);\n  }) // get pair\n  .map(function (contract) {\n    return _defineProperty({}, contract.contract_name, contract);\n  }) // merge pairs\n  .reduce(function (a, b) {\n    return Object.assign({}, a, b);\n  }, {});\n  return [contracts, sourceIndexes, compilerInfo];\n}\n\nfunction shimContract(contract) {\n  var contractName = contract.contractName,\n      sourcePath = contract.sourcePath,\n      source = contract.source,\n      sourceMap = contract.sourceMap,\n      deployedSourceMap = contract.deployedSourceMap,\n      legacyAST = contract.legacyAST,\n      ast = contract.ast,\n      abi = contract.abi,\n      metadata = contract.metadata,\n      bytecode = contract.bytecode,\n      deployedBytecode = contract.deployedBytecode,\n      compiler = contract.compiler,\n      devdoc = contract.devdoc,\n      userdoc = contract.userdoc,\n      immutableReferences = contract.immutableReferences,\n      generatedSources = contract.generatedSources,\n      deployedGeneratedSources = contract.deployedGeneratedSources;\n  return {\n    contract_name: contractName,\n    sourcePath: sourcePath,\n    source: source,\n    sourceMap: sourceMap,\n    deployedSourceMap: deployedSourceMap,\n    legacyAST: legacyAST,\n    ast: ast,\n    abi: abi,\n    metadata: metadata,\n    bytecode: shimBytecode(bytecode),\n    deployedBytecode: shimBytecode(deployedBytecode),\n    unlinked_binary: shimBytecode(bytecode),\n    compiler: compiler,\n    devdoc: devdoc,\n    userdoc: userdoc,\n    immutableReferences: immutableReferences,\n    generatedSources: generatedSources,\n    deployedGeneratedSources: deployedGeneratedSources\n  };\n}\n\nfunction shimBytecode(bytecode) {\n  if (!bytecode) {\n    return bytecode;\n  }\n\n  if (typeof bytecode === \"string\") {\n    return bytecode;\n  }\n\n  var bytes = bytecode.bytes,\n      linkReferences = bytecode.linkReferences;\n  linkReferences = linkReferences || []; // inline link references - start by flattening the offsets\n\n  var flattenedLinkReferences = linkReferences // map each link ref to array of link refs with only one offset\n  .map(function (_ref3) {\n    var offsets = _ref3.offsets,\n        length = _ref3.length,\n        name = _ref3.name;\n    return offsets.map(function (offset) {\n      return {\n        offset: offset,\n        length: length,\n        name: name\n      };\n    });\n  }) // flatten\n  .reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []); // then overwite bytes with link reference\n\n  bytes = flattenedLinkReferences.reduce(function (bytes, _ref4) {\n    var offset = _ref4.offset,\n        name = _ref4.name,\n        length = _ref4.length;\n    // length is a byte offset\n    var characterLength = length * 2;\n    var linkId = \"__\".concat(name.slice(0, characterLength - 2));\n\n    while (linkId.length < characterLength) {\n      linkId += \"_\";\n    }\n\n    var start = offset * 2;\n    return \"\".concat(bytes.substring(0, start)).concat(linkId).concat(bytes.substring(start + characterLength));\n  }, bytes);\n  return \"0x\".concat(bytes);\n}\n\nmodule.exports = {\n  shimOutput: shimOutput,\n  shimContract: shimContract,\n  shimBytecode: shimBytecode\n};","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/@truffle/compile-solidity/legacy/shims.js"],"names":["shimOutput","list","contracts","sourceIndexes","compilerInfo","map","contract","shimContract","contract_name","reduce","a","b","Object","assign","contractName","sourcePath","source","sourceMap","deployedSourceMap","legacyAST","ast","abi","metadata","bytecode","deployedBytecode","compiler","devdoc","userdoc","immutableReferences","generatedSources","deployedGeneratedSources","shimBytecode","unlinked_binary","bytes","linkReferences","flattenedLinkReferences","offsets","length","name","offset","characterLength","linkId","slice","start","substring","module","exports"],"mappings":"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","sourcesContent":["function shimOutput({ contracts: list, sourceIndexes, compilerInfo }) {\n  const contracts = list\n    // get old format\n    .map(contract => shimContract(contract))\n    // get pair\n    .map(contract => ({ [contract.contract_name]: contract }))\n    // merge pairs\n    .reduce((a, b) => Object.assign({}, a, b), {});\n\n  return [contracts, sourceIndexes, compilerInfo];\n}\n\nfunction shimContract(contract) {\n  const {\n    contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode,\n    deployedBytecode,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources\n  } = contract;\n\n  return {\n    contract_name: contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: shimBytecode(bytecode),\n    deployedBytecode: shimBytecode(deployedBytecode),\n    unlinked_binary: shimBytecode(bytecode),\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources\n  };\n}\n\nfunction shimBytecode(bytecode) {\n  if (!bytecode) {\n    return bytecode;\n  }\n  if (typeof bytecode === \"string\") {\n    return bytecode;\n  }\n\n  let { bytes, linkReferences } = bytecode;\n\n  linkReferences = linkReferences || [];\n\n  // inline link references - start by flattening the offsets\n  const flattenedLinkReferences = linkReferences\n    // map each link ref to array of link refs with only one offset\n    .map(({ offsets, length, name }) =>\n      offsets.map(offset => ({ offset, length, name }))\n    )\n    // flatten\n    .reduce((a, b) => [...a, ...b], []);\n\n  // then overwite bytes with link reference\n  bytes = flattenedLinkReferences.reduce((bytes, { offset, name, length }) => {\n    // length is a byte offset\n    const characterLength = length * 2;\n\n    let linkId = `__${name.slice(0, characterLength - 2)}`;\n    while (linkId.length < characterLength) {\n      linkId += \"_\";\n    }\n\n    const start = offset * 2;\n\n    return `${bytes.substring(0, start)}${linkId}${bytes.substring(\n      start + characterLength\n    )}`;\n  }, bytes);\n\n  return `0x${bytes}`;\n}\n\nmodule.exports = {\n  shimOutput,\n  shimContract,\n  shimBytecode\n};\n"]},"metadata":{},"sourceType":"script"}