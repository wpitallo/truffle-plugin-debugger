{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nativize = exports.nativizeVariables = exports.ResultInspector = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:format:utils:inspect\");\n\nvar util_1 = __importDefault(require(\"util\"));\n\nvar Exception = __importStar(require(\"./exception\")); //HACK -- inspect options are ridiculous, I swear >_>\n\n\nfunction cleanStylize(options) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(options).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return key === \"stylize\" ? {} : _defineProperty({}, key, value);\n  }))));\n}\n/**\n * This class is meant to be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * function.  Given a [[Format.Values.Result]] `value`, one can use\n * `new ResultInspector(value)` to create a ResultInspector for that value,\n * which can be used with util.inspect() to create a human-readable string\n * representing the value.\n *\n * @example\n * Suppose `value` is a Result.  In Node, the following would print to the\n * console a human-readable representation of `value`, with colors enabled,\n * no maximum depth, and no maximum array length, and lines (usually) no\n * longer than 80 characters:\n * ```javascript\n * console.log(\n *   util.inspect(\n *     new ResultInspector(value),\n *     {\n *       colors: true,\n *       depth: null,\n *       maxArrayLength: null,\n *       breakLength: 80\n *     }\n *   )\n * );\n * ```\n * Of course, there are many other ways to use util.inspect; see Node's\n * documentation, linked above, for more.\n */\n\n\nvar ResultInspector = /*#__PURE__*/function () {\n  function ResultInspector(result) {\n    _classCallCheck(this, ResultInspector);\n\n    this.result = result;\n  }\n\n  _createClass(ResultInspector, [{\n    key: util_1.default.inspect.custom,\n    value: function value(depth, options) {\n      switch (this.result.kind) {\n        case \"value\":\n          switch (this.result.type.typeClass) {\n            case \"uint\":\n            case \"int\":\n              return options.stylize(this.result.value.asBN.toString(), \"number\");\n\n            case \"fixed\":\n            case \"ufixed\":\n              //note: because this is just for display, we don't bother adjusting the magic values Big.NE or Big.PE;\n              //we'll trust those to their defaults\n              return options.stylize(this.result.value.asBig.toString(), \"number\");\n\n            case \"bool\":\n              return util_1.default.inspect(this.result.value.asBoolean, options);\n\n            case \"bytes\":\n              var hex = this.result.value.asHex;\n\n              switch (this.result.type.kind) {\n                case \"static\":\n                  return options.stylize(hex, \"number\");\n\n                case \"dynamic\":\n                  return options.stylize(\"hex'\".concat(hex.slice(2), \"'\"), \"string\");\n              }\n\n            case \"address\":\n              return options.stylize(this.result.value.asAddress, \"number\");\n\n            case \"string\":\n              {\n                var coercedResult = this.result;\n\n                switch (coercedResult.value.kind) {\n                  case \"valid\":\n                    return util_1.default.inspect(coercedResult.value.asString, options);\n\n                  case \"malformed\":\n                    //note: this will turn malformed utf-8 into replacement characters (U+FFFD)\n                    //note we need to cut off the 0x prefix\n                    return util_1.default.inspect(Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString());\n                }\n              }\n\n            case \"array\":\n              {\n                var _coercedResult = this.result;\n\n                if (_coercedResult.reference !== undefined) {\n                  return formatCircular(_coercedResult.reference, options);\n                }\n\n                return util_1.default.inspect(_coercedResult.value.map(function (element) {\n                  return new ResultInspector(element);\n                }), options);\n              }\n\n            case \"mapping\":\n              return util_1.default.inspect(new Map(this.result.value.map(function (_ref4) {\n                var key = _ref4.key,\n                    value = _ref4.value;\n                return [new ResultInspector(key), new ResultInspector(value)];\n              })), options);\n\n            case \"struct\":\n              {\n                var _coercedResult2 = this.result;\n\n                if (_coercedResult2.reference !== undefined) {\n                  return formatCircular(_coercedResult2.reference, options);\n                }\n\n                return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(_coercedResult2.value.map(function (_ref5) {\n                  var name = _ref5.name,\n                      value = _ref5.value;\n                  return _defineProperty({}, name, new ResultInspector(value));\n                })))), options);\n              }\n\n            case \"tuple\":\n              {\n                var _coercedResult3 = this.result; //if everything is named, do same as with struct.\n                //if not, just do an array.\n                //(good behavior in the mixed case is hard, unfortunately)\n\n                if (_coercedResult3.value.every(function (_ref7) {\n                  var name = _ref7.name;\n                  return name;\n                })) {\n                  return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(_coercedResult3.value.map(function (_ref8) {\n                    var name = _ref8.name,\n                        value = _ref8.value;\n                    return _defineProperty({}, name, new ResultInspector(value));\n                  })))), options);\n                } else {\n                  return util_1.default.inspect(_coercedResult3.value.map(function (_ref10) {\n                    var value = _ref10.value;\n                    return new ResultInspector(value);\n                  }), options);\n                }\n              }\n\n            case \"type\":\n              {\n                switch (this.result.type.type.typeClass) {\n                  case \"contract\":\n                    //same as struct case but w/o circularity check\n                    return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(this.result.value.map(function (_ref11) {\n                      var name = _ref11.name,\n                          value = _ref11.value;\n                      return _defineProperty({}, name, new ResultInspector(value));\n                    })))), options);\n\n                  case \"enum\":\n                    {\n                      return enumTypeName(this.result.type.type);\n                    }\n                }\n              }\n\n            case \"magic\":\n              return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(this.result.value).map(function (_ref13) {\n                var _ref14 = _slicedToArray(_ref13, 2),\n                    key = _ref14[0],\n                    value = _ref14[1];\n\n                return _defineProperty({}, key, new ResultInspector(value));\n              })))), options);\n\n            case \"enum\":\n              {\n                return enumFullName(this.result); //not stylized\n              }\n\n            case \"contract\":\n              {\n                return util_1.default.inspect(new ContractInfoInspector(this.result.value), options);\n              }\n\n            case \"function\":\n              switch (this.result.type.visibility) {\n                case \"external\":\n                  {\n                    var _coercedResult4 = this.result;\n                    var contractString = util_1.default.inspect(new ContractInfoInspector(_coercedResult4.value.contract), Object.assign(Object.assign({}, cleanStylize(options)), {\n                      colors: false\n                    }));\n                    var firstLine;\n\n                    switch (_coercedResult4.value.kind) {\n                      case \"known\":\n                        firstLine = \"[Function: \".concat(_coercedResult4.value.abi.name, \" of\");\n                        break;\n\n                      case \"invalid\":\n                      case \"unknown\":\n                        firstLine = \"[Function: Unknown selector \".concat(_coercedResult4.value.selector, \" of\");\n                        break;\n                    }\n\n                    var secondLine = \"\".concat(contractString, \"]\");\n                    var breakingSpace = firstLine.length + secondLine.length + 1 > options.breakLength ? \"\\n\" : \" \"; //now, put it together\n\n                    return options.stylize(firstLine + breakingSpace + secondLine, \"special\");\n                  }\n\n                case \"internal\":\n                  {\n                    var _coercedResult5 = this.result;\n\n                    switch (_coercedResult5.value.kind) {\n                      case \"function\":\n                        if (_coercedResult5.value.definedIn) {\n                          return options.stylize(\"[Function: \".concat(_coercedResult5.value.definedIn.typeName, \".\").concat(_coercedResult5.value.name, \"]\"), \"special\");\n                        } else {\n                          return options.stylize(\"[Function: \".concat(_coercedResult5.value.name, \"]\"), \"special\");\n                        }\n\n                      case \"exception\":\n                        return _coercedResult5.value.deployedProgramCounter === 0 ? options.stylize(\"[Function: <zero>]\", \"special\") : options.stylize(\"[Function: assert(false)]\", \"special\");\n\n                      case \"unknown\":\n                        var _firstLine = \"[Function: decoding not supported (raw info:\";\n\n                        var _secondLine = \"deployed PC=\".concat(_coercedResult5.value.deployedProgramCounter, \", constructor PC=\").concat(_coercedResult5.value.constructorProgramCounter, \")]\");\n\n                        var _breakingSpace = _firstLine.length + _secondLine.length + 1 > options.breakLength ? \"\\n\" : \" \"; //now, put it together\n\n\n                        return options.stylize(_firstLine + _breakingSpace + _secondLine, \"special\");\n                    }\n                  }\n              }\n\n          }\n\n        case \"error\":\n          {\n            debug(\"this.result: %O\", this.result);\n            var errorResult = this.result; //the hell?? why couldn't it make this inference??\n\n            switch (errorResult.error.kind) {\n              case \"UintPaddingError\":\n                return \"Uint has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"IntPaddingError\":\n                return \"Int has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"UintPaddingError\":\n                return \"Ufixed has (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FixedPaddingError\":\n                return \"Fixed has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"BoolOutOfRangeError\":\n                return \"Invalid boolean (numeric value \".concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"BoolPaddingError\":\n                return \"Boolean has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"BytesPaddingError\":\n                return \"Bytestring has extra trailing bytes (padding error) (raw value \".concat(errorResult.error.raw, \")\");\n\n              case \"AddressPaddingError\":\n                return \"Address has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"EnumOutOfRangeError\":\n                return \"Invalid \".concat(enumTypeName(errorResult.error.type), \" (numeric value \").concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"EnumPaddingError\":\n                return \"Enum \".concat(enumTypeName(errorResult.error.type), \" has incorrect padding (expected padding: \").concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"EnumNotFoundDecodingError\":\n                return \"Unknown enum type \".concat(enumTypeName(errorResult.error.type), \" of id \").concat(errorResult.error.type.id, \" (numeric value \").concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"ContractPaddingError\":\n                return \"Contract address has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FunctionExternalNonStackPaddingError\":\n                return \"External function has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FunctionExternalStackPaddingError\":\n                return \"External function address or selector has extra leading bytes (padding error) (raw address \".concat(errorResult.error.rawAddress, \", raw selector \").concat(errorResult.error.rawSelector, \")\");\n\n              case \"FunctionInternalPaddingError\":\n                return \"Internal function has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"NoSuchInternalFunctionError\":\n                return \"Invalid function (Deployed PC=\".concat(errorResult.error.deployedProgramCounter, \", constructor PC=\").concat(errorResult.error.constructorProgramCounter, \") of contract \").concat(errorResult.error.context.typeName);\n\n              case \"DeployedFunctionInConstructorError\":\n                return \"Deployed-style function (PC=\".concat(errorResult.error.deployedProgramCounter, \") in constructor\");\n\n              case \"MalformedInternalFunctionError\":\n                return \"Malformed internal function w/constructor PC only (value: \".concat(errorResult.error.constructorProgramCounter, \")\");\n\n              case \"IndexedReferenceTypeError\":\n                //for this one we'll bother with some line-wrapping\n                var _firstLine2 = \"Cannot decode indexed parameter of reference type \".concat(errorResult.error.type.typeClass);\n\n                var _secondLine2 = \"(raw value \".concat(errorResult.error.raw, \")\");\n\n                var _breakingSpace2 = _firstLine2.length + _secondLine2.length + 1 > options.breakLength ? \"\\n\" : \" \";\n\n                return _firstLine2 + _breakingSpace2 + _secondLine2;\n\n              case \"OverlongArraysAndStringsNotImplementedError\":\n                return \"Array or string is too long (length \".concat(errorResult.error.lengthAsBN.toString(), \"); decoding is not supported\");\n\n              case \"OverlargePointersNotImplementedError\":\n                return \"Pointer is too large (value \".concat(errorResult.error.pointerAsBN.toString(), \"); decoding is not supported\");\n\n              case \"UserDefinedTypeNotFoundError\":\n              case \"UnsupportedConstantError\":\n              case \"UnusedImmutableError\":\n              case \"ReadErrorStack\":\n              case \"ReadErrorStorage\":\n              case \"ReadErrorBytes\":\n                return Exception.message(errorResult.error);\n              //yay, these five are already defined!\n            }\n          }\n      }\n    }\n  }]);\n\n  return ResultInspector;\n}();\n\nexports.ResultInspector = ResultInspector; //these get their own class to deal with a minor complication\n\nvar ContractInfoInspector = /*#__PURE__*/function () {\n  function ContractInfoInspector(value) {\n    _classCallCheck(this, ContractInfoInspector);\n\n    this.value = value;\n  }\n\n  _createClass(ContractInfoInspector, [{\n    key: util_1.default.inspect.custom,\n    value: function value(depth, options) {\n      switch (this.value.kind) {\n        case \"known\":\n          return options.stylize(this.value.address, \"number\") + \" (\".concat(this.value.class.typeName, \")\");\n\n        case \"unknown\":\n          return options.stylize(this.value.address, \"number\") + \" of unknown class\";\n      }\n    }\n  }]);\n\n  return ContractInfoInspector;\n}();\n\nfunction enumTypeName(enumType) {\n  return (enumType.kind === \"local\" ? enumType.definingContractName + \".\" : \"\") + enumType.typeName;\n} //this function will be used in the future for displaying circular\n//structures\n\n\nfunction formatCircular(loopLength, options) {\n  return options.stylize(\"[Circular (=up \".concat(loopLength, \")]\"), \"special\");\n}\n\nfunction enumFullName(value) {\n  switch (value.type.kind) {\n    case \"local\":\n      return \"\".concat(value.type.definingContractName, \".\").concat(value.type.typeName, \".\").concat(value.value.name);\n\n    case \"global\":\n      return \"\".concat(value.type.typeName, \".\").concat(value.value.name);\n  }\n}\n/**\n * WARNING! Do NOT use this function in real code unless you\n * absolutely have to!  Using it in controlled tests is fine,\n * but do NOT use it in real code if you have any better option!\n * See [[nativize]] for why!\n */\n\n\nfunction nativizeVariables(variables) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(variables).map(function (_ref16) {\n    var _ref17 = _slicedToArray(_ref16, 2),\n        name = _ref17[0],\n        value = _ref17[1];\n\n    try {\n      return _defineProperty({}, name, nativize(value));\n    } catch (_) {\n      return undefined; //I guess??\n    }\n  }))));\n}\n\nexports.nativizeVariables = nativizeVariables; //HACK! Avoid using!\n\n/**\n * WARNING! Do NOT use this function in real code unless you absolutely have\n * to!  Using it in controlled tests is fine, but do NOT use it in real code if\n * you have any better option!\n *\n * This function is a giant hack.  It will throw exceptions on numbers that\n * don't fit in a Javascript number.  It loses various information.  It was\n * only ever written to support our hacked-together watch expression system,\n * and later repurposed to make testing easier.\n *\n * If you are not doing something as horrible as evaluating user-inputted\n * Javascript expressions meant to operate upon Solidity variables, then you\n * probably have a better option than using this in real code!\n *\n * (For instance, if you just want to nicely print individual values, without\n * attempting to first operate on them via Javascript expressions, we have the\n * [[ResultInspector]] class, which can be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * to do exactly that.)\n *\n * Remember, the decoder output format was made to be machine-readable.  It\n * shouldn't be too hard for you to process.  If it comes to it, copy-paste\n * this code and dehackify it for your use case, which hopefully is more\n * manageable than the one that caused us to write this.\n */\n\nfunction nativize(result) {\n  return nativizeWithTable(result, []);\n}\n\nexports.nativize = nativize;\n\nfunction nativizeWithTable(result, seenSoFar) {\n  if (result.kind === \"error\") {\n    debug(\"ErrorResult: %O\", result);\n\n    switch (result.error.kind) {\n      case \"BoolOutOfRangeError\":\n        return true;\n\n      default:\n        return undefined;\n    }\n  } //NOTE: for simplicity, only arrays & structs will call nativizeWithTable;\n  //other containers will just call nativize because they can get away with it\n  //(only things that can *be* circular need nativizeWithTable, not things that\n  //can merely *contain* circularities)\n\n\n  switch (result.type.typeClass) {\n    case \"uint\":\n    case \"int\":\n      return result.value.asBN.toNumber();\n    //WARNING\n\n    case \"bool\":\n      return result.value.asBoolean;\n\n    case \"bytes\":\n      return result.value.asHex;\n\n    case \"address\":\n      return result.value.asAddress;\n\n    case \"string\":\n      {\n        var coercedResult = result;\n\n        switch (coercedResult.value.kind) {\n          case \"valid\":\n            return coercedResult.value.asString;\n\n          case \"malformed\":\n            // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)\n            // note we need to cut off the 0x prefix\n            return Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString();\n        }\n      }\n\n    case \"fixed\":\n    case \"ufixed\":\n      //HACK: Big doesn't have a toNumber() method, so we convert to string and then parse with Number\n      //NOTE: we don't bother setting the magic variables Big.NE or Big.PE first, as the choice of\n      //notation shouldn't affect the result (can you believe I have to write this? @_@)\n      return Number(result.value.asBig.toString());\n    //WARNING\n\n    case \"array\":\n      {\n        var _coercedResult6 = result;\n\n        if (_coercedResult6.reference === undefined) {\n          //we need to do some pointer stuff here, so let's first create our new\n          //object we'll be pointing to\n          //[we don't want to alter the original accidentally so let's clone a bit]\n          var output = _toConsumableArray(_coercedResult6.value); //now, we can't use a map here, or we'll screw things up!\n          //we want to *mutate* output, not replace it with a new object\n\n\n          for (var index in output) {\n            output[index] = nativizeWithTable(output[index], [output].concat(_toConsumableArray(seenSoFar)));\n          }\n\n          return output;\n        } else {\n          return seenSoFar[_coercedResult6.reference - 1];\n        }\n      }\n\n    case \"mapping\":\n      return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref19) {\n        var key = _ref19.key,\n            value = _ref19.value;\n        return _defineProperty({}, nativize(key).toString(), nativize(value));\n      }))));\n\n    case \"struct\":\n      {\n        var _coercedResult7 = result;\n\n        if (_coercedResult7.reference === undefined) {\n          //we need to do some pointer stuff here, so let's first create our new\n          //object we'll be pointing to\n          var _output = Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref21) {\n            var name = _ref21.name,\n                value = _ref21.value;\n            return _defineProperty({}, name, value);\n          })))); //now, we can't use a map here, or we'll screw things up!\n          //we want to *mutate* output, not replace it with a new object\n\n\n          for (var name in _output) {\n            _output[name] = nativizeWithTable(_output[name], [_output].concat(_toConsumableArray(seenSoFar)));\n          }\n\n          return _output;\n        } else {\n          return seenSoFar[_coercedResult7.reference - 1];\n        }\n      }\n\n    case \"type\":\n      switch (result.type.type.typeClass) {\n        case \"contract\":\n          return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref23) {\n            var name = _ref23.name,\n                value = _ref23.value;\n            return _defineProperty({}, name, nativize(value));\n          }))));\n\n        case \"enum\":\n          return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (enumValue) {\n            return _defineProperty({}, enumValue.value.name, nativize(enumValue));\n          }))));\n      }\n\n    case \"tuple\":\n      return result.value.map(function (_ref26) {\n        var value = _ref26.value;\n        return nativize(value);\n      });\n\n    case \"magic\":\n      return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(result.value).map(function (_ref27) {\n        var _ref28 = _slicedToArray(_ref27, 2),\n            key = _ref28[0],\n            value = _ref28[1];\n\n        return _defineProperty({}, key, nativize(value));\n      }))));\n\n    case \"enum\":\n      return enumFullName(result);\n\n    case \"contract\":\n      return result.value.address;\n    //we no longer include additional info\n\n    case \"function\":\n      switch (result.type.visibility) {\n        case \"external\":\n          {\n            var _coercedResult8 = result;\n\n            switch (_coercedResult8.value.kind) {\n              case \"known\":\n                return \"\".concat(_coercedResult8.value.contract.class.typeName, \"(\").concat(_coercedResult8.value.contract.address, \").\").concat(_coercedResult8.value.abi.name);\n\n              case \"invalid\":\n                return \"\".concat(_coercedResult8.value.contract.class.typeName, \"(\").concat(_coercedResult8.value.contract.address, \").call(\").concat(_coercedResult8.value.selector, \"...)\");\n\n              case \"unknown\":\n                return \"\".concat(_coercedResult8.value.contract.address, \".call(\").concat(_coercedResult8.value.selector, \"...)\");\n            }\n          }\n\n        case \"internal\":\n          {\n            var _coercedResult9 = result;\n\n            switch (_coercedResult9.value.kind) {\n              case \"function\":\n                if (_coercedResult9.value.definedIn) {\n                  return \"\".concat(_coercedResult9.value.definedIn.typeName, \".\").concat(_coercedResult9.value.name);\n                } else {\n                  return _coercedResult9.value.name;\n                }\n\n              case \"exception\":\n                return _coercedResult9.value.deployedProgramCounter === 0 ? \"<zero>\" : \"assert(false)\";\n\n              case \"unknown\":\n                return \"<decoding not supported>\";\n            }\n          }\n      }\n\n  }\n}","map":{"version":3,"sources":["../../../../lib/format/utils/inspect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.nativize = exports.nativizeVariables = exports.ResultInspector = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:format:utils:inspect\");\nconst util_1 = __importDefault(require(\"util\"));\nconst Exception = __importStar(require(\"./exception\"));\n//HACK -- inspect options are ridiculous, I swear >_>\nfunction cleanStylize(options) {\n    return Object.assign({}, ...Object.entries(options).map(([key, value]) => key === \"stylize\" ? {} : { [key]: value }));\n}\n/**\n * This class is meant to be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * function.  Given a [[Format.Values.Result]] `value`, one can use\n * `new ResultInspector(value)` to create a ResultInspector for that value,\n * which can be used with util.inspect() to create a human-readable string\n * representing the value.\n *\n * @example\n * Suppose `value` is a Result.  In Node, the following would print to the\n * console a human-readable representation of `value`, with colors enabled,\n * no maximum depth, and no maximum array length, and lines (usually) no\n * longer than 80 characters:\n * ```javascript\n * console.log(\n *   util.inspect(\n *     new ResultInspector(value),\n *     {\n *       colors: true,\n *       depth: null,\n *       maxArrayLength: null,\n *       breakLength: 80\n *     }\n *   )\n * );\n * ```\n * Of course, there are many other ways to use util.inspect; see Node's\n * documentation, linked above, for more.\n */\nclass ResultInspector {\n    constructor(result) {\n        this.result = result;\n    }\n    [util_1.default.inspect.custom](depth, options) {\n        switch (this.result.kind) {\n            case \"value\":\n                switch (this.result.type.typeClass) {\n                    case \"uint\":\n                    case \"int\":\n                        return options.stylize((this.result).value.asBN.toString(), \"number\");\n                    case \"fixed\":\n                    case \"ufixed\":\n                        //note: because this is just for display, we don't bother adjusting the magic values Big.NE or Big.PE;\n                        //we'll trust those to their defaults\n                        return options.stylize((this.result).value.asBig.toString(), \"number\");\n                    case \"bool\":\n                        return util_1.default.inspect(this.result.value.asBoolean, options);\n                    case \"bytes\":\n                        let hex = this.result.value.asHex;\n                        switch (this.result.type.kind) {\n                            case \"static\":\n                                return options.stylize(hex, \"number\");\n                            case \"dynamic\":\n                                return options.stylize(`hex'${hex.slice(2)}'`, \"string\");\n                        }\n                    case \"address\":\n                        return options.stylize(this.result.value.asAddress, \"number\");\n                    case \"string\": {\n                        let coercedResult = this.result;\n                        switch (coercedResult.value.kind) {\n                            case \"valid\":\n                                return util_1.default.inspect(coercedResult.value.asString, options);\n                            case \"malformed\":\n                                //note: this will turn malformed utf-8 into replacement characters (U+FFFD)\n                                //note we need to cut off the 0x prefix\n                                return util_1.default.inspect(Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString());\n                        }\n                    }\n                    case \"array\": {\n                        let coercedResult = this.result;\n                        if (coercedResult.reference !== undefined) {\n                            return formatCircular(coercedResult.reference, options);\n                        }\n                        return util_1.default.inspect(coercedResult.value.map(element => new ResultInspector(element)), options);\n                    }\n                    case \"mapping\":\n                        return util_1.default.inspect(new Map((this.result).value.map(({ key, value }) => [\n                            new ResultInspector(key),\n                            new ResultInspector(value)\n                        ])), options);\n                    case \"struct\": {\n                        let coercedResult = this.result;\n                        if (coercedResult.reference !== undefined) {\n                            return formatCircular(coercedResult.reference, options);\n                        }\n                        return util_1.default.inspect(Object.assign({}, ...coercedResult.value.map(({ name, value }) => ({\n                            [name]: new ResultInspector(value)\n                        }))), options);\n                    }\n                    case \"tuple\": {\n                        let coercedResult = this.result;\n                        //if everything is named, do same as with struct.\n                        //if not, just do an array.\n                        //(good behavior in the mixed case is hard, unfortunately)\n                        if (coercedResult.value.every(({ name }) => name)) {\n                            return util_1.default.inspect(Object.assign({}, ...coercedResult.value.map(({ name, value }) => ({\n                                [name]: new ResultInspector(value)\n                            }))), options);\n                        }\n                        else {\n                            return util_1.default.inspect(coercedResult.value.map(({ value }) => new ResultInspector(value)), options);\n                        }\n                    }\n                    case \"type\": {\n                        switch (this.result.type.type.typeClass) {\n                            case \"contract\":\n                                //same as struct case but w/o circularity check\n                                return util_1.default.inspect(Object.assign({}, ...this.result.value.map(({ name, value }) => ({\n                                    [name]: new ResultInspector(value)\n                                }))), options);\n                            case \"enum\": {\n                                return enumTypeName(this.result.type.type);\n                            }\n                        }\n                    }\n                    case \"magic\":\n                        return util_1.default.inspect(Object.assign({}, ...Object.entries(this.result.value).map(([key, value]) => ({ [key]: new ResultInspector(value) }))), options);\n                    case \"enum\": {\n                        return enumFullName(this.result); //not stylized\n                    }\n                    case \"contract\": {\n                        return util_1.default.inspect(new ContractInfoInspector(this.result.value), options);\n                    }\n                    case \"function\":\n                        switch (this.result.type.visibility) {\n                            case \"external\": {\n                                let coercedResult = (this.result);\n                                let contractString = util_1.default.inspect(new ContractInfoInspector(coercedResult.value.contract), Object.assign(Object.assign({}, cleanStylize(options)), { colors: false }));\n                                let firstLine;\n                                switch (coercedResult.value.kind) {\n                                    case \"known\":\n                                        firstLine = `[Function: ${coercedResult.value.abi.name} of`;\n                                        break;\n                                    case \"invalid\":\n                                    case \"unknown\":\n                                        firstLine = `[Function: Unknown selector ${coercedResult.value.selector} of`;\n                                        break;\n                                }\n                                let secondLine = `${contractString}]`;\n                                let breakingSpace = firstLine.length + secondLine.length + 1 > options.breakLength\n                                    ? \"\\n\"\n                                    : \" \";\n                                //now, put it together\n                                return options.stylize(firstLine + breakingSpace + secondLine, \"special\");\n                            }\n                            case \"internal\": {\n                                let coercedResult = (this.result);\n                                switch (coercedResult.value.kind) {\n                                    case \"function\":\n                                        if (coercedResult.value.definedIn) {\n                                            return options.stylize(`[Function: ${coercedResult.value.definedIn.typeName}.${coercedResult.value.name}]`, \"special\");\n                                        }\n                                        else {\n                                            return options.stylize(`[Function: ${coercedResult.value.name}]`, \"special\");\n                                        }\n                                    case \"exception\":\n                                        return coercedResult.value.deployedProgramCounter === 0\n                                            ? options.stylize(`[Function: <zero>]`, \"special\")\n                                            : options.stylize(`[Function: assert(false)]`, \"special\");\n                                    case \"unknown\":\n                                        let firstLine = `[Function: decoding not supported (raw info:`;\n                                        let secondLine = `deployed PC=${coercedResult.value.deployedProgramCounter}, constructor PC=${coercedResult.value.constructorProgramCounter})]`;\n                                        let breakingSpace = firstLine.length + secondLine.length + 1 >\n                                            options.breakLength\n                                            ? \"\\n\"\n                                            : \" \";\n                                        //now, put it together\n                                        return options.stylize(firstLine + breakingSpace + secondLine, \"special\");\n                                }\n                            }\n                        }\n                }\n            case \"error\": {\n                debug(\"this.result: %O\", this.result);\n                let errorResult = this.result; //the hell?? why couldn't it make this inference??\n                switch (errorResult.error.kind) {\n                    case \"UintPaddingError\":\n                        return `Uint has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"IntPaddingError\":\n                        return `Int has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"UintPaddingError\":\n                        return `Ufixed has (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"FixedPaddingError\":\n                        return `Fixed has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"BoolOutOfRangeError\":\n                        return `Invalid boolean (numeric value ${errorResult.error.rawAsBN.toString()})`;\n                    case \"BoolPaddingError\":\n                        return `Boolean has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"BytesPaddingError\":\n                        return `Bytestring has extra trailing bytes (padding error) (raw value ${errorResult.error.raw})`;\n                    case \"AddressPaddingError\":\n                        return `Address has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"EnumOutOfRangeError\":\n                        return `Invalid ${enumTypeName(errorResult.error.type)} (numeric value ${errorResult.error.rawAsBN.toString()})`;\n                    case \"EnumPaddingError\":\n                        return `Enum ${enumTypeName(errorResult.error.type)} has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"EnumNotFoundDecodingError\":\n                        return `Unknown enum type ${enumTypeName(errorResult.error.type)} of id ${errorResult.error.type.id} (numeric value ${errorResult.error.rawAsBN.toString()})`;\n                    case \"ContractPaddingError\":\n                        return `Contract address has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"FunctionExternalNonStackPaddingError\":\n                        return `External function has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"FunctionExternalStackPaddingError\":\n                        return `External function address or selector has extra leading bytes (padding error) (raw address ${errorResult.error.rawAddress}, raw selector ${errorResult.error.rawSelector})`;\n                    case \"FunctionInternalPaddingError\":\n                        return `Internal function has incorrect padding (expected padding: ${errorResult.error.paddingType}) (raw value ${errorResult.error.raw})`;\n                    case \"NoSuchInternalFunctionError\":\n                        return `Invalid function (Deployed PC=${errorResult.error.deployedProgramCounter}, constructor PC=${errorResult.error.constructorProgramCounter}) of contract ${errorResult.error.context.typeName}`;\n                    case \"DeployedFunctionInConstructorError\":\n                        return `Deployed-style function (PC=${errorResult.error.deployedProgramCounter}) in constructor`;\n                    case \"MalformedInternalFunctionError\":\n                        return `Malformed internal function w/constructor PC only (value: ${errorResult.error.constructorProgramCounter})`;\n                    case \"IndexedReferenceTypeError\": //for this one we'll bother with some line-wrapping\n                        let firstLine = `Cannot decode indexed parameter of reference type ${errorResult.error.type.typeClass}`;\n                        let secondLine = `(raw value ${errorResult.error.raw})`;\n                        let breakingSpace = firstLine.length + secondLine.length + 1 > options.breakLength\n                            ? \"\\n\"\n                            : \" \";\n                        return firstLine + breakingSpace + secondLine;\n                    case \"OverlongArraysAndStringsNotImplementedError\":\n                        return `Array or string is too long (length ${errorResult.error.lengthAsBN.toString()}); decoding is not supported`;\n                    case \"OverlargePointersNotImplementedError\":\n                        return `Pointer is too large (value ${errorResult.error.pointerAsBN.toString()}); decoding is not supported`;\n                    case \"UserDefinedTypeNotFoundError\":\n                    case \"UnsupportedConstantError\":\n                    case \"UnusedImmutableError\":\n                    case \"ReadErrorStack\":\n                    case \"ReadErrorStorage\":\n                    case \"ReadErrorBytes\":\n                        return Exception.message(errorResult.error); //yay, these five are already defined!\n                }\n            }\n        }\n    }\n}\nexports.ResultInspector = ResultInspector;\n//these get their own class to deal with a minor complication\nclass ContractInfoInspector {\n    constructor(value) {\n        this.value = value;\n    }\n    [util_1.default.inspect.custom](depth, options) {\n        switch (this.value.kind) {\n            case \"known\":\n                return (options.stylize(this.value.address, \"number\") +\n                    ` (${this.value.class.typeName})`);\n            case \"unknown\":\n                return (options.stylize(this.value.address, \"number\") + \" of unknown class\");\n        }\n    }\n}\nfunction enumTypeName(enumType) {\n    return ((enumType.kind === \"local\" ? enumType.definingContractName + \".\" : \"\") +\n        enumType.typeName);\n}\n//this function will be used in the future for displaying circular\n//structures\nfunction formatCircular(loopLength, options) {\n    return options.stylize(`[Circular (=up ${loopLength})]`, \"special\");\n}\nfunction enumFullName(value) {\n    switch (value.type.kind) {\n        case \"local\":\n            return `${value.type.definingContractName}.${value.type.typeName}.${value.value.name}`;\n        case \"global\":\n            return `${value.type.typeName}.${value.value.name}`;\n    }\n}\n/**\n * WARNING! Do NOT use this function in real code unless you\n * absolutely have to!  Using it in controlled tests is fine,\n * but do NOT use it in real code if you have any better option!\n * See [[nativize]] for why!\n */\nfunction nativizeVariables(variables) {\n    return Object.assign({}, ...Object.entries(variables).map(([name, value]) => {\n        try {\n            return { [name]: nativize(value) };\n        }\n        catch (_) {\n            return undefined; //I guess??\n        }\n    }));\n}\nexports.nativizeVariables = nativizeVariables;\n//HACK! Avoid using!\n/**\n * WARNING! Do NOT use this function in real code unless you absolutely have\n * to!  Using it in controlled tests is fine, but do NOT use it in real code if\n * you have any better option!\n *\n * This function is a giant hack.  It will throw exceptions on numbers that\n * don't fit in a Javascript number.  It loses various information.  It was\n * only ever written to support our hacked-together watch expression system,\n * and later repurposed to make testing easier.\n *\n * If you are not doing something as horrible as evaluating user-inputted\n * Javascript expressions meant to operate upon Solidity variables, then you\n * probably have a better option than using this in real code!\n *\n * (For instance, if you just want to nicely print individual values, without\n * attempting to first operate on them via Javascript expressions, we have the\n * [[ResultInspector]] class, which can be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * to do exactly that.)\n *\n * Remember, the decoder output format was made to be machine-readable.  It\n * shouldn't be too hard for you to process.  If it comes to it, copy-paste\n * this code and dehackify it for your use case, which hopefully is more\n * manageable than the one that caused us to write this.\n */\nfunction nativize(result) {\n    return nativizeWithTable(result, []);\n}\nexports.nativize = nativize;\nfunction nativizeWithTable(result, seenSoFar) {\n    if (result.kind === \"error\") {\n        debug(\"ErrorResult: %O\", result);\n        switch (result.error.kind) {\n            case \"BoolOutOfRangeError\":\n                return true;\n            default:\n                return undefined;\n        }\n    }\n    //NOTE: for simplicity, only arrays & structs will call nativizeWithTable;\n    //other containers will just call nativize because they can get away with it\n    //(only things that can *be* circular need nativizeWithTable, not things that\n    //can merely *contain* circularities)\n    switch (result.type.typeClass) {\n        case \"uint\":\n        case \"int\":\n            return (result).value.asBN.toNumber(); //WARNING\n        case \"bool\":\n            return result.value.asBoolean;\n        case \"bytes\":\n            return result.value.asHex;\n        case \"address\":\n            return result.value.asAddress;\n        case \"string\": {\n            let coercedResult = result;\n            switch (coercedResult.value.kind) {\n                case \"valid\":\n                    return coercedResult.value.asString;\n                case \"malformed\":\n                    // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)\n                    // note we need to cut off the 0x prefix\n                    return Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString();\n            }\n        }\n        case \"fixed\":\n        case \"ufixed\":\n            //HACK: Big doesn't have a toNumber() method, so we convert to string and then parse with Number\n            //NOTE: we don't bother setting the magic variables Big.NE or Big.PE first, as the choice of\n            //notation shouldn't affect the result (can you believe I have to write this? @_@)\n            return Number((result).value.asBig.toString()); //WARNING\n        case \"array\": {\n            let coercedResult = result;\n            if (coercedResult.reference === undefined) {\n                //we need to do some pointer stuff here, so let's first create our new\n                //object we'll be pointing to\n                //[we don't want to alter the original accidentally so let's clone a bit]\n                let output = [...coercedResult.value];\n                //now, we can't use a map here, or we'll screw things up!\n                //we want to *mutate* output, not replace it with a new object\n                for (let index in output) {\n                    output[index] = nativizeWithTable(output[index], [\n                        output,\n                        ...seenSoFar\n                    ]);\n                }\n                return output;\n            }\n            else {\n                return seenSoFar[coercedResult.reference - 1];\n            }\n        }\n        case \"mapping\":\n            return Object.assign({}, ...result.value.map(({ key, value }) => ({\n                [nativize(key).toString()]: nativize(value)\n            })));\n        case \"struct\": {\n            let coercedResult = result;\n            if (coercedResult.reference === undefined) {\n                //we need to do some pointer stuff here, so let's first create our new\n                //object we'll be pointing to\n                let output = Object.assign({}, ...result.value.map(({ name, value }) => ({\n                    [name]: value //we *don't* nativize yet!\n                })));\n                //now, we can't use a map here, or we'll screw things up!\n                //we want to *mutate* output, not replace it with a new object\n                for (let name in output) {\n                    output[name] = nativizeWithTable(output[name], [\n                        output,\n                        ...seenSoFar\n                    ]);\n                }\n                return output;\n            }\n            else {\n                return seenSoFar[coercedResult.reference - 1];\n            }\n        }\n        case \"type\":\n            switch (result.type.type.typeClass) {\n                case \"contract\":\n                    return Object.assign({}, ...result.value.map(({ name, value }) => ({\n                        [name]: nativize(value)\n                    })));\n                case \"enum\":\n                    return Object.assign({}, ...result.value.map(enumValue => ({\n                        [enumValue.value.name]: nativize(enumValue)\n                    })));\n            }\n        case \"tuple\":\n            return result.value.map(({ value }) => nativize(value));\n        case \"magic\":\n            return Object.assign({}, ...Object.entries(result.value).map(([key, value]) => ({ [key]: nativize(value) })));\n        case \"enum\":\n            return enumFullName(result);\n        case \"contract\":\n            return result.value.address; //we no longer include additional info\n        case \"function\":\n            switch (result.type.visibility) {\n                case \"external\": {\n                    let coercedResult = result;\n                    switch (coercedResult.value.kind) {\n                        case \"known\":\n                            return `${coercedResult.value.contract.class.typeName}(${coercedResult.value.contract.address}).${coercedResult.value.abi.name}`;\n                        case \"invalid\":\n                            return `${coercedResult.value.contract.class.typeName}(${coercedResult.value.contract.address}).call(${coercedResult.value.selector}...)`;\n                        case \"unknown\":\n                            return `${coercedResult.value.contract.address}.call(${coercedResult.value.selector}...)`;\n                    }\n                }\n                case \"internal\": {\n                    let coercedResult = result;\n                    switch (coercedResult.value.kind) {\n                        case \"function\":\n                            if (coercedResult.value.definedIn) {\n                                return `${coercedResult.value.definedIn.typeName}.${coercedResult.value.name}`;\n                            }\n                            else {\n                                return coercedResult.value.name;\n                            }\n                        case \"exception\":\n                            return coercedResult.value.deployedProgramCounter === 0\n                                ? `<zero>`\n                                : `assert(false)`;\n                        case \"unknown\":\n                            return `<decoding not supported>`;\n                    }\n                }\n            }\n    }\n}\n//# sourceMappingURL=inspect.js.map"]},"metadata":{},"sourceType":"script"}