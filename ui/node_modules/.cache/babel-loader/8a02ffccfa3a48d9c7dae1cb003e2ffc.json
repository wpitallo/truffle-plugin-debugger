{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:memory:allocate\");\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nfunction getMemoryAllocations(userDefinedTypes) {\n  var allocations = {};\n\n  for (var _i = 0, _Object$values = Object.values(userDefinedTypes); _i < _Object$values.length; _i++) {\n    var dataType = _Object$values[_i];\n\n    if (dataType.typeClass === \"struct\") {\n      allocations[dataType.id] = allocateStruct(dataType);\n    }\n  }\n\n  return allocations;\n}\n\nexports.getMemoryAllocations = getMemoryAllocations;\n\nfunction isSkippedInMemoryStructs(dataType) {\n  if (dataType.typeClass === \"mapping\") {\n    return true;\n  } else if (dataType.typeClass === \"array\") {\n    return isSkippedInMemoryStructs(dataType.baseType);\n  } else {\n    return false;\n  }\n}\n\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs; //unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\n\nfunction allocateStruct(dataType) {\n  var memberAllocations = [];\n  var position = 0;\n\n  var _iterator = _createForOfIteratorHelper(dataType.memberTypes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          name = _step$value.name,\n          memberType = _step$value.type;\n      var length = isSkippedInMemoryStructs(memberType) ? 0 : Evm.Utils.WORD_SIZE;\n      memberAllocations.push({\n        name: name,\n        type: memberType,\n        pointer: {\n          location: \"memory\",\n          start: position,\n          length: length\n        }\n      });\n      position += length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    members: memberAllocations\n  };\n}","map":{"version":3,"sources":["../../../../lib/memory/allocate/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,uBAAZ,CAAd;;AAOA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAKA,SAAgB,oBAAhB,CACE,gBADF,EAC0C;AAExC,MAAI,WAAW,GAAsB,EAArC;;AACA,oCAAuB,MAAM,CAAC,MAAP,CAAc,gBAAd,CAAvB,oCAAwD;AAAnD,QAAM,QAAQ,qBAAd;;AACH,QAAI,QAAQ,CAAC,SAAT,KAAuB,QAA3B,EAAqC;AACnC,MAAA,WAAW,CAAC,QAAQ,CAAC,EAAV,CAAX,GAA2B,cAAc,CAAC,QAAD,CAAzC;AACD;AACF;;AACD,SAAO,WAAP;AACD;;AAVD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAYA,SAAgB,wBAAhB,CAAyC,QAAzC,EAAoE;AAClE,MAAI,QAAQ,CAAC,SAAT,KAAuB,SAA3B,EAAsC;AACpC,WAAO,IAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAC,SAAT,KAAuB,OAA3B,EAAoC;AACzC,WAAO,wBAAwB,CAAC,QAAQ,CAAC,QAAV,CAA/B;AACD,GAFM,MAEA;AACL,WAAO,KAAP;AACD;AACF;;AARD,OAAA,CAAA,wBAAA,GAAA,wBAAA,C,CAUA;AACA;;AACA,SAAS,cAAT,CAAwB,QAAxB,EAAyD;AACvD,MAAI,iBAAiB,GAA6B,EAAlD;AACA,MAAI,QAAQ,GAAG,CAAf;;AAFuD,6CAGd,QAAQ,CAAC,WAHK;AAAA;;AAAA;AAGvD,wDAA+D;AAAA;AAAA,UAAlD,IAAkD,eAAlD,IAAkD;AAAA,UAAtC,UAAsC,eAA5C,IAA4C;AAC7D,UAAM,MAAM,GAAG,wBAAwB,CAAC,UAAD,CAAxB,GACX,CADW,GAEX,GAAG,CAAC,KAAJ,CAAU,SAFd;AAGA,MAAA,iBAAiB,CAAC,IAAlB,CAAuB;AACrB,QAAA,IAAI,EAAJ,IADqB;AAErB,QAAA,IAAI,EAAE,UAFe;AAGrB,QAAA,OAAO,EAAE;AACP,UAAA,QAAQ,EAAE,QADH;AAEP,UAAA,KAAK,EAAE,QAFA;AAGP,UAAA,MAAM,EAAN;AAHO;AAHY,OAAvB;AASA,MAAA,QAAQ,IAAI,MAAZ;AACD;AAjBsD;AAAA;AAAA;AAAA;AAAA;;AAmBvD,SAAO;AACL,IAAA,OAAO,EAAE;AADJ,GAAP;AAGD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:memory:allocate\");\nconst Evm = __importStar(require(\"../../evm\"));\nfunction getMemoryAllocations(userDefinedTypes) {\n    let allocations = {};\n    for (const dataType of Object.values(userDefinedTypes)) {\n        if (dataType.typeClass === \"struct\") {\n            allocations[dataType.id] = allocateStruct(dataType);\n        }\n    }\n    return allocations;\n}\nexports.getMemoryAllocations = getMemoryAllocations;\nfunction isSkippedInMemoryStructs(dataType) {\n    if (dataType.typeClass === \"mapping\") {\n        return true;\n    }\n    else if (dataType.typeClass === \"array\") {\n        return isSkippedInMemoryStructs(dataType.baseType);\n    }\n    else {\n        return false;\n    }\n}\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs;\n//unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\nfunction allocateStruct(dataType) {\n    let memberAllocations = [];\n    let position = 0;\n    for (const { name, type: memberType } of dataType.memberTypes) {\n        const length = isSkippedInMemoryStructs(memberType)\n            ? 0\n            : Evm.Utils.WORD_SIZE;\n        memberAllocations.push({\n            name,\n            type: memberType,\n            pointer: {\n                location: \"memory\",\n                start: position,\n                length\n            }\n        });\n        position += length;\n    }\n    return {\n        members: memberAllocations\n    };\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}