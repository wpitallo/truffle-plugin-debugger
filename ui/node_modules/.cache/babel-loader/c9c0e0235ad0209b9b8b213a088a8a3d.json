{"ast":null,"code":"'use strict'; // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\nvar _createForOfIteratorHelper = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  var result = 0;\n  var maxUsed = 0;\n  var maxWeight = 0;\n\n  var _iterator = _createForOfIteratorHelper(indents),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      // TODO: use destructuring when targeting Node.js 6\n      var key = entry[0];\n      var val = entry[1];\n      var u = val[0];\n      var w = val[1];\n\n      if (u > maxUsed || u === maxUsed && w > maxWeight) {\n        maxUsed = u;\n        maxWeight = w;\n        result = Number(key);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  var tabs = 0;\n  var spaces = 0; // remember the size of previous line's indentation\n\n  var prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  var indents = new Map(); // pointer to the array of last used indent\n\n  var current; // whether the last action was an indent (opposed to an unindent)\n\n  var isIndent;\n\n  var _iterator2 = _createForOfIteratorHelper(str.split(/\\n/g)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n\n      if (!line) {\n        // ignore empty lines\n        continue;\n      }\n\n      var _indent = void 0;\n\n      var matches = line.match(INDENT_RE);\n\n      if (matches) {\n        _indent = matches[0].length;\n\n        if (matches[1]) {\n          spaces++;\n        } else {\n          tabs++;\n        }\n      } else {\n        _indent = 0;\n      }\n\n      var diff = _indent - prev;\n      prev = _indent;\n\n      if (diff) {\n        // an indent or unindent has been detected\n        isIndent = diff > 0;\n        current = indents.get(isIndent ? diff : -diff);\n\n        if (current) {\n          current[0]++;\n        } else {\n          current = [1, 0];\n          indents.set(diff, current);\n        }\n      } else if (current) {\n        // if the last action was an indent, increment the weight\n        current[1] += Number(isIndent);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var amount = getMostUsed(indents);\n  var type;\n  var indent;\n\n  if (!amount) {\n    type = null;\n    indent = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    indent = ' '.repeat(amount);\n  } else {\n    type = 'tab';\n    indent = '\\t'.repeat(amount);\n  }\n\n  return {\n    amount: amount,\n    type: type,\n    indent: indent\n  };\n};","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/detect-indent/index.js"],"names":["INDENT_RE","getMostUsed","indents","result","maxUsed","maxWeight","entry","key","val","u","w","Number","module","exports","str","TypeError","tabs","spaces","prev","Map","current","isIndent","split","line","indent","matches","match","length","diff","get","set","amount","type","repeat"],"mappings":"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","sourcesContent":["'use strict';\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nconst INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tlet result = 0;\n\tlet maxUsed = 0;\n\tlet maxWeight = 0;\n\n\tfor (const entry of indents) {\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tconst key = entry[0];\n\t\tconst val = entry[1];\n\n\t\tconst u = val[0];\n\t\tconst w = val[1];\n\n\t\tif (u > maxUsed || (u === maxUsed && w > maxWeight)) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = Number(key);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = str => {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tlet tabs = 0;\n\tlet spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tlet prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tconst indents = new Map();\n\n\t// pointer to the array of last used indent\n\tlet current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tlet isIndent;\n\n\tfor (const line of str.split(/\\n/g)) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet indent;\n\t\tconst matches = line.match(INDENT_RE);\n\n\t\tif (matches) {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t} else {\n\t\t\tindent = 0;\n\t\t}\n\n\t\tconst diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents.get(isIndent ? diff : -diff);\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = [1, 0];\n\t\t\t\tindents.set(diff, current);\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += Number(isIndent);\n\t\t}\n\t}\n\n\tconst amount = getMostUsed(indents);\n\n\tlet type;\n\tlet indent;\n\tif (!amount) {\n\t\ttype = null;\n\t\tindent = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tindent = ' '.repeat(amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tindent = '\\t'.repeat(amount);\n\t}\n\n\treturn {\n\t\tamount,\n\t\ttype,\n\t\tindent\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}