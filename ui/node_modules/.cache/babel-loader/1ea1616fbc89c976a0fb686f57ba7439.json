{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toAddress = exports.equalData = exports.keccak256 = exports.ZERO_ADDRESS = exports.MAX_WORD = exports.PC_SIZE = exports.SELECTOR_SIZE = exports.ADDRESS_SIZE = exports.WORD_SIZE = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:evm:utils\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\")); // untyped import since no @types/web3-utils exists\n\n\nvar Web3Utils = require(\"web3-utils\");\n\nvar Conversion = __importStar(require(\"../conversion\"));\n\nexports.WORD_SIZE = 0x20;\nexports.ADDRESS_SIZE = 20;\nexports.SELECTOR_SIZE = 4; //function selectors, not event selectors\n\nexports.PC_SIZE = 4;\nexports.MAX_WORD = new bn_js_1.default(-1).toTwos(exports.WORD_SIZE * 8);\nexports.ZERO_ADDRESS = \"0x\" + \"00\".repeat(exports.ADDRESS_SIZE); //beware of using this for generic strings! (it's fine for bytestrings, or\n//strings representing numbers) if you want to use this on a generic string,\n//you should pass in {type: \"string\", value: theString} instead of the string\n//itself.\n//(maybe I should add a rawKeccak256 function, using sha3 instead of\n//soliditysha3?  not seeing the need atm though)\n\nfunction keccak256() {\n  // debug(\"args %o\", args);\n  var rawSha = Web3Utils.soliditySha3.apply(Web3Utils, arguments);\n  debug(\"rawSha %o\", rawSha);\n  var sha;\n\n  if (rawSha === null) {\n    sha = \"\"; //HACK, I guess?\n  } else {\n    sha = rawSha.replace(/0x/, \"\");\n  }\n\n  return Conversion.toBN(sha);\n}\n\nexports.keccak256 = keccak256; //checks if two bytearrays (which may be undefined) are equal.\n//does not consider undefined to be equal to itself.\n\nfunction equalData(bytes1, bytes2) {\n  if (!bytes1 || !bytes2) {\n    return false;\n  }\n\n  if (bytes1.length !== bytes2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < bytes1.length; i++) {\n    if (bytes1[i] !== bytes2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.equalData = equalData;\n\nfunction toAddress(bytes) {\n  if (typeof bytes === \"string\") {\n    //in this case, we can do some simple string manipulation and\n    //then pass to web3\n    var hex = bytes; //just renaming for clarity\n\n    if (hex.startsWith(\"0x\")) {\n      hex = hex.slice(2);\n    }\n\n    if (hex.length < 2 * exports.ADDRESS_SIZE) {\n      hex = hex.padStart(2 * exports.ADDRESS_SIZE, \"0\");\n    }\n\n    if (hex.length > 2 * exports.ADDRESS_SIZE) {\n      hex = \"0x\" + hex.slice(hex.length - 2 * exports.ADDRESS_SIZE);\n    }\n\n    return Web3Utils.toChecksumAddress(hex);\n  } //otherwise, we're in the Uint8Array case, which we can't fully handle ourself\n  //truncate *on left* to 20 bytes\n\n\n  if (bytes.length > exports.ADDRESS_SIZE) {\n    bytes = bytes.slice(bytes.length - exports.ADDRESS_SIZE, bytes.length);\n  } //now, convert to hex string and apply checksum case that second argument\n  //(which ensures it's padded to 20 bytes) shouldn't actually ever be\n  //needed, but I'll be safe and include it\n\n\n  return Web3Utils.toChecksumAddress(Conversion.toHexString(bytes, exports.ADDRESS_SIZE));\n}\n\nexports.toAddress = toAddress;","map":{"version":3,"sources":["../../../lib/evm/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toAddress = exports.equalData = exports.keccak256 = exports.ZERO_ADDRESS = exports.MAX_WORD = exports.PC_SIZE = exports.SELECTOR_SIZE = exports.ADDRESS_SIZE = exports.WORD_SIZE = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:evm:utils\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n// untyped import since no @types/web3-utils exists\nconst Web3Utils = require(\"web3-utils\");\nconst Conversion = __importStar(require(\"../conversion\"));\nexports.WORD_SIZE = 0x20;\nexports.ADDRESS_SIZE = 20;\nexports.SELECTOR_SIZE = 4; //function selectors, not event selectors\nexports.PC_SIZE = 4;\nexports.MAX_WORD = new bn_js_1.default(-1).toTwos(exports.WORD_SIZE * 8);\nexports.ZERO_ADDRESS = \"0x\" + \"00\".repeat(exports.ADDRESS_SIZE);\n//beware of using this for generic strings! (it's fine for bytestrings, or\n//strings representing numbers) if you want to use this on a generic string,\n//you should pass in {type: \"string\", value: theString} instead of the string\n//itself.\n//(maybe I should add a rawKeccak256 function, using sha3 instead of\n//soliditysha3?  not seeing the need atm though)\nfunction keccak256(...args) {\n    // debug(\"args %o\", args);\n    const rawSha = Web3Utils.soliditySha3(...args);\n    debug(\"rawSha %o\", rawSha);\n    let sha;\n    if (rawSha === null) {\n        sha = \"\"; //HACK, I guess?\n    }\n    else {\n        sha = rawSha.replace(/0x/, \"\");\n    }\n    return Conversion.toBN(sha);\n}\nexports.keccak256 = keccak256;\n//checks if two bytearrays (which may be undefined) are equal.\n//does not consider undefined to be equal to itself.\nfunction equalData(bytes1, bytes2) {\n    if (!bytes1 || !bytes2) {\n        return false;\n    }\n    if (bytes1.length !== bytes2.length) {\n        return false;\n    }\n    for (let i = 0; i < bytes1.length; i++) {\n        if (bytes1[i] !== bytes2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalData = equalData;\nfunction toAddress(bytes) {\n    if (typeof bytes === \"string\") {\n        //in this case, we can do some simple string manipulation and\n        //then pass to web3\n        let hex = bytes; //just renaming for clarity\n        if (hex.startsWith(\"0x\")) {\n            hex = hex.slice(2);\n        }\n        if (hex.length < 2 * exports.ADDRESS_SIZE) {\n            hex = hex.padStart(2 * exports.ADDRESS_SIZE, \"0\");\n        }\n        if (hex.length > 2 * exports.ADDRESS_SIZE) {\n            hex = \"0x\" + hex.slice(hex.length - 2 * exports.ADDRESS_SIZE);\n        }\n        return Web3Utils.toChecksumAddress(hex);\n    }\n    //otherwise, we're in the Uint8Array case, which we can't fully handle ourself\n    //truncate *on left* to 20 bytes\n    if (bytes.length > exports.ADDRESS_SIZE) {\n        bytes = bytes.slice(bytes.length - exports.ADDRESS_SIZE, bytes.length);\n    }\n    //now, convert to hex string and apply checksum case that second argument\n    //(which ensures it's padded to 20 bytes) shouldn't actually ever be\n    //needed, but I'll be safe and include it\n    return Web3Utils.toChecksumAddress(Conversion.toHexString(bytes, exports.ADDRESS_SIZE));\n}\nexports.toAddress = toAddress;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}