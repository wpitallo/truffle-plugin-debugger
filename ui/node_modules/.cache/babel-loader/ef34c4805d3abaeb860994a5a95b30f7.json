{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(decodeBytes);\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeString = exports.decodeBytes = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:bytes:decode\");\n\nvar read_1 = __importDefault(require(\"../../read\"));\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar errors_1 = require(\"../../errors\");\n\nvar utf8_1 = __importDefault(require(\"utf8\"));\n\nfunction decodeBytes(dataType, pointer, info) {\n  var options,\n      state,\n      strict,\n      bytes,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function decodeBytes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n          state = info.state;\n          strict = options.strictAbiMode; //if this is undefined it'll still be falsy so OK\n\n          _context.prev = 3;\n          return _context.delegateYield(read_1.default(pointer, state), \"t0\", 5);\n\n        case 5:\n          bytes = _context.t0;\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t1 = _context[\"catch\"](3);\n          debug(\"segfault, pointer %o, state: %O\", pointer, state);\n          return _context.abrupt(\"return\", errors_1.handleDecodingError(dataType, _context.t1, strict));\n\n        case 12:\n          debug(\"type %O\", dataType);\n          debug(\"pointer %o\", pointer); //note: this function does not check padding\n\n          _context.t2 = dataType.typeClass;\n          _context.next = _context.t2 === \"bytes\" ? 17 : _context.t2 === \"string\" ? 18 : 19;\n          break;\n\n        case 17:\n          return _context.abrupt(\"return\", {\n            type: dataType,\n            kind: \"value\",\n            value: {\n              asHex: Conversion.toHexString(bytes)\n            }\n          });\n\n        case 18:\n          return _context.abrupt(\"return\", {\n            type: dataType,\n            kind: \"value\",\n            value: decodeString(bytes)\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 8]]);\n}\n\nexports.decodeBytes = decodeBytes;\n\nfunction decodeString(bytes) {\n  //the following line takes our UTF-8 string... and interprets each byte\n  //as a UTF-16 bytepair.  Yikes!  Fortunately, we have a library to repair that.\n  var badlyEncodedString = String.fromCharCode.apply(undefined, bytes);\n\n  try {\n    //this will throw an error if we have malformed UTF-8\n    var correctlyEncodedString = utf8_1.default.decode(badlyEncodedString); //NOTE: we don't use node's builtin Buffer class to do the UTF-8 decoding\n    //here, because that handles malformed UTF-8 by means of replacement characters\n    //(U+FFFD).  That loses information.  So we use the utf8 package instead,\n    //and... well, see the catch block below.\n\n    return {\n      kind: \"valid\",\n      asString: correctlyEncodedString\n    };\n  } catch (_a) {\n    //we're going to ignore the precise error and just assume it's because\n    //the string was malformed (what else could it be?)\n    var hexString = Conversion.toHexString(bytes);\n    return {\n      kind: \"malformed\",\n      asHex: hexString\n    };\n  }\n}\n\nexports.decodeString = decodeString;","map":{"version":3,"sources":["../../../../lib/bytes/decode/index.ts"],"names":[],"mappings":";;;;oDAYiB,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZjB,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,oBAAZ,CAAd;;AAEA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAKA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,SAAiB,WAAjB,CACE,QADF,EAEE,OAFF,EAGE,IAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIE,UAAA,OAJF,2DAI4B,EAJ5B;AAMU,UAAA,KANV,GAMoB,IANpB,CAMU,KANV;AAOyB,UAAA,MAPzB,GAOoC,OAPpC,CAOU,aAPV,EAO6C;;AAP7C;AAWY,wCAAO,MAAA,CAAA,OAAA,CAAK,OAAL,EAAc,KAAd,CAAP;;AAXZ;AAWI,UAAA,KAXJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaI,UAAA,KAAK,CAAC,iCAAD,EAAoC,OAApC,EAA6C,KAA7C,CAAL;AAbJ,2CAcW,QAAA,CAAA,mBAAA,CAAoB,QAApB,eAAqC,MAArC,CAdX;;AAAA;AAiBE,UAAA,KAAK,CAAC,SAAD,EAAY,QAAZ,CAAL;AACA,UAAA,KAAK,CAAC,YAAD,EAAe,OAAf,CAAL,CAlBF,CAoBE;;AApBF,wBAsBU,QAAQ,CAAC,SAtBnB;AAAA,0CAuBS,OAvBT,wBAkCS,QAlCT;AAAA;;AAAA;AAAA,2CA0Ba;AACL,YAAA,IAAI,EAAE,QADD;AAEL,YAAA,IAAI,EAAE,OAFD;AAGL,YAAA,KAAK,EAAE;AACL,cAAA,KAAK,EAAE,UAAU,CAAC,WAAX,CAAuB,KAAvB;AADF;AAHF,WA1Bb;;AAAA;AAAA,2CAmCa;AACL,YAAA,IAAI,EAAE,QADD;AAEL,YAAA,IAAI,EAAE,OAFD;AAGL,YAAA,KAAK,EAAE,YAAY,CAAC,KAAD;AAHd,WAnCb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,OAAA,CAAA,WAAA,GAAA,WAAA;;AA2CA,SAAgB,YAAhB,CAA6B,KAA7B,EAA8C;AAC5C;AACA;AACA,MAAI,kBAAkB,GAAG,MAAM,CAAC,YAAP,CAAoB,KAApB,CAA0B,SAA1B,EAAqC,KAArC,CAAzB;;AACA,MAAI;AACF;AACA,QAAI,sBAAsB,GAAG,MAAA,CAAA,OAAA,CAAK,MAAL,CAAY,kBAAZ,CAA7B,CAFE,CAGF;AACA;AACA;AACA;;AACA,WAAO;AACL,MAAA,IAAI,EAAE,OADD;AAEL,MAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GAXD,CAWE,OAAA,EAAA,EAAM;AACN;AACA;AACA,QAAI,SAAS,GAAG,UAAU,CAAC,WAAX,CAAuB,KAAvB,CAAhB;AACA,WAAO;AACL,MAAA,IAAI,EAAE,WADD;AAEL,MAAA,KAAK,EAAE;AAFF,KAAP;AAID;AACF;;AAxBD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeString = exports.decodeBytes = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:bytes:decode\");\nconst read_1 = __importDefault(require(\"../../read\"));\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst errors_1 = require(\"../../errors\");\nconst utf8_1 = __importDefault(require(\"utf8\"));\nfunction* decodeBytes(dataType, pointer, info, options = {}) {\n    const { state } = info;\n    const { strictAbiMode: strict } = options; //if this is undefined it'll still be falsy so OK\n    let bytes;\n    try {\n        bytes = yield* read_1.default(pointer, state);\n    }\n    catch (error) {\n        debug(\"segfault, pointer %o, state: %O\", pointer, state);\n        return errors_1.handleDecodingError(dataType, error, strict);\n    }\n    debug(\"type %O\", dataType);\n    debug(\"pointer %o\", pointer);\n    //note: this function does not check padding\n    switch (dataType.typeClass) {\n        case \"bytes\":\n            //we assume this is a dynamic bytestring!\n            //static ones should go to decodeBasic!\n            return {\n                type: dataType,\n                kind: \"value\",\n                value: {\n                    asHex: Conversion.toHexString(bytes)\n                }\n            };\n        case \"string\":\n            return {\n                type: dataType,\n                kind: \"value\",\n                value: decodeString(bytes)\n            };\n    }\n}\nexports.decodeBytes = decodeBytes;\nfunction decodeString(bytes) {\n    //the following line takes our UTF-8 string... and interprets each byte\n    //as a UTF-16 bytepair.  Yikes!  Fortunately, we have a library to repair that.\n    let badlyEncodedString = String.fromCharCode.apply(undefined, bytes);\n    try {\n        //this will throw an error if we have malformed UTF-8\n        let correctlyEncodedString = utf8_1.default.decode(badlyEncodedString);\n        //NOTE: we don't use node's builtin Buffer class to do the UTF-8 decoding\n        //here, because that handles malformed UTF-8 by means of replacement characters\n        //(U+FFFD).  That loses information.  So we use the utf8 package instead,\n        //and... well, see the catch block below.\n        return {\n            kind: \"valid\",\n            asString: correctlyEncodedString\n        };\n    }\n    catch (_a) {\n        //we're going to ignore the precise error and just assume it's because\n        //the string was malformed (what else could it be?)\n        let hexString = Conversion.toHexString(bytes);\n        return {\n            kind: \"malformed\",\n            asHex: hexString\n        };\n    }\n}\nexports.decodeString = decodeString;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}