{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(decodeConstant);\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeConstant = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:ast:decode\");\n\nvar read_1 = __importDefault(require(\"../../read\"));\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Basic = __importStar(require(\"../../basic\"));\n\nvar Bytes = __importStar(require(\"../../bytes\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nfunction decodeConstant(dataType, pointer, info) {\n  var size, word, bytes;\n  return _regeneratorRuntime.wrap(function decodeConstant$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          debug(\"pointer %o\", pointer); //normally, we just dispatch to decodeBasic or decodeBytes.\n          //for statically-sized bytes, however, we need to make a special case.\n          //you see, decodeBasic expects to find the bytes at the *beginning*\n          //of the word, but readDefinition will put them at the *end* of the\n          //word.  So we'll have to adjust things ourselves.\n\n          if (!(dataType.typeClass === \"bytes\" && dataType.kind === \"static\")) {\n            _context.next = 13;\n            break;\n          }\n\n          size = dataType.length;\n          _context.prev = 3;\n          return _context.delegateYield(read_1.default(pointer, info.state), \"t0\", 5);\n\n        case 5:\n          word = _context.t0;\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t1 = _context[\"catch\"](3);\n          return _context.abrupt(\"return\", {\n            type: dataType,\n            kind: \"error\",\n            error: _context.t1.error\n          });\n\n        case 11:\n          //not bothering to check padding; shouldn't be necessary\n          bytes = word.slice(Evm.Utils.WORD_SIZE - size);\n          return _context.abrupt(\"return\", {\n            type: dataType,\n            kind: \"value\",\n            value: {\n              asHex: Conversion.toHexString(bytes)\n            }\n          });\n\n        case 13:\n          //otherwise, as mentioned, just dispatch to decodeBasic or decodeBytes\n          debug(\"not a static bytes\");\n\n          if (!(dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\")) {\n            _context.next = 17;\n            break;\n          }\n\n          return _context.delegateYield(Bytes.Decode.decodeBytes(dataType, pointer, info), \"t2\", 16);\n\n        case 16:\n          return _context.abrupt(\"return\", _context.t2);\n\n        case 17:\n          return _context.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info), \"t3\", 18);\n\n        case 18:\n          return _context.abrupt(\"return\", _context.t3);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 8]]);\n}\n\nexports.decodeConstant = decodeConstant;","map":{"version":3,"sources":["../../../../lib/ast-constant/decode/index.ts"],"names":[],"mappings":";;;;oDAaiB,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbjB,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,kBAAZ,CAAd;;AAEA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAGA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAEA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAGA,SAAiB,cAAjB,CACE,QADF,EAEE,OAFF,EAGE,IAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAKE,UAAA,KAAK,CAAC,YAAD,EAAe,OAAf,CAAL,CALF,CAOE;AACA;AACA;AACA;AACA;;AAXF,gBAaM,QAAQ,CAAC,SAAT,KAAuB,OAAvB,IAAkC,QAAQ,CAAC,IAAT,KAAkB,QAb1D;AAAA;AAAA;AAAA;;AAcQ,UAAA,IAdR,GAce,QAAQ,CAAC,MAdxB;AAAA;AAiBa,wCAAO,MAAA,CAAA,OAAA,CAAK,OAAL,EAAc,IAAI,CAAC,KAAnB,CAAP;;AAjBb;AAiBM,UAAA,IAjBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAmBa;AACL,YAAA,IAAI,EAAE,QADD;AAEL,YAAA,IAAI,EAAE,OAFD;AAGL,YAAA,KAAK,EAAkB,YAAO;AAHzB,WAnBb;;AAAA;AAyBI;AACI,UAAA,KA1BR,GA0BgB,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAJ,CAAU,SAAV,GAAsB,IAAjC,CA1BhB;AAAA,2CA2BW;AACL,YAAA,IAAI,EAAE,QADD;AAEL,YAAA,IAAI,EAAE,OAFD;AAGL,YAAA,KAAK,EAAE;AACL,cAAA,KAAK,EAAE,UAAU,CAAC,WAAX,CAAuB,KAAvB;AADF;AAHF,WA3BX;;AAAA;AAoCE;AACA,UAAA,KAAK,CAAC,oBAAD,CAAL;;AArCF,gBAsCM,QAAQ,CAAC,SAAT,KAAuB,OAAvB,IAAkC,QAAQ,CAAC,SAAT,KAAuB,QAtC/D;AAAA;AAAA;AAAA;;AAuCW,wCAAO,KAAK,CAAC,MAAN,CAAa,WAAb,CAAyB,QAAzB,EAAmC,OAAnC,EAA4C,IAA5C,CAAP;;AAvCX;AAAA;;AAAA;AAyCS,wCAAO,KAAK,CAAC,MAAN,CAAa,WAAb,CAAyB,QAAzB,EAAmC,OAAnC,EAA4C,IAA5C,CAAP;;AAzCT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeConstant = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:ast:decode\");\nconst read_1 = __importDefault(require(\"../../read\"));\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst Basic = __importStar(require(\"../../basic\"));\nconst Bytes = __importStar(require(\"../../bytes\"));\nconst Evm = __importStar(require(\"../../evm\"));\nfunction* decodeConstant(dataType, pointer, info) {\n    debug(\"pointer %o\", pointer);\n    //normally, we just dispatch to decodeBasic or decodeBytes.\n    //for statically-sized bytes, however, we need to make a special case.\n    //you see, decodeBasic expects to find the bytes at the *beginning*\n    //of the word, but readDefinition will put them at the *end* of the\n    //word.  So we'll have to adjust things ourselves.\n    if (dataType.typeClass === \"bytes\" && dataType.kind === \"static\") {\n        let size = dataType.length;\n        let word;\n        try {\n            word = yield* read_1.default(pointer, info.state);\n        }\n        catch (error) {\n            return {\n                type: dataType,\n                kind: \"error\",\n                error: error.error\n            };\n        }\n        //not bothering to check padding; shouldn't be necessary\n        let bytes = word.slice(Evm.Utils.WORD_SIZE - size);\n        return {\n            type: dataType,\n            kind: \"value\",\n            value: {\n                asHex: Conversion.toHexString(bytes)\n            }\n        }; //we'll skip including a raw value, as that would be meaningless\n    }\n    //otherwise, as mentioned, just dispatch to decodeBasic or decodeBytes\n    debug(\"not a static bytes\");\n    if (dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\") {\n        return yield* Bytes.Decode.decodeBytes(dataType, pointer, info);\n    }\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n}\nexports.decodeConstant = decodeConstant;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}