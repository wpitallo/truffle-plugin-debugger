{"ast":null,"code":"var _classCallCheck = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\n!function (e, t) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(\"Debugger\", [], t) : \"object\" == typeof exports ? exports.Debugger = t() : e.Debugger = t();\n}(global, function () {\n  return function (e) {\n    var t = {};\n\n    function n(r) {\n      if (t[r]) return t[r].exports;\n      var a = t[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return e[r].call(a.exports, a, a.exports, n), a.l = !0, a.exports;\n    }\n\n    return n.m = e, n.c = t, n.d = function (e, t, r) {\n      n.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: r\n      });\n    }, n.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, n.t = function (e, t) {\n      if (1 & t && (e = n(e)), 8 & t) return e;\n      if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n      var r = Object.create(null);\n      if (n.r(r), Object.defineProperty(r, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & t && \"string\" != typeof e) for (var a in e) {\n        n.d(r, a, function (t) {\n          return e[t];\n        }.bind(null, a));\n      }\n      return r;\n    }, n.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return n.d(t, \"a\", t), t;\n    }, n.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.p = \"\", n(n.s = 40);\n  }([function (e, t) {\n    e.exports = require(\"debug\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = o(n(2));\n    t.isDeliberatelySkippedNodeType = l, t.isSkippedNodeType = function (e) {\n      return l(e) || [\"VariableDeclarationStatement\", \"Mapping\", \"Block\", \"InlineAssembly\", \"YulTypedName\"].includes(e.nodeType) || e.nodeType.includes(\"TypeName\") || void 0 !== e.typeDescriptions && \"stringliteral\" === a.Ast.Utils.typeClass(e);\n    }, t.prefixName = function (e, t) {\n      return Object.defineProperty(t, \"name\", {\n        value: \"\".concat(e, \".\").concat(t.name),\n        configurable: !0\n      }), t;\n    }, t.makePath = function (e, t) {\n      return \"\".concat(e, \":\").concat(t);\n    }, t.popNWhere = function (e, t, n) {\n      var r = e.slice();\n\n      for (; t > 0 && r.length > 0;) {\n        var _e = r[r.length - 1];\n        n(_e) && t--, r.pop();\n      }\n\n      return r;\n    }, t.keccak256 = s, t.stableKeccak256 = c, t.makeAssignment = function (e, t) {\n      var n = c(e);\n      return (0, r.default)({}, e, {\n        id: n,\n        ref: t\n      });\n    }, t.isCallMnemonic = function (e) {\n      return [\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"].includes(e);\n    }, t.isShortCallMnemonic = function (e) {\n      return [\"DELEGATECALL\", \"STATICCALL\"].includes(e);\n    }, t.isDelegateCallMnemonicBroad = function (e) {\n      return [\"DELEGATECALL\", \"CALLCODE\"].includes(e);\n    }, t.isDelegateCallMnemonicStrict = function (e) {\n      return [\"DELEGATECALL\"].includes(e);\n    }, t.isStaticCallMnemonic = function (e) {\n      return [\"STATICCALL\"].includes(e);\n    }, t.isCreateMnemonic = function (e) {\n      return [\"CREATE\", \"CREATE2\"].includes(e);\n    };\n\n    var a = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(3)),\n        i = o(n(45));\n\n    function o(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    function l(e) {\n      return [\"ContractDefinition\", \"VariableDeclaration\", \"YulVariableDeclaration\", \"YulBlock\"].includes(e.nodeType);\n    }\n\n    function s() {\n      var _a$Evm$Utils;\n\n      return a.Conversion.toHexString((_a$Evm$Utils = a.Evm.Utils).keccak256.apply(_a$Evm$Utils, arguments), a.Evm.Utils.WORD_SIZE);\n    }\n\n    function c(e) {\n      return s({\n        type: \"string\",\n        value: (0, i.default)(e)\n      });\n    }\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/helpers/extends\");\n  }, function (e, t) {\n    e.exports = require(\"@truffle/codec\");\n  }, function (e, t) {\n    e.exports = require(\"reselect-tree\");\n  }, function (e, t) {\n    e.exports = require(\"redux-saga/effects\");\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/object/entries\");\n  }, function (e, t) {\n    e.exports = require(\"redux\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = n(4);\n    var a = {\n      depth: -1,\n      error: \"\",\n      gas: 0,\n      memory: [],\n      stack: [],\n      storage: {},\n      gasCost: 0,\n      op: \"STOP\",\n      pc: -1\n    };\n    var i = (0, r.createSelectorTree)({\n      index: function index(e) {\n        return e.trace.proc.index;\n      },\n      loaded: (0, r.createLeaf)([\"/steps\"], function (e) {\n        return null !== e;\n      }),\n      finished: function finished(e) {\n        return e.trace.proc.finished;\n      },\n      finishedOrUnloaded: (0, r.createLeaf)([\"/finished\", \"/loaded\"], function (e, t) {\n        return e || !t;\n      }),\n      steps: function steps(e) {\n        return e.trace.transaction.steps;\n      },\n      stepsRemaining: (0, r.createLeaf)([\"./steps\", \"./index\"], function (e, t) {\n        return e.length - t;\n      }),\n      step: (0, r.createLeaf)([\"./steps\", \"./index\"], function (e, t) {\n        return e ? e.length > 0 ? e[t] : a : null;\n      }),\n      next: (0, r.createLeaf)([\"./steps\", \"./index\"], function (e, t) {\n        return t < e.length - 1 ? e[t + 1] : a;\n      }),\n      nextOfSameDepth: (0, r.createLeaf)([\"./steps\", \"./index\"], function (e, t) {\n        var n = e[t].depth;\n        return e.slice(t + 1).find(function (e) {\n          return e.depth === n;\n        });\n      }),\n      application: {\n        submoduleCount: function submoduleCount(e) {\n          return e.trace.application.submoduleCount;\n        }\n      }\n    });\n    t.default = i;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r = f(n(6)),\n        a = f(n(11)),\n        i = f(n(2)),\n        o = f(n(0)),\n        l = n(4),\n        s = f(n(17)),\n        c = f(n(8)),\n        u = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(3)),\n        d = n(1);\n\n    function f(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    (0, o.default)(\"debugger:evm:selectors\");\n    var p = \"00\".repeat(u.Evm.Utils.WORD_SIZE);\n\n    function y(_ref, n, r, a) {\n      var e = _ref.address,\n          t = _ref.binary;\n      var o,\n          l = Boolean(t);\n\n      if (e) {\n        var _n$e = n[e];\n        o = _n$e.context;\n        t = _n$e.binary;\n      } else {\n        if (!l) return null;\n        o = r(t);\n      }\n\n      if (null != o) {\n        var _e2 = a[o];\n        return (0, i.default)({}, _e2, {\n          binary: t\n        });\n      }\n\n      return {\n        binary: t,\n        isConstructor: l\n      };\n    }\n\n    function m(e) {\n      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var n = {\n        trace: (0, l.createLeaf)([e], function (e) {\n          if (!e) return null;\n          var t = e.gasCost,\n              n = e.op,\n              r = e.pc;\n          return {\n            gasCost: t,\n            op: n,\n            pc: r\n          };\n        }),\n        programCounter: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return e ? e.pc : null;\n        }),\n        isCall: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isCallMnemonic)(e.op);\n        }),\n        isShortCall: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isShortCallMnemonic)(e.op);\n        }),\n        isDelegateCallBroad: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isDelegateCallMnemonicBroad)(e.op);\n        }),\n        isDelegateCallStrict: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isDelegateCallMnemonicStrict)(e.op);\n        }),\n        isStaticCall: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isStaticCallMnemonic)(e.op);\n        }),\n        isCreate: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return (0, d.isCreateMnemonic)(e.op);\n        }),\n        isCreate2: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return \"CREATE2\" === e.op;\n        }),\n        isStore: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return \"SSTORE\" === e.op;\n        }),\n        isLoad: (0, l.createLeaf)([\"./trace\"], function (e) {\n          return \"SLOAD\" === e.op;\n        }),\n        touchesStorage: (0, l.createLeaf)([\"./isStore\", \"isLoad\"], function (e, t) {\n          return e || t;\n        })\n      };\n\n      if (t) {\n        (function (e) {\n          return \"string\" == typeof e && (e.startsWith(\"./\") || e.startsWith(\"../\"));\n        })(t) && (t = \"../\" + t), (0, a.default)(n, {\n          isJump: (0, l.createLeaf)([\"./trace\", t], function (e, _ref2) {\n            var t = _ref2.stack;\n            return \"JUMP\" === e.op || \"JUMPI\" === e.op && t[t.length - 2] !== p;\n          }),\n          valueStored: (0, l.createLeaf)([\"./isStore\", t], function (e, _ref3) {\n            var t = _ref3.stack;\n            return e ? t[t.length - 2] : null;\n          }),\n          callAddress: (0, l.createLeaf)([\"./isCall\", t], function (e, _ref4) {\n            var t = _ref4.stack;\n            if (!e) return null;\n            var n = t[t.length - 2];\n            return u.Evm.Utils.toAddress(n);\n          }),\n          createBinary: (0, l.createLeaf)([\"./isCreate\", t], function (e, _ref5) {\n            var t = _ref5.stack,\n                n = _ref5.memory;\n            if (!e) return null;\n            var r = 2 * parseInt(t[t.length - 2], 16),\n                a = 2 * parseInt(t[t.length - 3], 16);\n            return \"0x\" + n.join(\"\").substring(r, r + a).padEnd(a, \"00\");\n          }),\n          callData: (0, l.createLeaf)([\"./isCall\", \"./isShortCall\", t], function (e, t, _ref6) {\n            var n = _ref6.stack,\n                r = _ref6.memory;\n            if (!e) return null;\n            var a = t ? 1 : 0;\n            var i = 2 * parseInt(n[n.length - 4 + a], 16),\n                o = 2 * parseInt(n[n.length - 5 + a], 16);\n            return \"0x\" + r.join(\"\").substring(i, i + o).padEnd(o, \"00\");\n          }),\n          callValue: (0, l.createLeaf)([\"./isCall\", \"./isDelegateCallStrict\", \"./isStaticCall\", t], function (e, t, n, _ref7) {\n            var r = _ref7.stack;\n            if (!e || t) return null;\n            if (n) return new s.default(0);\n            var a = r[r.length - 3];\n            return u.Conversion.toBN(a);\n          }),\n          createValue: (0, l.createLeaf)([\"./isCreate\", t], function (e, _ref8) {\n            var t = _ref8.stack;\n            if (!e) return null;\n            var n = t[t.length - 1];\n            return u.Conversion.toBN(n);\n          }),\n          storageAffected: (0, l.createLeaf)([\"./touchesStorage\", t], function (e, _ref9) {\n            var t = _ref9.stack;\n            return e ? t[t.length - 1] : null;\n          }),\n          callContext: (0, l.createLeaf)([\"./callAddress\", \"./createBinary\", \"/current/codex/instances\", \"/info/binaries/search\", \"/info/contexts\"], function (e, t, n, r, a) {\n            return y({\n              address: e,\n              binary: t\n            }, n, r, a);\n          })\n        });\n      }\n\n      return n;\n    }\n\n    var g = (0, l.createSelectorTree)({\n      state: function state(e) {\n        return e.evm;\n      },\n      info: {\n        contexts: (0, l.createLeaf)([\"/state\"], function (e) {\n          return e.info.contexts.byContext;\n        }),\n        binaries: {\n          search: (0, l.createLeaf)([\"/info/contexts\"], function (e) {\n            return function (t) {\n              return u.Contexts.Utils.findDebuggerContext(e, t);\n            };\n          })\n        }\n      },\n      transaction: {\n        globals: {\n          tx: (0, l.createLeaf)([\"/state\"], function (e) {\n            return e.transaction.globals.tx;\n          }),\n          block: (0, l.createLeaf)([\"/state\"], function (e) {\n            return e.transaction.globals.block;\n          })\n        },\n        status: (0, l.createLeaf)([\"/state\"], function (e) {\n          return e.transaction.status;\n        }),\n        initialCall: (0, l.createLeaf)([\"/state\"], function (e) {\n          return e.transaction.initialCall;\n        }),\n        startingContext: (0, l.createLeaf)([\"/current/callstack\", \"/current/codex/instances\", \"/info/binaries/search\", \"/info/contexts\"], function (e, t, n, r) {\n          return e.length > 0 ? y(e[0], t, n, r) : null;\n        })\n      },\n      current: {\n        callstack: function callstack(e) {\n          return e.evm.proc.callstack;\n        },\n        call: (0, l.createLeaf)([\"./callstack\"], function (e) {\n          return e.length ? e[e.length - 1] : {};\n        }),\n        context: (0, l.createLeaf)([\"./call\", \"./codex/instances\", \"/info/binaries/search\", \"/info/contexts\"], y),\n        state: (0, a.default).apply(void 0, [{}].concat(_toConsumableArray([\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(function (e) {\n          return _defineProperty({}, e, (0, l.createLeaf)([c.default.step], function (t) {\n            return t[e];\n          }));\n        })))),\n        step: (0, i.default)({}, m(c.default.step, \"./state\"), {\n          createdAddress: (0, l.createLeaf)([\"./isCreate\", \"/nextOfSameDepth/state/stack\", \"./isCreate2\", \"./create2Address\"], function (e, t, n, r) {\n            if (!e) return null;\n            var a = u.Evm.Utils.toAddress(t[t.length - 1]);\n            return a === u.Evm.Utils.ZERO_ADDRESS && n ? r : a;\n          }),\n          create2Address: (0, l.createLeaf)([\"./isCreate2\", \"./createBinary\", \"../call\", \"../state/stack\"], function (e, t, _ref11, r) {\n            var n = _ref11.storageAddress;\n            return e ? u.Evm.Utils.toAddress(\"0x\" + (0, d.keccak256)({\n              type: \"bytes\",\n              value: \"0xff\" + n.slice(2) + r[r.length - 4] + (0, d.keccak256)({\n                type: \"bytes\",\n                value: t\n              }).slice(2)\n            }).slice(2 + 2 * (u.Evm.Utils.WORD_SIZE - u.Evm.Utils.ADDRESS_SIZE))) : null;\n          }),\n          isInstantCallOrCreate: (0, l.createLeaf)([\"./isCall\", \"./isCreate\", \"./isContextChange\"], function (e, t, n) {\n            return (e || t) && !n;\n          }),\n          isContextChange: (0, l.createLeaf)([\"/current/state/depth\", \"/next/state/depth\"], function (e, t) {\n            return e !== t;\n          }),\n          isNormalHalting: (0, l.createLeaf)([\"./isHalting\", \"./returnStatus\"], function (e, t) {\n            return e && t;\n          }),\n          isHalting: (0, l.createLeaf)([\"/current/state/depth\", \"/next/state/depth\", c.default.stepsRemaining], function (e, t, n) {\n            return t < e || 0 === n;\n          }),\n          isExceptionalHalting: (0, l.createLeaf)([\"./isHalting\", \"./returnStatus\"], function (e, t) {\n            return e && !t;\n          }),\n          returnStatus: (0, l.createLeaf)([\"./isHalting\", \"/next/state\", c.default.stepsRemaining, \"/transaction/status\"], function (e, _ref12, n, r) {\n            var t = _ref12.stack;\n            return e ? n <= 1 ? r : t[t.length - 1] !== p : null;\n          }),\n          returnValue: (0, l.createLeaf)([\"./trace\", \"./isExceptionalHalting\", \"../state\"], function (e, t, _ref13) {\n            var n = _ref13.stack,\n                r = _ref13.memory;\n            if (\"RETURN\" !== e.op && \"REVERT\" !== e.op) return \"0x\";\n            if (t && \"REVERT\" !== e.op) return \"0x\";\n            var a = 2 * parseInt(n[n.length - 1], 16),\n                i = 2 * parseInt(n[n.length - 2], 16);\n            return \"0x\" + r.join(\"\").substring(a, a + i).padEnd(i, \"00\");\n          }),\n          valueLoaded: (0, l.createLeaf)([\"./isLoad\", \"/next/state\"], function (e, _ref14) {\n            var t = _ref14.stack;\n            return e ? t[t.length - 1] : null;\n          })\n        }),\n        codex: {\n          _: (0, l.createLeaf)([\"/state\"], function (e) {\n            return e.proc.codex;\n          }),\n          storage: (0, l.createLeaf)([\"./_\", \"../state/storage\", \"../call\"], function (e, t, _ref15) {\n            var n = _ref15.storageAddress;\n            return n === u.Evm.Utils.ZERO_ADDRESS ? t : e[e.length - 1].accounts[n].storage;\n          }),\n          instances: (0, l.createLeaf)([\"./_\"], function (e) {\n            return (0, a.default).apply(void 0, [{}].concat(_toConsumableArray((0, r.default)(e[e.length - 1].accounts).map(function (_ref16) {\n              var _ref17 = _slicedToArray(_ref16, 2),\n                  e = _ref17[0],\n                  _ref17$ = _ref17[1],\n                  t = _ref17$.code,\n                  n = _ref17$.context;\n\n              return _defineProperty({}, e, {\n                address: e,\n                binary: t,\n                context: n\n              });\n            }))));\n          })\n        }\n      },\n      next: {\n        state: (0, a.default).apply(void 0, [{}].concat(_toConsumableArray([\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(function (e) {\n          return _defineProperty({}, e, (0, l.createLeaf)([c.default.next], function (t) {\n            return t[e];\n          }));\n        })))),\n        step: m(c.default.next, \"./state\")\n      },\n      nextOfSameDepth: {\n        state: (0, a.default).apply(void 0, [{}].concat(_toConsumableArray([\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(function (e) {\n          return _defineProperty({}, e, (0, l.createLeaf)([c.default.nextOfSameDepth], function (t) {\n            return t[e];\n          }));\n        }))))\n      }\n    });\n    t.default = g;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = f(n(6)),\n        a = f(n(11)),\n        i = f(n(2)),\n        o = f(n(0)),\n        l = n(4),\n        s = f(n(50)),\n        c = f(n(28)),\n        u = f(n(9)),\n        d = f(n(8));\n\n    function f(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var p = (0, o.default)(\"debugger:solidity:selectors\");\n\n    function y(e) {\n      return p(\"context: %O\", e), void 0 !== e.compiler && c.default.satisfies(e.compiler.version, \">=0.5.1\", {\n        includePrerelease: !0\n      }) && !e.isConstructor;\n    }\n\n    function m(e) {\n      return {\n        instruction: (0, l.createLeaf)([\"/current/instructionAtProgramCounter\", e.programCounter], function (e, t) {\n          return e[t] || {};\n        }),\n        modifierDepth: (0, l.createLeaf)([\"./instruction\"], function (e) {\n          return e.modifierDepth;\n        }),\n        source: (0, l.createLeaf)([\"/current/sources\", \"./instruction\"], function (e, _ref21) {\n          var t = _ref21.file;\n          return e && e[t] || {};\n        }),\n        findOverlappingRange: (0, l.createLeaf)([\"./source\", \"/views/findOverlappingRange\"], function (_ref22, n) {\n          var e = _ref22.compilationId,\n              t = _ref22.id;\n          return (n[e] || {})[t];\n        }),\n        sourceRange: (0, l.createLeaf)([\"./instruction\"], s.default.getSourceRange),\n        pointerAndNode: (0, l.createLeaf)([\"./findOverlappingRange\", \"./sourceRange\"], function (e, t) {\n          return e ? s.default.findRange(e, t.start, t.length) : null;\n        }),\n        pointer: (0, l.createLeaf)([\"./pointerAndNode\"], function (e) {\n          return e ? e.pointer : null;\n        }),\n        node: (0, l.createLeaf)([\"./source\", \"./pointerAndNode\"], function (_ref23, t) {\n          var e = _ref23.ast;\n          return t ? t.node : e;\n        })\n      };\n    }\n\n    var g = (0, l.createSelectorTree)({\n      state: function state(e) {\n        return e.solidity;\n      },\n      info: {\n        sources: (0, l.createLeaf)([\"/state\"], function (e) {\n          return e.info.sources.byCompilationId;\n        })\n      },\n      transaction: {\n        bottomStackframeRequiresPhantomFrame: (0, l.createLeaf)([u.default.transaction.startingContext], y)\n      },\n      current: (0, i.default)({\n        sources: (0, l.createLeaf)([\"/info/sources\", u.default.current.context], function (e, t) {\n          return t ? void 0 !== t.compilationId ? (e[t.compilationId] || {\n            byId: null\n          }).byId : [] : null;\n        }),\n        sourceMap: (0, l.createLeaf)([u.default.current.context], function (e) {\n          return e ? e.sourceMap : null;\n        }),\n        humanReadableSourceMap: (0, l.createLeaf)([\"./sourceMap\"], function (e) {\n          return e ? s.default.getHumanReadableSourceMap(e) : null;\n        }),\n        functionDepthStack: function functionDepthStack(e) {\n          return e.solidity.proc.functionDepthStack;\n        },\n        nextFrameIsPhantom: function nextFrameIsPhantom(e) {\n          return e.solidity.proc.nextFrameIsPhantom;\n        },\n        functionDepth: (0, l.createLeaf)([\"./functionDepthStack\"], function (e) {\n          return e[e.length - 1];\n        }),\n        callRequiresPhantomFrame: (0, l.createLeaf)([u.default.current.context], y),\n        instructions: (0, l.createLeaf)([\"./sources\", u.default.current.context, \"./humanReadableSourceMap\"], function (e, t, n) {\n          return t ? s.default.getProcessedInstructionsForBinary((e || []).map(function (_ref24) {\n            var e = _ref24.source;\n            return e;\n          }), t.binary, n) : [];\n        }),\n        instructionAtProgramCounter: (0, l.createLeaf)([\"./instructions\"], function (e) {\n          return (0, a.default).apply(void 0, [{}].concat(_toConsumableArray(e.map(function (e) {\n            return _defineProperty({}, e.pc, e);\n          }))));\n        })\n      }, m(u.default.current.step), {\n        isSourceRangeFinal: (0, l.createLeaf)([\"./instructionAtProgramCounter\", u.default.current.step.programCounter, u.default.next.step.programCounter], function (e, t, n) {\n          return !e[n] || (t = e[t], n = e[n], t.start != n.start || t.length != n.length || t.file != n.file);\n        }),\n        functionsByProgramCounter: (0, l.createLeaf)([\"./instructions\", \"./sources\", \"/views/findOverlappingRange\", u.default.current.context], function (e, t, n, _ref26) {\n          var r = _ref26.compilationId;\n          return s.default.getFunctionsByProgramCounter(e, t.map(function (_ref27) {\n            var e = _ref27.ast;\n            return e;\n          }), n[r], r);\n        }),\n        isMultiline: (0, l.createLeaf)([\"./sourceRange\"], function (_ref28) {\n          var e = _ref28.lines;\n          return e.start.line != e.end.line;\n        }),\n        willJump: (0, l.createLeaf)([u.default.current.step.isJump], function (e) {\n          return e;\n        }),\n        jumpDirection: (0, l.createLeaf)([\"./instruction\"], function () {\n          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return e.jump || \"-\";\n        }),\n        willCall: (0, l.createLeaf)([u.default.current.step.isCall, u.default.current.step.isCreate, u.default.current.step.isInstantCallOrCreate], function (e, t, n) {\n          return (e || t) && !n;\n        }),\n        willReturn: (0, l.createLeaf)([u.default.current.step.isHalting], function (e) {\n          return e;\n        }),\n        nextMapped: (0, l.createLeaf)([\"./instructionAtProgramCounter\", d.default.steps, d.default.index], function (e, t, n) {\n          return t.slice(n + 1).find(function (_ref29) {\n            var t = _ref29.pc;\n            return e[t] && -1 !== e[t].file;\n          });\n        })\n      }),\n      next: m(u.default.next.step),\n      views: {\n        findOverlappingRange: (0, l.createLeaf)([\"/info/sources\"], function (e) {\n          return (0, a.default).apply(void 0, [{}].concat(_toConsumableArray((0, r.default)(e).map(function (_ref30) {\n            var _ref31 = _slicedToArray(_ref30, 2),\n                e = _ref31[0],\n                t = _ref31[1].byId;\n\n            return _defineProperty({}, e, t.map(function (_ref32) {\n              var e = _ref32.ast;\n              return s.default.makeOverlapFunction(e);\n            }));\n          }))));\n        })\n      }\n    });\n    t.default = g;\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/object/assign\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.saveSteps = function (e) {\n      return {\n        type: r,\n        steps: e\n      };\n    }, t.next = function () {\n      return {\n        type: a\n      };\n    }, t.tick = function () {\n      return {\n        type: i\n      };\n    }, t.tock = function () {\n      return {\n        type: o\n      };\n    }, t.endTrace = function () {\n      return {\n        type: l\n      };\n    }, t.reset = function () {\n      return {\n        type: s\n      };\n    }, t.unloadTransaction = function () {\n      return {\n        type: c\n      };\n    }, t.backtick = function () {\n      return {\n        type: u\n      };\n    }, t.setSubmoduleCount = function (e) {\n      return {\n        type: d,\n        count: e\n      };\n    };\n    var r = t.SAVE_STEPS = \"TRACE_SAVE_STEPS\";\n    var a = t.NEXT = \"TRACE_NEXT\";\n    var i = t.TICK = \"TRACE_TICK\";\n    var o = t.TOCK = \"TRACE_TOCK\";\n    var l = t.END_OF_TRACE = \"TRACE_EOT\";\n    var s = t.RESET = \"TRACE_RESET\";\n    var c = t.UNLOAD_TRANSACTION = \"TRACE_UNLOAD_TRANSACTION\";\n    var u = t.BACKTICK = \"TRACE_BACKTICK\";\n    var d = t.SET_SUBMODULE_COUNT = \"TRACE_SET_SUBMODULE_COUNT\";\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked = /*#__PURE__*/_regeneratorRuntime.mark(p),\n        _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(y);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = d(n(30));\n    t.setSubmoduleCount = /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, i.put)(s.setSubmoduleCount(e));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }), t.addSubmoduleToCount = /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var e;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, i.select)(c.default.application.submoduleCount);\n\n            case 2:\n              e = _context2.sent;\n              _context2.next = 5;\n              return (0, i.put)(s.setSubmoduleCount(e + 1));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }), t.advance = /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (0, i.put)(s.next());\n\n            case 2:\n              f(\"TOCK to take\");\n              _context3.next = 5;\n              return (0, i.take)([s.TOCK, s.END_OF_TRACE]);\n\n            case 5:\n              f(\"TOCK taken\");\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }), t.signalTickSagaCompletion = /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return (0, i.put)(s.backtick());\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }), t.processTrace = /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(e) {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return (0, i.put)(s.saveSteps(e));\n\n            case 2:\n              return _context5.abrupt(\"return\", _toConsumableArray(new r.default(e.map(function (_ref34) {\n                var e = _ref34.op,\n                    t = _ref34.stack;\n                return (0, o.isCallMnemonic)(e) ? l.Evm.Utils.toAddress(t[t.length - 2]) : void 0;\n              }).filter(function (e) {\n                return void 0 !== e && e !== l.Evm.Utils.ZERO_ADDRESS;\n              }))));\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }), t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return (0, i.put)(s.reset());\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }), t.unload = /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return (0, i.put)(s.unloadTransaction());\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }), t.saga = y;\n    var a = d(n(0)),\n        i = n(5),\n        o = n(1),\n        l = u(n(3)),\n        s = u(n(12)),\n        c = d(n(8));\n\n    function u(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function d(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var f = (0, a.default)(\"debugger:trace:sagas\");\n\n    function p() {\n      var e, t, n;\n      return _regeneratorRuntime.wrap(function p$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return (0, i.select)(c.default.stepsRemaining);\n\n            case 2:\n              e = _context8.sent;\n              f(\"remaining: %o\", e);\n              _context8.next = 6;\n              return (0, i.select)(c.default.steps);\n\n            case 6:\n              t = _context8.sent;\n              f(\"total steps: %o\", t.length);\n              n = 0;\n\n              if (!(e > 0)) {\n                _context8.next = 25;\n                break;\n              }\n\n              f(\"putting TICK\");\n              _context8.next = 13;\n              return (0, i.select)(c.default.application.submoduleCount);\n\n            case 13:\n              n = _context8.sent;\n              _context8.next = 16;\n              return (0, i.put)(s.tick());\n\n            case 16:\n              f(\"put TICK\");\n\n            case 17:\n              if (!(n > 0)) {\n                _context8.next = 24;\n                break;\n              }\n\n              _context8.next = 20;\n              return (0, i.take)(s.BACKTICK);\n\n            case 20:\n              f(\"got BACKTICK\");\n              n--;\n\n            case 22:\n              _context8.next = 17;\n              break;\n\n            case 24:\n              e--;\n\n            case 25:\n              if (!e) {\n                _context8.next = 32;\n                break;\n              }\n\n              f(\"putting TOCK\");\n              _context8.next = 29;\n              return (0, i.put)(s.tock());\n\n            case 29:\n              f(\"put TOCK\");\n              _context8.next = 36;\n              break;\n\n            case 32:\n              f(\"putting END_OF_TRACE\");\n              _context8.next = 35;\n              return (0, i.put)(s.endTrace());\n\n            case 35:\n              f(\"put END_OF_TRACE\");\n\n            case 36:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _marked);\n    }\n\n    function y() {\n      return _regeneratorRuntime.wrap(function y$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return (0, i.takeEvery)(s.NEXT, p);\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _marked2);\n    }\n\n    t.default = (0, o.prefixName)(\"trace\", y);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.start = function (e, t) {\n      return {\n        type: r,\n        provider: e,\n        txHash: t\n      };\n    }, t.loadTransaction = function (e) {\n      return {\n        type: a,\n        txHash: e\n      };\n    }, t.interrupt = function () {\n      return {\n        type: i\n      };\n    }, t.unloadTransaction = function () {\n      return {\n        type: o\n      };\n    }, t.ready = function () {\n      return {\n        type: l\n      };\n    }, t.wait = function () {\n      return {\n        type: s\n      };\n    }, t.error = function (e) {\n      return {\n        type: c,\n        error: e\n      };\n    }, t.recordContracts = function (e, t) {\n      return {\n        type: u,\n        contexts: e,\n        sources: t\n      };\n    }, t.saveTransaction = function (e) {\n      return {\n        type: d,\n        transaction: e\n      };\n    }, t.saveReceipt = function (e) {\n      return {\n        type: f,\n        receipt: e\n      };\n    }, t.saveBlock = function (e) {\n      return {\n        type: p,\n        block: e\n      };\n    }, t.setLightMode = function () {\n      return {\n        type: y\n      };\n    }, t.setFullMode = function () {\n      return {\n        type: m\n      };\n    }, t.startFullMode = function () {\n      return {\n        type: g\n      };\n    }, t.addCompilations = function (e, t) {\n      return {\n        type: b,\n        sources: e,\n        contexts: t\n      };\n    };\n    var r = t.START = \"SESSION_START\";\n    var a = t.LOAD_TRANSACTION = \"SESSION_LOAD_TRANSACTION\";\n    var i = t.INTERRUPT = \"SESSION_INTERRUPT\";\n    var o = t.UNLOAD_TRANSACTION = \"SESSION_UNLOAD_TRANSACTION\";\n    var l = t.READY = \"SESSION_READY\";\n    var s = t.WAIT = \"SESSION_WAIT\";\n    var c = t.ERROR = \"SESSION_ERROR\";\n    var u = t.RECORD_CONTRACTS = \"SESSION_RECORD_CONTRACTS\";\n    var d = t.SAVE_TRANSACTION = \"SESSION_SAVE_TRANSACTION\";\n    var f = t.SAVE_RECEIPT = \"SESSION_SAVE_RECEIPT\";\n    var p = t.SAVE_BLOCK = \"SESSION_SAVE_BLOCK\";\n    var y = t.SET_LIGHT_MODE = \"SESSION_SET_LIGHT_MODE\";\n    var m = t.SET_FULL_MODE = \"SESSION_SET_FULL_MODE\";\n    var g = t.START_FULL_MODE = \"SESSION_START_FULL_MODE\";\n    var b = t.ADD_COMPILATIONS = \"SESSION_ADD_COMPILATIONS\";\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/object/values\");\n  }, function (e, t) {\n    e.exports = require(\"json-pointer\");\n  }, function (e, t) {\n    e.exports = require(\"bn.js\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(E),\n        _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(_),\n        _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(v),\n        _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(I);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = A(n(2));\n    t.scope = /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(e, t, n, r, a) {\n      return _regeneratorRuntime.wrap(function _callee8$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return (0, i.put)(s.scope(e, t, n, r, a));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee8);\n    }), t.declare = /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(e, t) {\n      return _regeneratorRuntime.wrap(function _callee9$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return (0, i.put)(s.declare(e.name, e.id, e.scope, t));\n\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee9);\n    }), t.yulScope = /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(e, t, n, r) {\n      return _regeneratorRuntime.wrap(function _callee10$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return (0, i.put)(s.scope(void 0, e, r, t, n));\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee10);\n    }), t.yulDeclare = /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(e, t, n, r, a) {\n      return _regeneratorRuntime.wrap(function _callee11$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return (0, i.put)(s.declare(e.name, (0, o.makePath)(r, t), (0, o.makePath)(r, n), a));\n\n            case 2:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee11);\n    }), t.defineType = /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(e, t) {\n      return _regeneratorRuntime.wrap(function _callee12$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return (0, i.put)(s.defineType(e, t));\n\n            case 2:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee12);\n    }), t.decode = _, t.decodeReturnValue = /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var e, t, n, r, a, o, l, s, _e3, _t;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return (0, i.select)(f.default.views.userDefinedTypes);\n\n            case 2:\n              e = _context15.sent;\n              _context15.next = 5;\n              return (0, i.select)(f.default.next.state);\n\n            case 5:\n              t = _context15.sent;\n              _context15.next = 8;\n              return (0, i.select)(f.default.info.allocations);\n\n            case 8:\n              n = _context15.sent;\n              _context15.next = 11;\n              return (0, i.select)(f.default.views.contexts);\n\n            case 11:\n              r = _context15.sent;\n              _context15.next = 14;\n              return (0, i.select)(f.default.current.returnStatus);\n\n            case 14:\n              a = _context15.sent;\n              _context15.next = 17;\n              return (0, i.select)(f.default.current.returnAllocation);\n\n            case 17:\n              o = _context15.sent;\n              l = m.decodeReturndata({\n                userDefinedTypes: e,\n                state: t,\n                allocations: n,\n                contexts: r\n              }, o, a);\n              T(\"beginning decoding\");\n              s = l.next();\n\n            case 21:\n              if (s.done) {\n                _context15.next = 34;\n                break;\n              }\n\n              T(\"request received\");\n              _e3 = void 0, _t = s.value;\n              _context15.t0 = _t.type;\n              _context15.next = _context15.t0 === \"code\" ? 27 : 30;\n              break;\n\n            case 27:\n              return _context15.delegateYield(v(_t.address), \"t1\", 28);\n\n            case 28:\n              _e3 = _context15.t1;\n              return _context15.abrupt(\"break\", 31);\n\n            case 30:\n              T(\"unrecognized request type!\");\n\n            case 31:\n              T(\"sending response\"), s = l.next(_e3);\n\n            case 32:\n              _context15.next = 21;\n              break;\n\n            case 34:\n              return _context15.abrupt(\"return\", (T(\"done decoding\"), s.value));\n\n            case 35:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee13);\n    }), t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      return _regeneratorRuntime.wrap(function _callee14$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return (0, i.put)(s.reset());\n\n            case 2:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee14);\n    }), t.recordAllocations = /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var e, t, n, r, a, o, l, c;\n      return _regeneratorRuntime.wrap(function _callee15$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return (0, i.select)(f.default.views.contractAllocationInfo);\n\n            case 2:\n              e = _context17.sent;\n              T(\"contracts %O\", e);\n              _context17.next = 6;\n              return (0, i.select)(f.default.views.referenceDeclarations);\n\n            case 6:\n              t = _context17.sent;\n              _context17.next = 9;\n              return (0, i.select)(f.default.views.userDefinedTypes);\n\n            case 9:\n              n = _context17.sent;\n              T(\"referenceDeclarations %O\", t);\n              r = m.Storage.Allocate.getStorageAllocations(n);\n              T(\"storageAllocations %O\", r);\n              a = m.Memory.Allocate.getMemoryAllocations(n), o = m.AbiData.Allocate.getAbiAllocations(n), l = m.AbiData.Allocate.getCalldataAllocations(e, t, n, o), c = m.Storage.Allocate.getStateAllocations(e, t, n, r);\n              _context17.next = 16;\n              return (0, i.put)(s.allocate(r, a, o, l, c));\n\n            case 16:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee15);\n    }), t.saga = I;\n    var a = A(n(0)),\n        i = n(5),\n        o = n(1),\n        l = n(12),\n        s = b(n(29)),\n        c = b(n(13)),\n        u = b(n(24)),\n        d = b(n(32)),\n        f = A(n(21)),\n        p = A(n(55)),\n        y = A(n(16)),\n        m = b(n(3)),\n        g = A(n(17));\n\n    function b(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function A(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var T = (0, a.default)(\"debugger:data:sagas\");\n\n    function E() {\n      return _regeneratorRuntime.wrap(function E$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              return _context21.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n                var e, t, n, a, l, c, u, d, b, A, E, v, I, O, L, h, N, D, x, k, M, P, w, U, B, j, _e4, _t2, _n, _r, _a, _p, V, F, K, H, _e5, _iterator, _step, _n2, _t3, Y, _iterator2, _step2, _e6, _t4, q, _e7, _t5, _i, X, G, W, $, J, _e8, _t6, Z, z, _e10, Q, ee, te, ne;\n\n                return _regeneratorRuntime.wrap(function _callee18$(_context20) {\n                  while (1) {\n                    switch (_context20.prev = _context20.next) {\n                      case 0:\n                        _context20.next = 2;\n                        return (0, i.select)(f.default.views.atLastInstructionForSourceRange);\n\n                      case 2:\n                        if (_context20.sent) {\n                          _context20.next = 4;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"return\");\n\n                      case 4:\n                        _context20.next = 6;\n                        return (0, i.select)(f.default.current.node);\n\n                      case 6:\n                        t = _context20.sent;\n\n                        if (t) {\n                          _context20.next = 9;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"return\");\n\n                      case 9:\n                        _context20.t0 = t.nodeType;\n                        _context20.next = _context20.t0 === \"IndexAccess\" ? 12 : _context20.t0 === \"MemberAccess\" ? 12 : _context20.t0 === \"YulFunctionCall\" ? 16 : 20;\n                        break;\n\n                      case 12:\n                        _context20.next = 14;\n                        return (0, i.select)(f.default.nextMapped.state.stack);\n\n                      case 14:\n                        e = _context20.sent;\n                        return _context20.abrupt(\"break\", 23);\n\n                      case 16:\n                        _context20.next = 18;\n                        return (0, i.select)(f.default.nextOfSameDepth.state.stack);\n\n                      case 18:\n                        e = _context20.sent;\n                        return _context20.abrupt(\"break\", 23);\n\n                      case 20:\n                        _context20.next = 22;\n                        return (0, i.select)(f.default.next.state.stack);\n\n                      case 22:\n                        e = _context20.sent;\n\n                      case 23:\n                        if (e) {\n                          _context20.next = 25;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"return\");\n\n                      case 25:\n                        A = e.length - 1;\n                        _context20.next = 28;\n                        return (0, i.select)(f.default.current.pointer);\n\n                      case 28:\n                        E = _context20.sent;\n                        _context20.next = 31;\n                        return (0, i.select)(f.default.next.pointer);\n\n                      case 31:\n                        v = _context20.sent;\n                        _context20.next = 34;\n                        return (0, i.select)(f.default.current.scopes.inlined);\n\n                      case 34:\n                        I = _context20.sent;\n                        _context20.next = 37;\n                        return (0, i.select)(f.default.current.allocations.state);\n\n                      case 37:\n                        O = _context20.sent;\n                        _context20.next = 40;\n                        return (0, i.select)(f.default.info.allocations.storage);\n\n                      case 40:\n                        L = _context20.sent;\n                        _context20.next = 43;\n                        return (0, i.select)(f.default.views.userDefinedTypes);\n\n                      case 43:\n                        h = _context20.sent;\n                        _context20.next = 46;\n                        return (0, i.select)(f.default.proc.assignments);\n\n                      case 46:\n                        N = _context20.sent;\n                        _context20.next = 49;\n                        return (0, i.select)(f.default.proc.mappedPaths);\n\n                      case 49:\n                        D = _context20.sent;\n                        _context20.next = 52;\n                        return (0, i.select)(f.default.current.functionDepth);\n\n                      case 52:\n                        x = _context20.sent;\n                        _context20.next = 55;\n                        return (0, i.select)(f.default.current.modifierDepth);\n\n                      case 55:\n                        k = _context20.sent;\n                        _context20.next = 58;\n                        return (0, i.select)(f.default.current.inModifier);\n\n                      case 58:\n                        M = _context20.sent;\n                        _context20.next = 61;\n                        return (0, i.select)(f.default.current.inFunctionOrModifier);\n\n                      case 61:\n                        P = _context20.sent;\n                        _context20.next = 64;\n                        return (0, i.select)(f.default.current.address);\n\n                      case 64:\n                        w = _context20.sent;\n                        _context20.next = 67;\n                        return (0, i.select)(f.default.current.compilationId);\n\n                      case 67:\n                        U = _context20.sent;\n                        _context20.next = 70;\n                        return (0, i.select)(f.default.current.sourceId);\n\n                      case 70:\n                        B = _context20.sent;\n                        _context20.next = 73;\n                        return (0, i.select)(f.default.current.compiler);\n\n                      case 73:\n                        j = _context20.sent;\n                        _context20.next = 76;\n                        return (0, i.select)(f.default.current.aboutToModify);\n\n                      case 76:\n                        if (!_context20.sent) {\n                          _context20.next = 88;\n                          break;\n                        }\n\n                        _context20.next = 79;\n                        return (0, i.select)(f.default.current.modifierBeingInvoked);\n\n                      case 79:\n                        _e4 = _context20.sent;\n                        _context20.next = 82;\n                        return (0, i.select)(f.default.current.modifierArgumentIndex);\n\n                      case 82:\n                        _t2 = _context20.sent;\n                        T(\"currentIndex %d\", _t2);\n                        _n = _e4.parameters.parameters, _r = _n.slice(_t2 + 1), _a = (0, p.default)(_r.map(m.Ast.Utils.stackSize));\n                        T(\"adjustment %d\", _a), l = S(U, _n, A + _a, x, k, \"ModifierDefinition\" === _e4.nodeType);\n                        _context20.next = 89;\n                        break;\n\n                      case 88:\n                        l = {};\n\n                      case 89:\n                        _context20.t1 = t.nodeType;\n                        _context20.next = _context20.t1 === \"FunctionDefinition\" ? 92 : _context20.t1 === \"ModifierDefinition\" ? 92 : _context20.t1 === \"YulFunctionDefinition\" ? 104 : _context20.t1 === \"ContractDefinition\" ? 138 : _context20.t1 === \"FunctionTypeName\" ? 145 : _context20.t1 === \"VariableDeclaration\" ? 147 : _context20.t1 === \"YulFunctionCall\" ? 157 : _context20.t1 === \"YulLiteral\" ? 159 : _context20.t1 === \"YulIdentifier\" ? 159 : _context20.t1 === \"YulVariableDeclaration\" ? 167 : _context20.t1 === \"IndexAccess\" ? 173 : _context20.t1 === \"MemberAccess\" ? 204 : 216;\n                        break;\n\n                      case 92:\n                        _context20.next = 94;\n                        return (0, i.select)(f.default.next.modifierBeingInvoked);\n\n                      case 94:\n                        _p = _context20.sent;\n\n                        if (!(_p && _p.id === t.id)) {\n                          _context20.next = 97;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 97:\n                        V = t.parameters.parameters;\n                        a = S(U, V, A, x, k, M);\n                        T(\"Function definition case\");\n                        T(\"assignments %O\", a);\n                        _context20.next = 103;\n                        return (0, i.put)(s.assign(a));\n\n                      case 103:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 104:\n                        if (!(null === v || !v.startsWith(E + \"/body/\"))) {\n                          _context20.next = 106;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 106:\n                        F = (t.returnVariables || []).map(function (e, t, n) {\n                          return \"/returnVariables/\" + (n.length - 1 - t);\n                        }), K = (t.parameters || []).map(function (e, t) {\n                          return \"/parameters/\" + t;\n                        });\n                        H = [];\n                        _context20.next = 110;\n                        return (0, i.select)(f.default.current.bareLetsInYulAreHit);\n\n                      case 110:\n                        if (_context20.sent) {\n                          _context20.next = 131;\n                          break;\n                        }\n\n                        _e5 = 0;\n                        _iterator = _createForOfIteratorHelper(t.body.statements);\n                        _context20.prev = 113;\n\n                        _iterator.s();\n\n                      case 115:\n                        if ((_step = _iterator.n()).done) {\n                          _context20.next = 123;\n                          break;\n                        }\n\n                        _n2 = _step.value;\n\n                        if (!(\"YulVariableDeclaration\" !== _n2.nodeType || null != _n2.value)) {\n                          _context20.next = 119;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 123);\n\n                      case 119:\n                        for (_t3 = 0; _t3 < _n2.variables.length; _t3++) {\n                          H.unshift(\"/body/statements/\".concat(_e5, \"/variables/\").concat(_t3));\n                        }\n\n                        _e5++;\n\n                      case 121:\n                        _context20.next = 115;\n                        break;\n\n                      case 123:\n                        _context20.next = 128;\n                        break;\n\n                      case 125:\n                        _context20.prev = 125;\n                        _context20.t2 = _context20[\"catch\"](113);\n\n                        _iterator.e(_context20.t2);\n\n                      case 128:\n                        _context20.prev = 128;\n\n                        _iterator.f();\n\n                        return _context20.finish(128);\n\n                      case 131:\n                        Y = H.concat(F, K);\n                        T(\"suffixes: %O\", Y), a = {}, b = A;\n                        _iterator2 = _createForOfIteratorHelper(Y);\n\n                        try {\n                          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                            _e6 = _step2.value;\n                            _t4 = (0, o.makePath)(B, E + _e6);\n                            n = (0, o.makeAssignment)(M ? {\n                              compilationId: U,\n                              astRef: _t4,\n                              stackframe: x,\n                              modifierDepth: k\n                            } : {\n                              compilationId: U,\n                              astRef: _t4,\n                              stackframe: x\n                            }, {\n                              location: \"stack\",\n                              from: b,\n                              to: b\n                            }), a[n.id] = n, b--;\n                          }\n                        } catch (err) {\n                          _iterator2.e(err);\n                        } finally {\n                          _iterator2.f();\n                        }\n\n                        _context20.next = 137;\n                        return (0, i.put)(s.assign(a));\n\n                      case 137:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 138:\n                        q = O[t.id];\n                        T(\"Contract definition case\"), T(\"allocations %O\", O), T(\"allocation %O\", q), a = {};\n\n                        for (_e7 in q.members) {\n                          _e7 = Number(_e7);\n                          _t5 = {\n                            compilationId: U,\n                            astRef: _e7,\n                            address: w\n                          }, _i = (0, o.stableKeccak256)(_t5);\n                          n = (0, r.default)({}, _t5, {\n                            id: _i,\n                            ref: (0, r.default)({}, (N.byId[_i] || {}).ref || {}, q.members[_e7].pointer)\n                          }), a[_i] = n;\n                        }\n\n                        T(\"assignments %O\", a);\n                        _context20.next = 144;\n                        return (0, i.put)(s.assign(a));\n\n                      case 144:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 145:\n                        if (!(t = I[I[t.id].parentId].definition, \"VariableDeclaration\" !== t.nodeType)) {\n                          _context20.next = 147;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 147:\n                        X = t.id;\n\n                        if (!(T(\"Variable declaration case\"), T(\"currentDepth %d varId %d\", x, X), !P)) {\n                          _context20.next = 151;\n                          break;\n                        }\n\n                        T(\"already a contract variable!\");\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 151:\n                        n = (0, o.makeAssignment)(M ? {\n                          compilationId: U,\n                          astRef: X,\n                          stackframe: x,\n                          modifierDepth: k\n                        } : {\n                          compilationId: U,\n                          astRef: X,\n                          stackframe: x\n                        }, {\n                          location: \"stack\",\n                          from: A - m.Ast.Utils.stackSize(t) + 1,\n                          to: A\n                        });\n                        a = _defineProperty({}, n.id, n);\n                        T(\"assignments: %O\", a);\n                        _context20.next = 156;\n                        return (0, i.put)(s.assign(a));\n\n                      case 156:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 157:\n                        if (!(null !== v && v.startsWith(E))) {\n                          _context20.next = 159;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 159:\n                        G = E.replace(/\\/[^/]*$/, \"\");\n                        _context20.next = 162;\n                        return (0, i.select)(f.default.current.root);\n\n                      case 162:\n                        W = _context20.sent;\n                        $ = y.default.get(W, G);\n\n                        if (!(E !== G + \"/value\" || \"YulVariableDeclaration\" !== $.nodeType)) {\n                          _context20.next = 166;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 166:\n                        t = $, E = G;\n\n                      case 167:\n                        J = (0, o.makePath)(B, E);\n                        T(\"sourceAndPointer: %s\", J), a = {}, b = A;\n\n                        for (_e8 = t.variables.length - 1; _e8 >= 0; _e8--) {\n                          _t6 = \"\".concat(J, \"/variables/\").concat(_e8);\n                          n = (0, o.makeAssignment)(M ? {\n                            compilationId: U,\n                            astRef: _t6,\n                            stackframe: x,\n                            modifierDepth: k\n                          } : {\n                            compilationId: U,\n                            astRef: _t6,\n                            stackframe: x\n                          }, {\n                            location: \"stack\",\n                            from: b,\n                            to: b\n                          }), a[n.id] = n, b--;\n                        }\n\n                        _context20.next = 172;\n                        return (0, i.put)(s.assign(a));\n\n                      case 172:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 173:\n                        if (!(T(\"Index access case\"), a = (0, r.default)({}, l, R(U, t, e, x, k, M)), c = t.baseExpression, \"bytes\" === m.Ast.Utils.typeClass(c) || \"array\" === m.Ast.Utils.typeClass(c) && (m.Ast.Utils.isReference(t) ? \"storage\" !== m.Ast.Utils.referenceType(c) : !m.Ast.Utils.isMapping(t)))) {\n                          _context20.next = 181;\n                          break;\n                        }\n\n                        T(\"Index case bailed out early\");\n                        T(\"typeClass %s\", m.Ast.Utils.typeClass(c));\n                        T(\"referenceType %s\", m.Ast.Utils.referenceType(c));\n                        T(\"isReference(node) %o\", m.Ast.Utils.isReference(t));\n                        _context20.next = 180;\n                        return (0, i.put)(s.assign(a));\n\n                      case 180:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 181:\n                        Z = m.Ast.Utils.keyDefinition(c, I);\n                        return _context20.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(e, t) {\n                          var n;\n                          return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n                            while (1) {\n                              switch (_context19.prev = _context19.next) {\n                                case 0:\n                                  return _context19.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(e, t) {\n                                    var n, r, a, l, s, c, _i2, _u, _d, _f, _n3, _a3, _e9;\n\n                                    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n                                      while (1) {\n                                        switch (_context18.prev = _context18.next) {\n                                          case 0:\n                                            _context18.next = 2;\n                                            return (0, i.select)(f.default.current.scopes.inlined);\n\n                                          case 2:\n                                            n = _context18.sent;\n                                            _context18.next = 5;\n                                            return (0, i.select)(f.default.current.compilationId);\n\n                                          case 5:\n                                            r = _context18.sent;\n                                            _context18.next = 8;\n                                            return (0, i.select)(f.default.proc.assignments);\n\n                                          case 8:\n                                            a = _context18.sent;\n                                            _context18.next = 11;\n                                            return (0, i.select)(f.default.current.functionDepth);\n\n                                          case 11:\n                                            l = _context18.sent;\n                                            _context18.next = 14;\n                                            return (0, i.select)(f.default.current.modifierDepth);\n\n                                          case 14:\n                                            s = _context18.sent;\n                                            _context18.next = 17;\n                                            return (0, i.select)(f.default.current.inModifier);\n\n                                          case 17:\n                                            c = _context18.sent;\n\n                                          case 18:\n                                            _i2 = e.id, _u = c ? {\n                                              compilationId: r,\n                                              astRef: _i2,\n                                              stackframe: l,\n                                              modifierDepth: s\n                                            } : {\n                                              compilationId: r,\n                                              astRef: _i2,\n                                              stackframe: l\n                                            }, _d = (0, o.stableKeccak256)(_u);\n                                            _f = (a.byId[_d] || {}).ref;\n\n                                            if (!m.Ast.Utils.isSimpleConstant(e)) {\n                                              _context18.next = 24;\n                                              break;\n                                            }\n\n                                            T(\"about to decode simple literal\");\n                                            return _context18.delegateYield(_(t, {\n                                              location: \"definition\",\n                                              definition: e\n                                            }, r), \"t0\", 23);\n\n                                          case 23:\n                                            return _context18.abrupt(\"return\", _context18.t0);\n\n                                          case 24:\n                                            if (!_f) {\n                                              _context18.next = 30;\n                                              break;\n                                            }\n\n                                            _n3 = void 0;\n                                            _n3 = m.Ast.Utils.isReference(e) ? m.Ast.Utils.spliceLocation(t, m.Ast.Utils.referenceType(e)) : t;\n                                            T(\"about to decode\");\n                                            return _context18.delegateYield(_(_n3, _f, r), \"t1\", 29);\n\n                                          case 29:\n                                            return _context18.abrupt(\"return\", _context18.t1);\n\n                                          case 30:\n                                            if (!(e.referencedDeclaration && n[e.referencedDeclaration])) {\n                                              _context18.next = 44;\n                                              break;\n                                            }\n\n                                            T(\"referencedDeclaration %d\", e.referencedDeclaration);\n                                            _a3 = n[e.referencedDeclaration].definition;\n\n                                            if (!(T(\"indexConstantDeclaration %O\", _a3), _a3.constant)) {\n                                              _context18.next = 43;\n                                              break;\n                                            }\n\n                                            _e9 = _a3.value;\n\n                                            if (!m.Ast.Utils.isSimpleConstant(_e9)) {\n                                              _context18.next = 41;\n                                              break;\n                                            }\n\n                                            T(\"about to decode simple constant\");\n                                            return _context18.delegateYield(_(t, {\n                                              location: \"definition\",\n                                              definition: _a3.value\n                                            }, r), \"t3\", 38);\n\n                                          case 38:\n                                            _context18.t2 = _context18.t3;\n                                            _context18.next = 42;\n                                            break;\n\n                                          case 41:\n                                            _context18.t2 = null;\n\n                                          case 42:\n                                            return _context18.abrupt(\"return\", _context18.t2);\n\n                                          case 43:\n                                            return _context18.abrupt(\"return\", null);\n\n                                          case 44:\n                                            if (!(\"typeConversion\" === e.kind)) {\n                                              _context18.next = 48;\n                                              break;\n                                            }\n\n                                            e = e.arguments[0];\n                                            _context18.next = 51;\n                                            break;\n\n                                          case 48:\n                                            if (!(\"UnaryOperation\" !== e.nodeType || \"+\" !== e.operator)) {\n                                              _context18.next = 50;\n                                              break;\n                                            }\n\n                                            return _context18.abrupt(\"return\", null);\n\n                                          case 50:\n                                            e = e.subExpression;\n\n                                          case 51:\n                                            _context18.next = 18;\n                                            break;\n\n                                          case 53:\n                                          case \"end\":\n                                            return _context18.stop();\n                                        }\n                                      }\n                                    }, _callee16);\n                                  })(e, t), \"t0\", 1);\n\n                                case 1:\n                                  n = _context19.t0;\n                                  return _context19.abrupt(\"return\", n ? m.Conversion.cleanBool(n) : n);\n\n                                case 3:\n                                case \"end\":\n                                  return _context19.stop();\n                              }\n                            }\n                          }, _callee17);\n                        })(t.indexExpression, Z), \"t3\", 183);\n\n                      case 183:\n                        z = _context20.t3;\n\n                        if (!(T(\"index value %O\", z), T(\"keyDefinition %o\", Z), null != z && z.value)) {\n                          _context20.next = 200;\n                          break;\n                        }\n\n                        d = C(U, c, D, N, x, k, M);\n                        _e10 = {\n                          path: d\n                        };\n                        _context20.t4 = m.Ast.Utils.typeClass(c);\n                        _context20.next = _context20.t4 === \"array\" ? 190 : _context20.t4 === \"mapping\" ? 192 : 194;\n                        break;\n\n                      case 190:\n                        _e10.hashPath = m.Ast.Utils.isDynamicArray(c), _e10.offset = z.value.asBN.muln(m.Storage.Allocate.storageSize(m.Ast.Import.definitionToType(t, U, j), h, L).words);\n                        return _context20.abrupt(\"break\", 195);\n\n                      case 192:\n                        _e10.key = z, _e10.offset = new g.default(0);\n                        return _context20.abrupt(\"break\", 195);\n\n                      case 194:\n                        T(\"unrecognized index access!\");\n\n                      case 195:\n                        T(\"slot %O\", _e10);\n                        _context20.next = 198;\n                        return (0, i.put)(s.mapPathAndAssign(w, _e10, a, m.Ast.Utils.typeIdentifier(t), m.Ast.Utils.typeIdentifier(c)));\n\n                      case 198:\n                        _context20.next = 203;\n                        break;\n\n                      case 200:\n                        T(\"failed to decode, just assigning\");\n                        _context20.next = 203;\n                        return (0, i.put)(s.assign(a));\n\n                      case 203:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 204:\n                        if (!(a = (0, r.default)({}, l, R(U, t, e, x, k, M)), T(\"Member access case\"), c = t.expression, \"struct\" !== m.Ast.Utils.typeClass(c) || (m.Ast.Utils.isReference(t) ? \"storage\" !== m.Ast.Utils.referenceType(c) : !m.Ast.Utils.isMapping(t)))) {\n                          _context20.next = 209;\n                          break;\n                        }\n\n                        T(\"Member case bailed out early\");\n                        _context20.next = 208;\n                        return (0, i.put)(s.assign(a));\n\n                      case 208:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 209:\n                        d = C(U, c, D, N, x, k, M), u = {\n                          path: d\n                        };\n                        Q = m.Ast.Import.definitionToType(c, U, j), ee = L[Q.id].members, te = I[t.referencedDeclaration].definition.name, ne = ee.find(function (e) {\n                          return e.name === te;\n                        });\n                        u.offset = ne.pointer.range.from.slot.offset.clone();\n                        T(\"slot %o\", u);\n                        _context20.next = 215;\n                        return (0, i.put)(s.mapPathAndAssign(w, u, a, m.Ast.Utils.typeIdentifier(t), m.Ast.Utils.typeIdentifier(c)));\n\n                      case 215:\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 216:\n                        if (!(void 0 === t.id || null == t.typeDescriptions)) {\n                          _context20.next = 218;\n                          break;\n                        }\n\n                        return _context20.abrupt(\"break\", 224);\n\n                      case 218:\n                        T(\"decoding expression value %O\", t.typeDescriptions);\n                        T(\"default case\");\n                        T(\"currentDepth %d node.id %d\", x, t.id);\n                        a = (0, r.default)({}, l, R(U, t, e, x, k, M));\n                        _context20.next = 224;\n                        return (0, i.put)(s.assign(a));\n\n                      case 224:\n                      case \"end\":\n                        return _context20.stop();\n                    }\n                  }\n                }, _callee18, null, [[113, 125, 128, 131]]);\n              })(), \"t0\", 1);\n\n            case 1:\n              return _context21.delegateYield(c.signalTickSagaCompletion(), \"t1\", 2);\n\n            case 2:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _marked3);\n    }\n\n    function _(e, t, n) {\n      var r, a, o, l, s, c, u, d, p, y, _e11, _t7;\n\n      return _regeneratorRuntime.wrap(function _$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return (0, i.select)(f.default.views.userDefinedTypes);\n\n            case 2:\n              r = _context22.sent;\n              _context22.next = 5;\n              return (0, i.select)(f.default.current.state);\n\n            case 5:\n              a = _context22.sent;\n              _context22.next = 8;\n              return (0, i.select)(f.default.views.mappingKeys);\n\n            case 8:\n              o = _context22.sent;\n              _context22.next = 11;\n              return (0, i.select)(f.default.info.allocations);\n\n            case 11:\n              l = _context22.sent;\n              _context22.next = 14;\n              return (0, i.select)(f.default.views.contexts);\n\n            case 14:\n              s = _context22.sent;\n              _context22.next = 17;\n              return (0, i.select)(f.default.current.context);\n\n            case 17:\n              c = _context22.sent;\n              _context22.next = 20;\n              return (0, i.select)(f.default.current.functionsByProgramCounter);\n\n            case 20:\n              u = _context22.sent;\n              d = new Uint8Array(m.Evm.Utils.WORD_SIZE);\n              p = m.decodeVariable(e, t, {\n                userDefinedTypes: r,\n                state: a,\n                mappingKeys: o,\n                allocations: l,\n                contexts: s,\n                currentContext: c,\n                internalFunctionsTable: u\n              }, n);\n              T(\"beginning decoding\");\n              y = p.next();\n\n            case 25:\n              if (y.done) {\n                _context22.next = 40;\n                break;\n              }\n\n              T(\"request received\");\n              _e11 = void 0, _t7 = y.value;\n              _context22.t0 = _t7.type;\n              _context22.next = _context22.t0 === \"storage\" ? 31 : _context22.t0 === \"code\" ? 33 : 36;\n              break;\n\n            case 31:\n              _e11 = d;\n              return _context22.abrupt(\"break\", 37);\n\n            case 33:\n              return _context22.delegateYield(v(_t7.address), \"t1\", 34);\n\n            case 34:\n              _e11 = _context22.t1;\n              return _context22.abrupt(\"break\", 37);\n\n            case 36:\n              T(\"unrecognized request type!\");\n\n            case 37:\n              T(\"sending response\"), y = p.next(_e11);\n\n            case 38:\n              _context22.next = 25;\n              break;\n\n            case 40:\n              return _context22.abrupt(\"return\", (T(\"done decoding\"), T(\"decoded value: %O\", y.value), y.value));\n\n            case 41:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _marked4);\n    }\n\n    function v(e) {\n      var t, n, r, _t8;\n\n      return _regeneratorRuntime.wrap(function v$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              t = new Uint8Array();\n              _context23.next = 3;\n              return (0, i.select)(f.default.views.blockNumber);\n\n            case 3:\n              n = _context23.sent;\n              _context23.next = 6;\n              return (0, i.select)(f.default.views.instances);\n\n            case 6:\n              r = _context23.sent;\n\n              if (!(e in r)) {\n                _context23.next = 9;\n                break;\n              }\n\n              return _context23.abrupt(\"return\", r[e]);\n\n            case 9:\n              if (!(e === m.Evm.Utils.ZERO_ADDRESS)) {\n                _context23.next = 11;\n                break;\n              }\n\n              return _context23.abrupt(\"return\", t);\n\n            case 11:\n              T(\"fetching binary\");\n              return _context23.delegateYield(d.obtainBinaries([e], n), \"t0\", 13);\n\n            case 13:\n              _t8 = _context23.t0[0];\n              T(\"adding instance\");\n              return _context23.delegateYield(u.addInstance(e, _t8), \"t1\", 16);\n\n            case 16:\n              return _context23.abrupt(\"return\", m.Conversion.toBytes(_t8));\n\n            case 17:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _marked5);\n    }\n\n    function R(e, t, n, r, a, i) {\n      var l,\n          s = n.length - 1;\n\n      try {\n        l = m.Stack.Read.readStack({\n          location: \"stack\",\n          from: s - m.Ast.Utils.stackSize(t) + 1,\n          to: s\n        }, {\n          stack: n,\n          storage: {}\n        });\n      } catch (e) {\n        l = void 0;\n      }\n\n      var c = (0, o.makeAssignment)(i ? {\n        compilationId: e,\n        astRef: t.id,\n        stackframe: r,\n        modifierDepth: a\n      } : {\n        compilationId: e,\n        astRef: t.id,\n        stackframe: r\n      }, {\n        location: \"stackliteral\",\n        literal: l\n      });\n      return _defineProperty({}, c.id, c);\n    }\n\n    function S(e, t, n, r) {\n      var a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;\n      var l = t.slice().reverse();\n      T(\"reverseParameters %o\", t);\n      var s = n,\n          c = {};\n\n      var _iterator3 = _createForOfIteratorHelper(l),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _t9 = _step3.value;\n\n          var _n4 = m.Ast.Utils.stackSize(_t9),\n              _l = {\n            location: \"stack\",\n            from: s - _n4 + 1,\n            to: s\n          },\n              _u2 = (0, o.makeAssignment)(i ? {\n            compilationId: e,\n            astRef: _t9.id,\n            stackframe: r,\n            modifierDepth: a\n          } : {\n            compilationId: e,\n            astRef: _t9.id,\n            stackframe: r\n          }, _l);\n\n          c[_u2.id] = _u2, s -= _n4;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return c;\n    }\n\n    function C(e, t, n, r, a, i, l) {\n      var s = (0, o.stableKeccak256)(l ? {\n        compilationId: e,\n        astRef: t.id,\n        stackframe: a,\n        modifierDepth: i\n      } : {\n        compilationId: e,\n        astRef: t.id,\n        stackframe: a\n      });\n      return T(\"astId: %d\", t.id), T(\"stackframe: %d\", a), T(\"fullId: %s\", s), T(\"currentAssignments: %O\", r), {\n        offset: m.Conversion.toBN(r.byId[s].ref.literal)\n      };\n    }\n\n    function I() {\n      return _regeneratorRuntime.wrap(function I$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return (0, i.takeEvery)(l.TICK, E);\n\n            case 2:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _marked6);\n    }\n\n    t.default = (0, o.prefixName)(\"data\", I);\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/helpers/asyncToGenerator\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.advance = function (e) {\n      return {\n        type: r,\n        count: e\n      };\n    }, t.stepNext = function () {\n      return {\n        type: a\n      };\n    }, t.stepOver = function () {\n      return {\n        type: i\n      };\n    }, t.stepInto = function () {\n      return {\n        type: o\n      };\n    }, t.stepOut = function () {\n      return {\n        type: l\n      };\n    }, t.reset = function () {\n      return {\n        type: s\n      };\n    }, t.interrupt = function () {\n      return {\n        type: c\n      };\n    }, t.continueUntilBreakpoint = function (e) {\n      return {\n        type: u,\n        breakpoints: e\n      };\n    }, t.addBreakpoint = function (e) {\n      return {\n        type: d,\n        breakpoint: e\n      };\n    }, t.removeBreakpoint = function (e) {\n      return {\n        type: f,\n        breakpoint: e\n      };\n    }, t.removeAllBreakpoints = function () {\n      return {\n        type: p\n      };\n    }, t.startStepping = function () {\n      return {\n        type: y\n      };\n    }, t.doneStepping = function () {\n      return {\n        type: m\n      };\n    };\n    var r = t.ADVANCE = \"CONTROLLER_ADVANCE\";\n    var a = t.STEP_NEXT = \"CONTROLLER_STEP_NEXT\";\n    var i = t.STEP_OVER = \"CONTROLLER_STEP_OVER\";\n    var o = t.STEP_INTO = \"CONTROLLER_STEP_INTO\";\n    var l = t.STEP_OUT = \"CONTROLLER_STEP_OUT\";\n    var s = t.RESET = \"CONTROLLER_RESET\";\n    var c = t.INTERRUPT = \"CONTROLLER_INTERRUPT\";\n    var u = t.CONTINUE = \"CONTROLLER_CONTINUE\";\n    var d = t.ADD_BREAKPOINT = \"CONTROLLER_ADD_BREAKPOINT\";\n    var f = t.REMOVE_BREAKPOINT = \"CONTROLLER_REMOVE_BREAKPOINT\";\n    var p = t.REMOVE_ALL_BREAKPOINTS = \"CONTROLLER_REMOVE_ALL_BREAKPOINTS\";\n    var y = t.START_STEPPING = \"CONTROLLER_START_STEPPING\";\n    var m = t.DONE_STEPPING = \"CONTROLLER_DONE_STEPPING\";\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.BLOCK_DEFINITION = t.TX_DEFINITION = t.MSG_DEFINITION = t.NOW_DEFINITION = void 0;\n\n    var r = b(n(15)),\n        a = b(n(2)),\n        i = b(n(6)),\n        o = b(n(11)),\n        l = b(n(0)),\n        s = n(4),\n        c = b(n(16)),\n        u = b(n(27)),\n        d = b(n(28)),\n        f = n(1),\n        p = b(n(8)),\n        y = b(n(9)),\n        m = b(n(10)),\n        g = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(3));\n\n    function b(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var A = (0, l.default)(\"debugger:data:selectors\"),\n        T = function T(e) {\n      return e;\n    };\n\n    function E(e, t, n) {\n      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n      for (; e && !t.includes(e.nodeType);) {\n        if (void 0 !== e.id) e = n[n[e.id].parentId].definition;else {\n          if (null === r || null === a) return null;\n          r = r.replace(/\\/[^/]*$/, \"\"), e = c.default.get(a, r);\n        }\n      }\n\n      return e;\n    }\n\n    function _(e, t) {\n      var n;\n\n      switch (e.nodeType) {\n        case \"ModifierInvocation\":\n          n = e.modifierName.referencedDeclaration;\n          break;\n\n        case \"InheritanceSpecifier\":\n          n = e.baseName.referencedDeclaration;\n          break;\n\n        default:\n          A(\"bad invocation node\");\n      }\n\n      var r = t[n].definition;\n\n      switch (r.nodeType) {\n        case \"ModifierDefinition\":\n          return r;\n\n        case \"ContractDefinition\":\n          return r.nodes.find(function (e) {\n            return \"FunctionDefinition\" === e.nodeType && \"constructor\" === g.Ast.Utils.functionKind(e);\n          });\n\n        default:\n          return;\n      }\n    }\n\n    function v(e) {\n      var t = e.context,\n          n = e.contractName,\n          r = e.binary,\n          a = e.contractId,\n          i = e.contractKind,\n          o = e.isConstructor,\n          l = e.abi,\n          s = e.payable,\n          c = e.compiler,\n          u = e.compilationId;\n      return {\n        context: t,\n        contractName: n,\n        binary: r,\n        contractId: a,\n        contractKind: i,\n        isConstructor: o,\n        abi: g.AbiData.Utils.computeSelectors(l),\n        payable: s,\n        compiler: c,\n        compilationId: u\n      };\n    }\n\n    var R = t.NOW_DEFINITION = {\n      id: -1,\n      src: \"0:0:-1\",\n      name: \"now\",\n      nodeType: \"VariableDeclaration\",\n      typeDescriptions: {\n        typeIdentifier: \"t_uint256\",\n        typeString: \"uint256\"\n      }\n    },\n        S = t.MSG_DEFINITION = {\n      id: -1,\n      src: \"0:0:-1\",\n      name: \"msg\",\n      nodeType: \"VariableDeclaration\",\n      typeDescriptions: {\n        typeIdentifier: \"t_magic_message\",\n        typeString: \"msg\"\n      }\n    },\n        C = t.TX_DEFINITION = {\n      id: -1,\n      src: \"0:0:-1\",\n      name: \"tx\",\n      nodeType: \"VariableDeclaration\",\n      typeDescriptions: {\n        typeIdentifier: \"t_magic_transaction\",\n        typeString: \"tx\"\n      }\n    },\n        I = t.BLOCK_DEFINITION = {\n      id: -1,\n      src: \"0:0:-1\",\n      name: \"block\",\n      nodeType: \"VariableDeclaration\",\n      typeDescriptions: {\n        typeIdentifier: \"t_magic_block\",\n        typeString: \"block\"\n      }\n    };\n    var O = (0, s.createSelectorTree)({\n      state: function state(e) {\n        return e.data;\n      },\n      views: {\n        atLastInstructionForSourceRange: (0, s.createLeaf)([m.default.current.isSourceRangeFinal], function (e) {\n          return e;\n        }),\n        scopes: {\n          _: (0, s.createLeaf)([\"./raw\", \"./inlined/raw\"], function (e, t) {\n            return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e).map(function (_ref36) {\n              var _ref37 = _slicedToArray(_ref36, 2),\n                  n = _ref37[0],\n                  r = _ref37[1];\n\n              return _defineProperty({}, n, (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(r).map(function (_ref38) {\n                var _ref41;\n\n                var _ref39 = _slicedToArray(_ref38, 2),\n                    r = _ref39[0],\n                    i = _ref39[1];\n\n                var o = t[n][r].definition;\n                if (\"ContractDefinition\" !== o.nodeType) return _defineProperty({}, r, i);\n                A(\"contract id %d\", r);\n                var l = (0, a.default)({}, i),\n                    s = o.linearizedBaseContracts.slice().reverse();\n                return s.pop(), l.variables = (_ref41 = []).concat.apply(_ref41, _toConsumableArray(s.map(function (t) {\n                  return e[n][t].variables || [];\n                }))).filter(function (e) {\n                  return \"private\" !== t[n][e.astRef].definition.visibility;\n                }).concat(e[n][r].variables || []).filter(function (e) {\n                  A(\"variable %O\", e);\n                  var r = t[n][e.astRef].definition;\n                  return !r.constant || g.Ast.Utils.isSimpleConstant(r.value);\n                }), _defineProperty({}, r, l);\n              })))));\n            }))));\n          }),\n          raw: (0, s.createLeaf)([\"/info/scopes\"], function (e) {\n            return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e.byCompilationId).map(function (_ref44) {\n              var _ref45 = _slicedToArray(_ref44, 2),\n                  e = _ref45[0],\n                  t = _ref45[1].byAstRef;\n\n              return _defineProperty({}, e, (0, a.default)({}, t));\n            }))));\n          }),\n          inlined: {\n            _: (0, s.createLeaf)([\"../_\", \"./raw\"], function (e, t) {\n              return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(t).map(function (_ref47) {\n                var _ref48 = _slicedToArray(_ref47, 2),\n                    t = _ref48[0],\n                    n = _ref48[1];\n\n                return _defineProperty({}, t, (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(n).map(function (_ref49) {\n                  var _ref50 = _slicedToArray(_ref49, 2),\n                      n = _ref50[0],\n                      r = _ref50[1];\n\n                  return _defineProperty({}, n, (0, a.default)({}, r, {\n                    variables: e[t][n].variables\n                  }));\n                })))));\n              }))));\n            }),\n            raw: (0, s.createLeaf)([\"../raw\", m.default.info.sources], function (e, t) {\n              return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e).map(function (_ref53) {\n                var _ref54 = _slicedToArray(_ref53, 2),\n                    e = _ref54[0],\n                    n = _ref54[1];\n\n                return _defineProperty({}, e, (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(n).map(function (_ref55) {\n                  var _ref56 = _slicedToArray(_ref55, 2),\n                      n = _ref56[0],\n                      r = _ref56[1];\n\n                  return _defineProperty({}, n, (0, a.default)({}, r, {\n                    definition: c.default.get(t[e].byId[r.sourceId].ast, r.pointer)\n                  }));\n                })))));\n              }))));\n            })\n          }\n        },\n        userDefinedTypes: (0, s.createLeaf)([\"./referenceDeclarations\", \"./scopes\", m.default.info.sources], function (e, t, n) {\n          return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, u.default)((0, i.default)(e).map(function (_ref59) {\n            var _ref60 = _slicedToArray(_ref59, 2),\n                a = _ref60[0],\n                i = _ref60[1];\n\n            return (0, r.default)(i).map(function (r) {\n              return g.Ast.Import.definitionToStoredType(r, a, n[a].byId[t[a][r.id].sourceId].compiler, e[a]);\n            }).map(function (e) {\n              return _defineProperty({}, e.id, e);\n            });\n          })))));\n        }),\n        contractAllocationInfo: (0, s.createLeaf)([\"/info/userDefinedTypes\", \"/views/scopes/inlined\", m.default.info.sources, y.default.info.contexts], function (e, t, n, a) {\n          return (0, r.default)(e).filter(function (_ref62) {\n            var e = _ref62.compilationId,\n                n = _ref62.id;\n            return \"ContractDefinition\" === t[e][n].definition.nodeType;\n          }).map(function (_ref63) {\n            var e = _ref63.compilationId,\n                i = _ref63.id;\n            A(\"id: %O\", i), A(\"compilationId: %O\", e);\n            var o = (0, r.default)(a).find(function (t) {\n              return !t.isConstructor && t.compilationId === e && t.contractId === i;\n            }),\n                l = (0, r.default)(a).find(function (t) {\n              return t.isConstructor && t.compilationId === e && t.contractId === i;\n            }),\n                s = o ? o.immutableReferences : void 0;\n            return {\n              contractNode: t[e][i].definition,\n              compilationId: e,\n              immutableReferences: s,\n              compiler: n[e].byId[t[e][i].sourceId].compiler,\n              abi: (o || {}).abi,\n              deployedContext: o,\n              constructorContext: l\n            };\n          });\n        }),\n        referenceDeclarations: (0, s.createLeaf)([\"./scopes/inlined\", \"/info/userDefinedTypes\"], function (e, t) {\n          return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e).map(function (_ref64) {\n            var _ref65 = _slicedToArray(_ref64, 2),\n                e = _ref65[0],\n                n = _ref65[1];\n\n            return _defineProperty({}, e, (0, o.default).apply(void 0, [{}].concat(_toConsumableArray(t.map(function (_ref66) {\n              var t = _ref66.compilationId,\n                  r = _ref66.id;\n              return t === e ? _defineProperty({}, r, n[r].definition) : {};\n            })))));\n          }))));\n        }),\n        mappingKeys: (0, s.createLeaf)([\"/proc/mappedPaths\", \"/current/address\"], function (e, t) {\n          var _ref69;\n\n          return (_ref69 = []).concat.apply(_ref69, _toConsumableArray((0, r.default)((e.byAddress[t] || {\n            byType: {}\n          }).byType).map(function (_ref70) {\n            var e = _ref70.bySlotAddress;\n            return (0, r.default)(e);\n          }))).filter(function (e) {\n            return void 0 !== e.key;\n          });\n        }),\n        blockNumber: (0, s.createLeaf)([y.default.transaction.globals.block], function (e) {\n          return e.number.toString();\n        }),\n        instances: (0, s.createLeaf)([y.default.current.codex.instances], function (e) {\n          return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e).map(function (_ref71) {\n            var _ref72 = _slicedToArray(_ref71, 2),\n                e = _ref72[0],\n                t = _ref72[1].binary;\n\n            return _defineProperty({}, e, g.Conversion.toBytes(t));\n          }))));\n        }),\n        contexts: (0, s.createLeaf)([y.default.info.contexts], function (e) {\n          return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, r.default)(e).filter(function (e) {\n            return !e.isConstructor;\n          }).map(function (e) {\n            return _defineProperty({}, e.contractId, v(e));\n          }))));\n        })\n      },\n      info: {\n        scopes: (0, s.createLeaf)([\"/state\"], function (e) {\n          return e.info.scopes;\n        }),\n        allocations: {\n          storage: (0, s.createLeaf)([\"/state\"], function (e) {\n            return e.info.allocations.storage;\n          }),\n          state: (0, s.createLeaf)([\"/state\"], function (e) {\n            return e.info.allocations.state;\n          }),\n          memory: (0, s.createLeaf)([\"/state\"], function (e) {\n            return e.info.allocations.memory;\n          }),\n          abi: (0, s.createLeaf)([\"/state\"], function (e) {\n            return e.info.allocations.abi;\n          }),\n          calldata: (0, s.createLeaf)([\"/state\"], function (e) {\n            return e.info.allocations.calldata;\n          })\n        },\n        userDefinedTypes: (0, s.createLeaf)([\"/state\"], function (e) {\n          return e.info.userDefinedTypes;\n        })\n      },\n      proc: {\n        assignments: (0, s.createLeaf)([\"/state\"], function (e) {\n          return e.proc.assignments;\n        }),\n        mappedPaths: (0, s.createLeaf)([\"/state\"], function (e) {\n          return e.proc.mappedPaths;\n        }),\n        decodingKeys: (0, s.createLeaf)([\"./mappedPaths\"], function (e) {\n          return e.decodingStarted;\n        })\n      },\n      current: {\n        state: {\n          stack: (0, s.createLeaf)([y.default.current.state.stack], function (e) {\n            return (e || []).map(function (e) {\n              return g.Conversion.toBytes(e);\n            });\n          }),\n          memory: (0, s.createLeaf)([y.default.current.state.memory], function (e) {\n            return g.Conversion.toBytes(e.join(\"\"));\n          }),\n          code: (0, s.createLeaf)([y.default.current.context], function (_ref75) {\n            var e = _ref75.binary;\n            return g.Conversion.toBytes(e);\n          }),\n          calldata: (0, s.createLeaf)([y.default.current.call], function (_ref76) {\n            var e = _ref76.data;\n            return g.Conversion.toBytes(e);\n          }),\n          storage: (0, s.createLeaf)([y.default.current.codex.storage], function (e) {\n            return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(e).map(function (_ref77) {\n              var _ref78 = _slicedToArray(_ref77, 2),\n                  e = _ref78[0],\n                  t = _ref78[1];\n\n              return _defineProperty({}, \"0x\" + e, g.Conversion.toBytes(t));\n            }))));\n          }),\n          specials: (0, s.createLeaf)([\"/current/address\", y.default.current.call, y.default.transaction.globals], function (e, _ref80, _ref81) {\n            var t = _ref80.sender,\n                n = _ref80.value;\n            var r = _ref81.tx,\n                l = _ref81.block;\n            return (0, a.default)({\n              this: g.Conversion.toBytes(e),\n              sender: g.Conversion.toBytes(t),\n              value: g.Conversion.toBytes(n)\n            }, (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(r).map(function (_ref82) {\n              var _ref83 = _slicedToArray(_ref82, 2),\n                  e = _ref83[0],\n                  t = _ref83[1];\n\n              return _defineProperty({}, e, g.Conversion.toBytes(t));\n            })))), (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(l).map(function (_ref85) {\n              var _ref86 = _slicedToArray(_ref85, 2),\n                  e = _ref86[0],\n                  t = _ref86[1];\n\n              return _defineProperty({}, e, g.Conversion.toBytes(t));\n            })))));\n          })\n        },\n        compilationId: (0, s.createLeaf)([y.default.current.context], function (_ref88) {\n          var e = _ref88.compilationId;\n          return e;\n        }),\n        sourceId: (0, s.createLeaf)([m.default.current.source], function (_ref89) {\n          var e = _ref89.id;\n          return e;\n        }),\n        root: (0, s.createLeaf)([m.default.current.source], function (_ref90) {\n          var e = _ref90.ast;\n          return e;\n        }),\n        scopes: {\n          _: (0, s.createLeaf)([\"/views/scopes\", \"../compilationId\"], function (e, t) {\n            return e[t];\n          }),\n          inlined: (0, s.createLeaf)([\"/views/scopes/inlined\", \"../compilationId\"], function (e, t) {\n            return e[t];\n          })\n        },\n        referenceDeclarations: (0, s.createLeaf)([\"/views/referenceDeclarations\", \"./compilationId\"], function (e, t) {\n          return e[t];\n        }),\n        allocations: {\n          state: (0, s.createLeaf)([\"/info/allocations/state\", \"/views/userDefinedTypes\", \"../compilationId\", y.default.current.context], function (e, t, n, _ref91) {\n            var r = _ref91.isConstructor;\n            var l = n ? e[n] : {};\n            var s = (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(l).map(function (_ref92) {\n              var _ref93 = _slicedToArray(_ref92, 2),\n                  e = _ref93[0],\n                  t = _ref93[1];\n\n              return _defineProperty({}, e, {\n                members: t.members.map(function (e) {\n                  return (0, a.default)({}, e);\n                })\n              });\n            }))));\n            if (r) for (var _e12 in s) {\n              var _t10 = s[_e12];\n\n              var _n5 = 4 * g.Evm.Utils.WORD_SIZE;\n\n              var _iterator4 = _createForOfIteratorHelper(_t10.members),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var _e13 = _step4.value;\n                  \"code\" !== _e13.pointer.location && \"nowhere\" !== _e13.pointer.location || (_e13.pointer = {\n                    location: \"memory\",\n                    start: _n5,\n                    length: g.Evm.Utils.WORD_SIZE\n                  }, _n5 += g.Evm.Utils.WORD_SIZE);\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n            }\n            return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(s).map(function (_ref95) {\n              var _ref96 = _slicedToArray(_ref95, 2),\n                  e = _ref96[0],\n                  t = _ref96[1];\n\n              return _defineProperty({}, e, {\n                members: (0, o.default).apply(void 0, [{}].concat(_toConsumableArray(t.members.map(function (e) {\n                  return _defineProperty({}, e.definition.id, e);\n                }))))\n              });\n            }))));\n          })\n        },\n        compiler: (0, s.createLeaf)([y.default.current.context], function (_ref99) {\n          var e = _ref99.compiler;\n          return e;\n        }),\n        bareLetsInYulAreHit: (0, s.createLeaf)([\"./compiler\"], function (e) {\n          return void 0 !== e && d.default.satisfies(e.version, \">=0.6.8\", {\n            includePrerelease: !0\n          });\n        }),\n        node: (0, s.createLeaf)([m.default.current.node], T),\n        pointer: (0, s.createLeaf)([m.default.current.pointer], T),\n        scope: (0, s.createLeaf)([\"./node\"], T),\n        contract: (0, s.createLeaf)([\"./node\", \"./scopes/inlined\", \"./pointer\", \"./root\"], function (e, t, n, r) {\n          return E(e, [\"ContractDefinition\", \"SourceUnit\"], t, n, r);\n        }),\n        function: (0, s.createLeaf)([\"./node\", \"./scopes/inlined\", \"./pointer\", \"./root\"], function (e, t, n, r) {\n          return E(e, [\"FunctionDefinition\", \"ModifierDefinition\", \"ContractDefinition\", \"SourceUnit\"], t, n, r);\n        }),\n        inModifier: (0, s.createLeaf)([\"./function\"], function (e) {\n          return e && \"ModifierDefinition\" === e.nodeType;\n        }),\n        inFunctionOrModifier: (0, s.createLeaf)([\"./function\"], function (e) {\n          return e && (\"FunctionDefinition\" === e.nodeType || \"ModifierDefinition\" === e.nodeType);\n        }),\n        functionDepth: (0, s.createLeaf)([m.default.current.functionDepth], T),\n        modifierDepth: (0, s.createLeaf)([m.default.current.modifierDepth], T),\n        address: (0, s.createLeaf)([y.default.current.call], function (e) {\n          return e.storageAddress;\n        }),\n        functionsByProgramCounter: (0, s.createLeaf)([m.default.current.functionsByProgramCounter], function (e) {\n          return e;\n        }),\n        context: (0, s.createLeaf)([y.default.current.context], v),\n        aboutToModify: (0, s.createLeaf)([\"./node\", \"./modifierInvocation\", \"./modifierArgumentIndex\", \"/next/node\", \"/next/modifierInvocation\", y.default.current.step.isContextChange], function (e, t, n, r, a, i) {\n          if (i || !e || void 0 === e.id || !r || void 0 === r.id || !t || void 0 === t.id || !a || void 0 === a.id) return !1;\n          if (\"SourceUnit\" === t.nodeType) return !1;\n          if (\"FunctionDefinition\" === r.nodeType || \"ModifierDefinition\" === r.nodeType) return !1;\n          if (\"SourceUnit\" !== a.nodeType && a.id === t.id) return !1;\n          if (void 0 === n) return !1;\n          var o = t.arguments[n];\n\n          for (; \"typeConversion\" === o.kind;) {\n            if (e.id === o.id) return !0;\n            o = o.arguments[0];\n          }\n\n          return e.id === o.id;\n        }),\n        modifierInvocation: (0, s.createLeaf)([\"./node\", \"./scopes/inlined\"], function (e, t) {\n          return E(e, [\"ModifierInvocation\", \"InheritanceSpecifier\", \"SourceUnit\"], t);\n        }),\n        modifierArgumentIndex: (0, s.createLeaf)([\"./scopes\", \"./node\", \"./modifierInvocation\"], function (e, t, n) {\n          if (!n || \"SourceUnit\" === n.nodeType) return;\n          var r = e[t.id].pointer,\n              a = e[n.id].pointer,\n              i = r.slice(a.length);\n          A(\"difference %s\", i);\n          var o = i.match(/^\\/arguments\\/(\\d+)/);\n          return A(\"rawIndex %o\", o), null !== o ? parseInt(o[1]) : void 0;\n        }),\n        modifierBeingInvoked: (0, s.createLeaf)([\"./modifierInvocation\", \"./scopes/inlined\"], function (e, t) {\n          if (e && \"SourceUnit\" !== e.nodeType) return _(e, t);\n        }),\n        identifiers: {\n          _: (0, s.createLeaf)([\"/current/scopes/inlined\", \"/current/node\", \"/current/pointer\", \"/current/sourceId\"], function (e, t, n, r) {\n            var i = {};\n\n            if (void 0 !== t) {\n              var _a4 = void 0 !== t.id ? t.id : (0, f.makePath)(r, n);\n\n              for (; null !== _a4 && e[_a4] && (i = (0, o.default).apply(void 0, [i].concat(_toConsumableArray((e[_a4].variables || []).filter(function (e) {\n                return \"\" !== e.name;\n              }).filter(function (e) {\n                return null == i[e.name];\n              }).map(function (e) {\n                return _defineProperty({}, e.name, {\n                  astRef: e.astRef\n                });\n              })))), \"YulFunctionDefinition\" !== e[_a4].definition.nodeType);) {\n                _a4 = void 0 !== e[_a4].parentId ? e[_a4].parentId : _a4.replace(/\\/[^/]*(\\/\\d+)?$/, \"\");\n              }\n            }\n\n            return t && (t.nodeType.startsWith(\"Yul\") || \"InlineAssembly\" === t.nodeType) ? i : (0, a.default)({}, i, {\n              msg: {\n                builtin: \"msg\"\n              },\n              tx: {\n                builtin: \"tx\"\n              },\n              block: {\n                builtin: \"block\"\n              },\n              this: {\n                builtin: \"this\"\n              },\n              now: {\n                builtin: \"now\"\n              }\n            });\n          }),\n          definitions: {\n            _: (0, s.createLeaf)([\"/current/scopes/inlined\", \"../_\", \"./this\"], function (e, t, n) {\n              var r = (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(t).map(function (_ref101) {\n                var _ref102 = _slicedToArray(_ref101, 2),\n                    t = _ref102[0],\n                    n = _ref102[1];\n\n                if (void 0 !== n.astRef) {\n                  var _r2 = e[n.astRef].definition;\n                  return _defineProperty({}, t, _r2);\n                }\n\n                return {};\n              })))),\n                  l = {\n                msg: S,\n                tx: C,\n                block: I,\n                now: R\n              };\n              return n && (l.this = n), (0, a.default)({}, r, l);\n            }),\n            this: (0, s.createLeaf)([\"/current/contract\"], function (e) {\n              return e && \"ContractDefinition\" === e.nodeType ? (t = e.name, n = e.id, r = e.contractKind, {\n                id: -1,\n                src: \"0:0:-1\",\n                name: \"this\",\n                nodeType: \"VariableDeclaration\",\n                typeDescriptions: {\n                  typeIdentifier: \"t_contract$_\" + t.replace(/\\$/g, \"$$\".repeat(3)) + \"_$\" + n,\n                  typeString: r + \" \" + t\n                }\n              }) : null;\n              var t, n, r;\n            })\n          },\n          refs: (0, s.createLeaf)([\"/proc/assignments\", \"./_\", \"/current/compilationId\", \"/current/functionDepth\", \"/current/modifierDepth\", \"/current/inModifier\", \"/current/address\"], function (e, t, n, r, a, l, s) {\n            return (0, o.default).apply(void 0, [{}].concat(_toConsumableArray((0, i.default)(t).map(function (_ref104) {\n              var _ref105 = _slicedToArray(_ref104, 2),\n                  t = _ref105[0],\n                  _ref105$ = _ref105[1],\n                  i = _ref105$.astRef,\n                  o = _ref105$.builtin;\n\n              var c;\n\n              if (A(\"astRef: %o\", i), A(\"builtin: %s\", o), void 0 !== i) {\n                c = (((e.byCompilationId[n] || {}).byAstRef || {})[i] || []).find(function (t) {\n                  return e.byId[t].address === s;\n                }), A(\"id after global: %s\", c), void 0 === c && (c = l ? (0, f.stableKeccak256)({\n                  astRef: i,\n                  compilationId: n,\n                  stackframe: r,\n                  modifierDepth: a\n                }) : (0, f.stableKeccak256)({\n                  astRef: i,\n                  compilationId: n,\n                  stackframe: r\n                })), A(\"id after local: %s\", c);\n              } else A(\"builtin: %s\", o), c = e.byBuiltin[o][0];\n\n              A(\"id: %s\", c);\n\n              var _ref106 = e.byId[c] || {},\n                  u = _ref106.ref;\n\n              if (u) return _defineProperty({}, t, u);\n            }))));\n          })\n        },\n        returnStatus: (0, s.createLeaf)([y.default.current.step.returnStatus], function (e) {\n          return null === e ? void 0 : e;\n        }),\n        returnAllocation: (0, s.createLeaf)([y.default.current.call, \"/current/context\", \"/info/allocations/calldata\"], function (_ref108, _ref109, _ref110) {\n          var e = _ref108.data;\n          var t = _ref109.context,\n              n = _ref109.isConstructor;\n          var r = _ref110.constructorAllocations,\n              a = _ref110.functionAllocations;\n\n          if (n) {\n            var _e14 = r[t];\n            return _e14 ? _e14.output : null;\n          }\n\n          {\n            var _n6 = e.slice(0, 10);\n\n            A(\"selector: %s\", _n6), A(\"bySelector: %o\", a[t]);\n            var _r3 = (a[t] || {})[_n6];\n            return _r3 ? _r3.output : null;\n          }\n        })\n      },\n      next: {\n        state: {\n          stack: (0, s.createLeaf)([y.default.next.state.stack], function (e) {\n            return (e || []).map(function (e) {\n              return g.Conversion.toBytes(e);\n            });\n          }),\n          returndata: (0, s.createLeaf)([y.default.current.step.returnValue], function (e) {\n            return g.Conversion.toBytes(e);\n          })\n        },\n        node: (0, s.createLeaf)([m.default.next.node], T),\n        pointer: (0, s.createLeaf)([m.default.next.pointer], T),\n        modifierInvocation: (0, s.createLeaf)([\"./node\", \"/current/scopes/inlined\", y.default.current.step.isContextChange], function (e, t, n) {\n          if (n) return;\n          return E(e, [\"ModifierInvocation\", \"InheritanceSpecifier\", \"SourceUnit\"], t);\n        }),\n        modifierBeingInvoked: (0, s.createLeaf)([\"./modifierInvocation\", \"/current/scopes/inlined\", y.default.current.step.isContextChange], function (e, t, n) {\n          if (!n && e && \"SourceUnit\" !== e.nodeType) return _(e, t);\n        })\n      },\n      nextMapped: {\n        state: {\n          stack: (0, s.createLeaf)([m.default.current.nextMapped], function (e) {\n            return ((e || {}).stack || []).map(function (e) {\n              return g.Conversion.toBytes(e);\n            });\n          })\n        }\n      },\n      nextOfSameDepth: {\n        state: {\n          stack: (0, s.createLeaf)([p.default.nextOfSameDepth], function (e) {\n            return e ? (e.stack || []).map(function (e) {\n              return g.Conversion.toBytes(e);\n            }) : null;\n          })\n        }\n      }\n    });\n    t.default = O;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r = f(n(2)),\n        a = f(n(0)),\n        i = n(4),\n        o = f(n(9)),\n        l = f(n(10)),\n        s = f(n(16)),\n        c = f(n(51)),\n        u = n(1),\n        d = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(3));\n\n    function f(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var p = (0, a.default)(\"debugger:stacktrace:selectors\"),\n        y = function y(e) {\n      return e;\n    };\n\n    function m(e, t, n, a) {\n      var i = e.map(function (e) {\n        return e.calledFromLocation;\n      });\n      i.shift(), i.push(t), p(\"locations: %O\", i);\n      var o = e.map(function (_ref111) {\n        var e = _ref111.functionName,\n            t = _ref111.contractName,\n            n = _ref111.address;\n        return {\n          functionName: e,\n          contractName: t,\n          address: n\n        };\n      });\n      p(\"names: %O\", o);\n      var l = (0, c.default)(i, o, function (e, t) {\n        return (0, r.default)({}, t, {\n          location: e\n        });\n      });\n      return null !== n && (l[l.length - 1].status = n), void 0 !== a && (l[0].message = a), l;\n    }\n\n    function g(e) {\n      return {\n        location: {\n          source: (0, i.createLeaf)([e.source], y),\n          sourceRange: (0, i.createLeaf)([e.sourceRange], y),\n          node: (0, i.createLeaf)([e.node], y),\n          pointer: (0, i.createLeaf)([e.pointer], y)\n        },\n        strippedLocation: (0, i.createLeaf)([\"./location/source\", \"./location/sourceRange\"], function (_ref112, r) {\n          var e = _ref112.id,\n              t = _ref112.compilationId,\n              n = _ref112.sourcePath;\n          return {\n            source: {\n              id: e,\n              compilationId: t,\n              sourcePath: n\n            },\n            sourceRange: r\n          };\n        }),\n        contractNode: (0, i.createLeaf)([\"./location/source\", \"./location/pointer\"], function (_ref113, t) {\n          var e = _ref113.ast;\n          return t ? s.default.get(e, t.replace(/\\/nodes\\/\\d+$/, \"\")) : e;\n        })\n      };\n    }\n\n    var b = (0, i.createSelectorTree)({\n      state: function state(e) {\n        return e.stacktrace;\n      },\n      current: (0, r.default)({\n        callstack: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.proc.callstack;\n        }),\n        returnCounter: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.proc.returnCounter;\n        }),\n        lastPosition: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.proc.lastPosition;\n        }),\n        innerReturnPosition: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.proc.innerReturnPosition;\n        }),\n        innerReturnStatus: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.proc.innerReturnStatus;\n        })\n      }, g(l.default.current), {\n        willJumpIn: (0, i.createLeaf)([l.default.current.willJump, l.default.current.jumpDirection], function (e, t) {\n          return e && \"i\" === t;\n        }),\n        willJumpOut: (0, i.createLeaf)([l.default.current.willJump, l.default.current.jumpDirection], function (e, t) {\n          return e && \"o\" === t;\n        }),\n        willCall: (0, i.createLeaf)([l.default.current.willCall], y),\n        context: (0, i.createLeaf)([o.default.current.context], y),\n        callContext: (0, i.createLeaf)([o.default.current.step.callContext], y),\n        willReturn: (0, i.createLeaf)([l.default.current.willReturn], y),\n        returnStatus: (0, i.createLeaf)([o.default.current.step.returnStatus], y),\n        address: (0, i.createLeaf)([o.default.current.call], function (e) {\n          return e.storageAddress;\n        }),\n        callAddress: (0, i.createLeaf)([o.default.current.step.isCall, o.default.current.step.isCreate, o.default.current.step.callAddress, o.default.current.step.createdAddress], function (e, t, n, r) {\n          return e ? n : t ? r !== d.Evm.Utils.ZERO_ADDRESS ? r : void 0 : null;\n        }),\n        revertString: (0, i.createLeaf)([o.default.current.step.returnValue], function (e) {\n          var t = d.decodeRevert(d.Conversion.toBytes(e));\n\n          if (1 === t.length && \"revert\" === t[0].kind) {\n            var _e15 = t[0].arguments[0].value.value;\n\n            switch (_e15.kind) {\n              case \"valid\":\n                return _e15.asString;\n\n              case \"malformed\":\n                return Buffer.from(_e15.asHex.slice(2), \"hex\").toString();\n            }\n          }\n        }),\n        positionWillChange: (0, i.createLeaf)([\"/next/location\", \"/current/location\", \"./lastPosition\"], function (e, t, n) {\n          var r = void 0 !== t.source.id ? t : n;\n          return Boolean(r) && Boolean(e.source) && void 0 !== e.source.id && (e.source.compilationId !== r.source.compilationId || e.source.id !== r.source.id || e.sourceRange.start !== r.sourceRange.start || e.sourceRange.length !== r.sourceRange.length);\n        }),\n        finalReport: (0, i.createLeaf)([\"./callstack\", \"./innerReturnPosition\", \"./innerReturnStatus\", \"./revertString\"], m),\n        report: (0, i.createLeaf)([\"./callstack\", \"./returnCounter\", \"./lastPosition\", \"/current/strippedLocation\"], function (e, t, n, r) {\n          return m((0, u.popNWhere)(e, t, function (e) {\n            return \"external\" === e.type;\n          }), r || n, null, void 0);\n        })\n      }),\n      next: (0, r.default)({}, g(l.default.next))\n    });\n    t.default = b;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = u(n(6)),\n        a = u(n(11)),\n        i = u(n(0)),\n        o = n(4),\n        l = u(n(9)),\n        s = u(n(8)),\n        c = u(n(10));\n\n    function u(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var d = (0, i.default)(\"debugger:session:selectors\"),\n        f = (0, o.createSelectorTree)({\n      state: function state(e) {\n        return e.session;\n      },\n      info: {\n        affectedInstances: (0, o.createLeaf)([l.default.current.codex.instances, l.default.info.contexts, c.default.info.sources], function (e, t, n) {\n          return (0, a.default).apply(void 0, [{}].concat(_toConsumableArray((0, r.default)(e).map(function (_ref114) {\n            var _ref115 = _slicedToArray(_ref114, 2),\n                r = _ref115[0],\n                _ref115$ = _ref115[1],\n                a = _ref115$.context,\n                i = _ref115$.binary;\n\n            d(\"instances %O\", e), d(\"contexts %O\", t);\n            var o = t[a];\n            if (!o) return _defineProperty({}, r, {\n              binary: i\n            });\n            var l = o.contractName,\n                s = o.compilationId,\n                c = o.primarySource;\n            return d(\"primarySource: %o\", c), d(\"compilationId: %s\", s), d(\"sources: %o\", n), _defineProperty({}, r, {\n              contractName: l,\n              source: void 0 !== c ? n[s].byId[c] : void 0,\n              binary: i\n            });\n          }))));\n        })\n      },\n      transaction: {\n        _: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.transaction;\n        }),\n        receipt: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.receipt;\n        }),\n        block: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.block;\n        })\n      },\n      status: {\n        readyOrError: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.ready;\n        }),\n        ready: (0, o.createLeaf)([\"./readyOrError\", \"./isError\"], function (e, t) {\n          return e && !t;\n        }),\n        waiting: (0, o.createLeaf)([\"/state\"], function (e) {\n          return !e.ready;\n        }),\n        error: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.lastLoadingError;\n        }),\n        isError: (0, o.createLeaf)([\"./error\"], function (e) {\n          return null !== e;\n        }),\n        success: (0, o.createLeaf)([\"./error\"], function (e) {\n          return null === e;\n        }),\n        errored: (0, o.createLeaf)([\"./readyOrError\", \"./isError\"], function (e, t) {\n          return e && t;\n        }),\n        loaded: (0, o.createLeaf)([s.default.loaded], function (e) {\n          return e;\n        }),\n        lightMode: (0, o.createLeaf)([\"/state\"], function (e) {\n          return e.lightMode;\n        })\n      }\n    });\n    t.default = f;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(m),\n        _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(g),\n        _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(b);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = p(n(6)),\n        a = p(n(2));\n    t.addContext = /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(e) {\n      var t;\n      return _regeneratorRuntime.wrap(function _callee19$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              t = e.context || (0, l.keccak256)({\n                type: \"string\",\n                value: e.binary\n              });\n              y(\"context %O\", e);\n              _context25.next = 4;\n              return (0, o.put)(c.addContext((0, a.default)({}, e, {\n                context: t\n              })));\n\n            case 4:\n              return _context25.abrupt(\"return\", t);\n\n            case 5:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee19);\n    }), t.addInstance = /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(e, t) {\n      var n;\n      return _regeneratorRuntime.wrap(function _callee20$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return (0, o.select)(u.default.info.binaries.search);\n\n            case 2:\n              _context26.t0 = _context26.sent;\n              n = (0, _context26.t0)(t);\n              _context26.next = 6;\n              return (0, o.put)(c.addInstance(e, n, t));\n\n            case 6:\n              return _context26.abrupt(\"return\", n);\n\n            case 7:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee20);\n    }), t.refreshInstances = /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n      var e, _iterator5, _step5, _step5$value, _t11, _n7, _e16;\n\n      return _regeneratorRuntime.wrap(function _callee21$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return (0, o.select)(u.default.current.codex.instances);\n\n            case 2:\n              e = _context27.sent;\n              _iterator5 = _createForOfIteratorHelper((0, r.default)(e));\n              _context27.prev = 4;\n\n              _iterator5.s();\n\n            case 6:\n              if ((_step5 = _iterator5.n()).done) {\n                _context27.next = 16;\n                break;\n              }\n\n              _step5$value = _slicedToArray(_step5.value, 2), _t11 = _step5$value[0], _n7 = _step5$value[1].binary;\n              _context27.next = 10;\n              return (0, o.select)(u.default.info.binaries.search);\n\n            case 10:\n              _context27.t0 = _context27.sent;\n              _e16 = (0, _context27.t0)(_n7);\n              _context27.next = 14;\n              return (0, o.put)(c.addInstance(_t11, _e16, _n7));\n\n            case 14:\n              _context27.next = 6;\n              break;\n\n            case 16:\n              _context27.next = 21;\n              break;\n\n            case 18:\n              _context27.prev = 18;\n              _context27.t1 = _context27[\"catch\"](4);\n\n              _iterator5.e(_context27.t1);\n\n            case 21:\n              _context27.prev = 21;\n\n              _iterator5.f();\n\n              return _context27.finish(21);\n\n            case 24:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee21, null, [[4, 18, 21, 24]]);\n    }), t.begin = /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(_ref118) {\n      var e, t, n, r, a, i, l, s, d;\n      return _regeneratorRuntime.wrap(function _callee22$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              e = _ref118.address, t = _ref118.binary, n = _ref118.data, r = _ref118.storageAddress, a = _ref118.status, i = _ref118.sender, l = _ref118.value, s = _ref118.gasprice, d = _ref118.block;\n              _context28.next = 3;\n              return (0, o.put)(c.saveGlobals(i, s, d));\n\n            case 3:\n              _context28.next = 5;\n              return (0, o.put)(c.saveStatus(a));\n\n            case 5:\n              _context28.t0 = y;\n              _context28.next = 8;\n              return (0, o.select)(u.default.current.codex);\n\n            case 8:\n              _context28.t1 = _context28.sent;\n              (0, _context28.t0)(\"codex: %O\", _context28.t1);\n\n              if (!e) {\n                _context28.next = 15;\n                break;\n              }\n\n              _context28.next = 13;\n              return (0, o.put)(c.call(e, n, r, i, l));\n\n            case 13:\n              _context28.next = 17;\n              break;\n\n            case 15:\n              _context28.next = 17;\n              return (0, o.put)(c.create(t, r, i, l));\n\n            case 17:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee22);\n    }), t.callstackAndCodexSaga = g, t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      var e;\n      return _regeneratorRuntime.wrap(function _callee23$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return (0, o.select)(u.default.transaction.initialCall);\n\n            case 2:\n              e = _context29.sent;\n              _context29.next = 5;\n              return (0, o.put)(c.reset());\n\n            case 5:\n              _context29.next = 7;\n              return (0, o.put)(e);\n\n            case 7:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee23);\n    }), t.unload = /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n      return _regeneratorRuntime.wrap(function _callee24$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return (0, o.put)(c.unloadTransaction());\n\n            case 2:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee24);\n    }), t.saga = b;\n    var i = p(n(0)),\n        o = n(5),\n        l = n(1),\n        s = n(12),\n        c = f(n(31)),\n        u = p(n(9)),\n        d = f(n(13));\n\n    function f(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function p(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var y = (0, i.default)(\"debugger:evm:sagas\");\n\n    function m() {\n      return _regeneratorRuntime.wrap(function m$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              y(\"got TICK\");\n              return _context31.delegateYield(g(), \"t0\", 2);\n\n            case 2:\n              return _context31.delegateYield(d.signalTickSagaCompletion(), \"t1\", 3);\n\n            case 3:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _marked7);\n    }\n\n    function g() {\n      var _e17, _t12, _yield, _n8, _r4, _a5, _n9, _r5, _a6, _i3, _e18, _t13, _n10, _r6, _yield2, _e19, _t14, _e20, _n11, _e21, _t15, _n12, _e22, _t16, _n13;\n\n      return _regeneratorRuntime.wrap(function g$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return (0, o.select)(u.default.current.step.isExceptionalHalting);\n\n            case 2:\n              if (!_context32.sent) {\n                _context32.next = 8;\n                break;\n              }\n\n              y(\"exceptional halt!\");\n              _context32.next = 6;\n              return (0, o.put)(c.fail());\n\n            case 6:\n              _context32.next = 132;\n              break;\n\n            case 8:\n              _context32.next = 10;\n              return (0, o.select)(u.default.current.step.isInstantCallOrCreate);\n\n            case 10:\n              if (!_context32.sent) {\n                _context32.next = 14;\n                break;\n              }\n\n              ;\n              _context32.next = 132;\n              break;\n\n            case 14:\n              _context32.next = 16;\n              return (0, o.select)(u.default.current.step.isCall);\n\n            case 16:\n              if (!_context32.sent) {\n                _context32.next = 57;\n                break;\n              }\n\n              y(\"got call\");\n              _context32.next = 20;\n              return (0, o.select)(u.default.current.step.callAddress);\n\n            case 20:\n              _e17 = _context32.sent;\n              _context32.next = 23;\n              return (0, o.select)(u.default.current.step.callData);\n\n            case 23:\n              _t12 = _context32.sent;\n              y(\"calling address %s\", _e17);\n              _context32.next = 27;\n              return (0, o.select)(u.default.current.step.isDelegateCallStrict);\n\n            case 27:\n              if (!_context32.sent) {\n                _context32.next = 38;\n                break;\n              }\n\n              _context32.next = 30;\n              return (0, o.select)(u.default.current.call);\n\n            case 30:\n              _yield = _context32.sent;\n              _n8 = _yield.storageAddress;\n              _r4 = _yield.sender;\n              _a5 = _yield.value;\n              _context32.next = 36;\n              return (0, o.put)(c.call(_e17, _t12, _n8, _r4, _a5));\n\n            case 36:\n              _context32.next = 55;\n              break;\n\n            case 38:\n              _context32.next = 40;\n              return (0, o.select)(u.default.current.call);\n\n            case 40:\n              _n9 = _context32.sent;\n              _context32.next = 43;\n              return (0, o.select)(u.default.current.step.isDelegateCallBroad);\n\n            case 43:\n              if (!_context32.sent) {\n                _context32.next = 47;\n                break;\n              }\n\n              _context32.t0 = _n9.storageAddress;\n              _context32.next = 48;\n              break;\n\n            case 47:\n              _context32.t0 = _e17;\n\n            case 48:\n              _r5 = _context32.t0;\n              _a6 = _n9.storageAddress;\n              _context32.next = 52;\n              return (0, o.select)(u.default.current.step.callValue);\n\n            case 52:\n              _i3 = _context32.sent;\n              _context32.next = 55;\n              return (0, o.put)(c.call(_e17, _t12, _r5, _a6, _i3));\n\n            case 55:\n              _context32.next = 132;\n              break;\n\n            case 57:\n              _context32.next = 59;\n              return (0, o.select)(u.default.current.step.isCreate);\n\n            case 59:\n              if (!_context32.sent) {\n                _context32.next = 77;\n                break;\n              }\n\n              y(\"got create\");\n              _context32.next = 63;\n              return (0, o.select)(u.default.current.step.createBinary);\n\n            case 63:\n              _e18 = _context32.sent;\n              _context32.next = 66;\n              return (0, o.select)(u.default.current.step.createdAddress);\n\n            case 66:\n              _t13 = _context32.sent;\n              _context32.next = 69;\n              return (0, o.select)(u.default.current.step.createValue);\n\n            case 69:\n              _n10 = _context32.sent;\n              _context32.next = 72;\n              return (0, o.select)(u.default.current.call);\n\n            case 72:\n              _r6 = _context32.sent.storageAddress;\n              _context32.next = 75;\n              return (0, o.put)(c.create(_e18, _t13, _r6, _n10));\n\n            case 75:\n              _context32.next = 132;\n              break;\n\n            case 77:\n              _context32.next = 79;\n              return (0, o.select)(u.default.current.step.isNormalHalting);\n\n            case 79:\n              if (!_context32.sent) {\n                _context32.next = 102;\n                break;\n              }\n\n              y(\"got return\");\n              _context32.next = 83;\n              return (0, o.select)(u.default.current.call);\n\n            case 83:\n              _yield2 = _context32.sent;\n              _e19 = _yield2.binary;\n              _t14 = _yield2.storageAddress;\n\n              if (!_e19) {\n                _context32.next = 98;\n                break;\n              }\n\n              _context32.next = 89;\n              return (0, o.select)(u.default.current.step.returnValue);\n\n            case 89:\n              _e20 = _context32.sent;\n              _context32.next = 92;\n              return (0, o.select)(u.default.info.binaries.search);\n\n            case 92:\n              _context32.t1 = _context32.sent;\n              _n11 = (0, _context32.t1)(_e20);\n              _context32.next = 96;\n              return (0, o.put)(c.returnCreate(_t14, _e20, _n11));\n\n            case 96:\n              _context32.next = 100;\n              break;\n\n            case 98:\n              _context32.next = 100;\n              return (0, o.put)(c.returnCall());\n\n            case 100:\n              _context32.next = 132;\n              break;\n\n            case 102:\n              _context32.next = 104;\n              return (0, o.select)(u.default.current.step.isStore);\n\n            case 104:\n              if (!_context32.sent) {\n                _context32.next = 118;\n                break;\n              }\n\n              _context32.next = 107;\n              return (0, o.select)(u.default.current.call);\n\n            case 107:\n              _e21 = _context32.sent.storageAddress;\n              _context32.next = 110;\n              return (0, o.select)(u.default.current.step.storageAffected);\n\n            case 110:\n              _t15 = _context32.sent;\n              _context32.next = 113;\n              return (0, o.select)(u.default.current.step.valueStored);\n\n            case 113:\n              _n12 = _context32.sent;\n              _context32.next = 116;\n              return (0, o.put)(c.store(_e21, _t15, _n12));\n\n            case 116:\n              _context32.next = 132;\n              break;\n\n            case 118:\n              _context32.next = 120;\n              return (0, o.select)(u.default.current.step.isLoad);\n\n            case 120:\n              if (!_context32.sent) {\n                _context32.next = 132;\n                break;\n              }\n\n              _context32.next = 123;\n              return (0, o.select)(u.default.current.call);\n\n            case 123:\n              _e22 = _context32.sent.storageAddress;\n              _context32.next = 126;\n              return (0, o.select)(u.default.current.step.storageAffected);\n\n            case 126:\n              _t16 = _context32.sent;\n              _context32.next = 129;\n              return (0, o.select)(u.default.current.step.valueLoaded);\n\n            case 129:\n              _n13 = _context32.sent;\n              _context32.next = 132;\n              return (0, o.put)(c.load(_e22, _t16, _n13));\n\n            case 132:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _marked8);\n    }\n\n    function b() {\n      return _regeneratorRuntime.wrap(function b$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return (0, o.takeEvery)(s.TICK, m);\n\n            case 2:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _marked9);\n    }\n\n    t.default = (0, l.prefixName)(\"evm\", b);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = u(n(2)),\n        a = u(n(0)),\n        i = n(4),\n        o = n(1),\n        l = u(n(9)),\n        s = u(n(10)),\n        c = u(n(8));\n\n    function u(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var d = (0, a.default)(\"debugger:controller:selectors\"),\n        f = function f(e) {\n      return e;\n    };\n\n    function p(e, t, n, r) {\n      var a = n + r;\n      return e(n, r).some(function (_ref119) {\n        var e = _ref119.range,\n            t = _ref119.node;\n        return function (e) {\n          return \"InlineAssembly\" === e.nodeType && !e.AST;\n        }(t) || n <= e[0] && e[0] < a && !(0, o.isSkippedNodeType)(t);\n      });\n    }\n\n    var y = (0, i.createSelectorTree)({\n      state: function state(e) {\n        return e.controller;\n      },\n      current: {\n        functionDepth: (0, i.createLeaf)([s.default.current.functionDepth], f),\n        executionContext: (0, i.createLeaf)([l.default.current.call], f),\n        willJump: (0, i.createLeaf)([l.default.current.step.isJump], f),\n        location: {\n          sourceRange: (0, i.createLeaf)([s.default.current.sourceRange, \"/current/trace/loaded\"], function (e, t) {\n            return t ? e : null;\n          }),\n          source: (0, i.createLeaf)([s.default.current.source, \"/current/trace/loaded\"], function (e, t) {\n            return t ? e : null;\n          }),\n          node: (0, i.createLeaf)([s.default.current.node, \"/current/trace/loaded\"], function (e, t) {\n            return t ? e : null;\n          }),\n          isMultiline: (0, i.createLeaf)([s.default.current.isMultiline, \"/current/trace/loaded\"], function (e, t) {\n            return !!t && e;\n          })\n        },\n        trace: {\n          finished: (0, i.createLeaf)([c.default.finished], f),\n          loaded: (0, i.createLeaf)([c.default.loaded], f)\n        }\n      },\n      breakpoints: {\n        _: (0, i.createLeaf)([\"/state\"], function (e) {\n          return e.breakpoints;\n        }),\n        resolver: (0, i.createLeaf)([s.default.info.sources, s.default.views.findOverlappingRange], function (e, t) {\n          return function (n) {\n            var a;\n\n            if (void 0 === n.node) {\n              var _i4 = n.line;\n              d(\"breakpoint: %O\", n), d(\"sources: %o\", e);\n\n              var _e$n$compilationId$by = e[n.compilationId].byId[n.sourceId],\n                  _o = _e$n$compilationId$by.source,\n                  _l2 = _e$n$compilationId$by.ast,\n                  _s = t[n.compilationId][n.sourceId],\n                  _c = _o.split(\"\\n\").map(function (e) {\n                return e.length;\n              }),\n                  _u3 = [0];\n\n              var _iterator6 = _createForOfIteratorHelper(_c),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var _e23 = _step6.value;\n\n                  _u3.push(_u3[_u3.length - 1] + _e23 + 1);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              for (d(\"line: %s\", _o.slice(_u3[_i4], _u3[_i4] + _c[_i4])); _i4 < _c.length && !p(_s, 0, _u3[_i4], _c[_i4]);) {\n                d(\"incrementing\"), _i4++;\n              }\n\n              a = _i4 >= _c.length ? null : (0, r.default)({}, n, {\n                line: _i4\n              });\n            } else d(\"node-based breakpoint\"), a = n;\n\n            return a;\n          };\n        })\n      },\n      finished: (0, i.createLeaf)([\"/current/trace/finished\"], function (e) {\n        return e;\n      }),\n      isStepping: (0, i.createLeaf)([\"./state\"], function (e) {\n        return e.isStepping;\n      })\n    });\n    t.default = y;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = o(n(0)),\n        a = n(4),\n        i = o(n(10));\n\n    function o(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    (0, r.default)(\"debugger:ast:selectors\");\n    var l = (0, a.createSelectorTree)({\n      views: {\n        sources: (0, a.createLeaf)([i.default.info.sources], function (e) {\n          return e;\n        })\n      }\n    });\n    t.default = l;\n  }, function (e, t) {\n    e.exports = require(\"lodash.flatten\");\n  }, function (e, t) {\n    e.exports = require(\"semver\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.scope = function (e, t, n, a, i) {\n      return {\n        type: r,\n        id: e,\n        pointer: t,\n        parentId: n,\n        sourceId: a,\n        compilationId: i\n      };\n    }, t.declare = function (e, t, n, r) {\n      return {\n        type: a,\n        name: e,\n        astRef: t,\n        scopeAstRef: n,\n        compilationId: r\n      };\n    }, t.assign = function (e) {\n      return {\n        type: i,\n        assignments: e\n      };\n    }, t.mapPathAndAssign = function (e, t, n, r, a) {\n      return {\n        type: o,\n        address: e,\n        slot: t,\n        assignments: n,\n        typeIdentifier: r,\n        parentType: a\n      };\n    }, t.reset = function () {\n      return {\n        type: l\n      };\n    }, t.defineType = function (e, t) {\n      return {\n        type: s,\n        node: e,\n        compilationId: t\n      };\n    }, t.allocate = function (e, t, n, r, a) {\n      return {\n        type: c,\n        storage: e,\n        memory: t,\n        abi: n,\n        calldata: r,\n        state: a\n      };\n    };\n    var r = t.SCOPE = \"DATA_SCOPE\";\n    var a = t.DECLARE = \"DATA_DECLARE_VARIABLE\";\n    var i = t.ASSIGN = \"DATA_ASSIGN\";\n    var o = t.MAP_PATH_AND_ASSIGN = \"DATA_MAP_PATH_AND_ASSIGN\";\n    var l = t.RESET = \"DATA_RESET\";\n    var s = t.DEFINE_TYPE = \"DATA_DEFINE_TYPE\";\n    var c = t.ALLOCATE = \"DATA_ALLOCATE\";\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/set\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.addContext = function (_ref120) {\n      var e = _ref120.context,\n          t = _ref120.contractName,\n          n = _ref120.binary,\n          a = _ref120.sourceMap,\n          i = _ref120.primarySource,\n          o = _ref120.immutableReferences,\n          l = _ref120.compiler,\n          s = _ref120.compilationId,\n          c = _ref120.abi,\n          u = _ref120.contractId,\n          d = _ref120.contractKind,\n          f = _ref120.isConstructor,\n          p = _ref120.externalSolidity;\n      return {\n        type: r,\n        context: e,\n        contractName: t,\n        binary: n,\n        sourceMap: a,\n        primarySource: i,\n        immutableReferences: o,\n        compiler: l,\n        compilationId: s,\n        abi: c,\n        contractId: u,\n        contractKind: d,\n        isConstructor: f,\n        externalSolidity: p\n      };\n    }, t.addInstance = function (e, t, n) {\n      return {\n        type: a,\n        address: e,\n        context: t,\n        binary: n\n      };\n    }, t.refreshInstances = function (e, t) {\n      return {\n        type: i,\n        address: e,\n        context: t\n      };\n    }, t.saveGlobals = function (e, t, n) {\n      return {\n        type: o,\n        origin: e,\n        gasprice: t,\n        block: n\n      };\n    }, t.saveStatus = function (e) {\n      return {\n        type: l,\n        status: e\n      };\n    }, t.call = function (e, t, n, r, a) {\n      return {\n        type: s,\n        address: e,\n        data: t,\n        storageAddress: n,\n        sender: r,\n        value: a\n      };\n    }, t.create = function (e, t, n, r) {\n      return {\n        type: c,\n        binary: e,\n        storageAddress: t,\n        sender: n,\n        value: r\n      };\n    }, t.returnCall = function () {\n      return {\n        type: u\n      };\n    }, t.returnCreate = function (e, t, n) {\n      return {\n        type: d,\n        address: e,\n        code: t,\n        context: n\n      };\n    }, t.fail = function () {\n      return {\n        type: f\n      };\n    }, t.store = function (e, t, n) {\n      return {\n        type: p,\n        address: e,\n        slot: t,\n        value: n\n      };\n    }, t.load = function (e, t, n) {\n      return {\n        type: y,\n        address: e,\n        slot: t,\n        value: n\n      };\n    }, t.reset = function (e) {\n      return {\n        type: m,\n        storageAddress: e\n      };\n    }, t.unloadTransaction = function () {\n      return {\n        type: g\n      };\n    };\n    var r = t.ADD_CONTEXT = \"EVM_ADD_CONTEXT\";\n    var a = t.ADD_INSTANCE = \"EVM_ADD_INSTANCE\";\n    var i = t.REFRESH_INSTANCE = \"EVM_REFRESH_INSTANCE\";\n    var o = t.SAVE_GLOBALS = \"EVM_SAVE_GLOBALS\";\n    var l = t.SAVE_STATUS = \"EVM_SAVE_STATUS\";\n    var s = t.CALL = \"EVM_CALL\";\n    var c = t.CREATE = \"EVM_CREATE\";\n    var u = t.RETURN_CALL = \"EVM_RETURN_CALL\";\n    var d = t.RETURN_CREATE = \"EVM_RETURN_CREATE\";\n    var f = t.FAIL = \"EVM_FAIL\";\n    var p = t.STORE = \"EVM_STORE\";\n    var y = t.LOAD = \"EVM_LOAD\";\n    var m = t.RESET = \"EVM_RESET\";\n    var g = t.UNLOAD_TRANSACTION = \"EVM_UNLOAD_TRANSACTION\";\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(b),\n        _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(A),\n        _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(T),\n        _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(E);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = y(n(2));\n    t.inspectTransaction = /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(e) {\n      var t, n, _yield3, r, a, o, s, c, u, d, f, p;\n\n      return _regeneratorRuntime.wrap(function _callee25$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return (0, i.put)(l.inspect(e));\n\n            case 2:\n              _context34.next = 4;\n              return (0, i.take)([l.RECEIVE_TRACE, l.ERROR_WEB3]);\n\n            case 4:\n              t = _context34.sent;\n\n              if (!(m(\"action %o\", t), t.type != l.RECEIVE_TRACE)) {\n                _context34.next = 7;\n                break;\n              }\n\n              return _context34.abrupt(\"return\", {\n                error: t.error\n              });\n\n            case 7:\n              n = t.trace, m(\"received trace\");\n              _context34.next = 10;\n              return (0, i.take)(l.RECEIVE_CALL);\n\n            case 10:\n              _yield3 = _context34.sent;\n              r = _yield3.address;\n              a = _yield3.binary;\n              o = _yield3.data;\n              s = _yield3.storageAddress;\n              c = _yield3.status;\n              u = _yield3.sender;\n              d = _yield3.value;\n              f = _yield3.gasprice;\n              p = _yield3.block;\n              return _context34.abrupt(\"return\", (m(\"received call\"), {\n                trace: n,\n                address: r,\n                binary: a,\n                data: o,\n                storageAddress: s,\n                status: c,\n                sender: u,\n                value: d,\n                gasprice: f,\n                block: p\n              }));\n\n            case 21:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee25);\n    }), t.obtainBinaries = /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(e, t) {\n      var n, r;\n      return _regeneratorRuntime.wrap(function _callee26$(_context35) {\n        while (1) {\n          switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return (0, i.all)(e.map(function (e) {\n                return (0, i.fork)(T, e);\n              }));\n\n            case 2:\n              n = _context35.sent;\n              m(\"requesting binaries\");\n              _context35.next = 6;\n              return (0, i.all)(e.map(function (e) {\n                return (0, i.put)(l.fetchBinary(e, t));\n              }));\n\n            case 6:\n              r = [];\n              _context35.next = 9;\n              return (0, i.join)(n);\n\n            case 9:\n              r = _context35.sent;\n              m(\"binaries %o\", r);\n              return _context35.abrupt(\"return\", r);\n\n            case 12:\n            case \"end\":\n              return _context35.stop();\n          }\n        }\n      }, _callee26);\n    }), t.init = /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(e) {\n      return _regeneratorRuntime.wrap(function _callee27$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return (0, i.put)(l.init(e));\n\n            case 2:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, _callee27);\n    }), t.saga = E;\n    var a = y(n(0)),\n        i = n(5),\n        o = n(1),\n        l = p(n(52)),\n        s = p(n(14)),\n        c = y(n(17)),\n        u = y(n(33)),\n        d = p(n(3)),\n        f = y(n(53));\n\n    function p(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function y(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var m = (0, a.default)(\"debugger:web3:sagas\");\n\n    function g(e) {\n      return e.startsWith(\"0x\") ? e.slice(2).padStart(2 * d.Evm.Utils.WORD_SIZE, \"0\") : e;\n    }\n\n    function b(e, _ref121) {\n      var t, n, a, o, f, p, _e24;\n\n      return _regeneratorRuntime.wrap(function b$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              t = _ref121.txHash;\n              m(\"inspecting transaction\");\n              _context37.prev = 2;\n              _context37.next = 5;\n              return (0, i.apply)(e, e.getTrace, [t]);\n\n            case 5:\n              n = _context37.sent;\n              _context37.next = 14;\n              break;\n\n            case 8:\n              _context37.prev = 8;\n              _context37.t0 = _context37[\"catch\"](2);\n              m(\"putting error\");\n              _context37.next = 13;\n              return (0, i.put)(l.error(_context37.t0));\n\n            case 13:\n              return _context37.abrupt(\"return\", void _context37.sent);\n\n            case 14:\n              m(\"got trace\");\n              n = n.map(function (e) {\n                return (0, r.default)({}, e, {\n                  stack: e.stack.map(g),\n                  memory: e.memory.map(g)\n                });\n              });\n              _context37.next = 18;\n              return (0, i.put)(l.receiveTrace(n));\n\n            case 18:\n              _context37.next = 20;\n              return (0, i.apply)(e, e.getTransaction, [t]);\n\n            case 20:\n              a = _context37.sent;\n              m(\"tx %O\", a);\n              _context37.next = 24;\n              return (0, i.apply)(e, e.getReceipt, [t]);\n\n            case 24:\n              o = _context37.sent;\n              m(\"receipt %O\", o);\n              _context37.next = 28;\n              return (0, i.apply)(e, e.getBlock, [a.blockNumber]);\n\n            case 28:\n              f = _context37.sent;\n              m(\"block %O\", f);\n              _context37.next = 32;\n              return (0, i.put)(s.saveTransaction(a));\n\n            case 32:\n              _context37.next = 34;\n              return (0, i.put)(s.saveReceipt(o));\n\n            case 34:\n              _context37.next = 36;\n              return (0, i.put)(s.saveBlock(f));\n\n            case 36:\n              p = {\n                coinbase: f.miner,\n                difficulty: new c.default(f.difficulty),\n                gaslimit: new c.default(f.gasLimit),\n                number: new c.default(f.number),\n                timestamp: new c.default(f.timestamp)\n              };\n\n              if (!(null != a.to)) {\n                _context37.next = 42;\n                break;\n              }\n\n              _context37.next = 40;\n              return (0, i.put)(l.receiveCall({\n                address: a.to,\n                data: a.input,\n                storageAddress: a.to,\n                status: o.status,\n                sender: a.from,\n                value: new c.default(a.value),\n                gasprice: new c.default(a.gasPrice),\n                block: p\n              }));\n\n            case 40:\n              _context37.next = 45;\n              break;\n\n            case 42:\n              _e24 = u.default.utils.isAddress(o.contractAddress) ? o.contractAddress : d.Evm.Utils.ZERO_ADDRESS;\n              _context37.next = 45;\n              return (0, i.put)(l.receiveCall({\n                binary: a.input,\n                storageAddress: _e24,\n                status: o.status,\n                sender: a.from,\n                value: new c.default(a.value),\n                gasprice: new c.default(a.gasPrice),\n                block: p\n              }));\n\n            case 45:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, _marked10, null, [[2, 8]]);\n    }\n\n    function A(e, _ref122) {\n      var t, n, r;\n      return _regeneratorRuntime.wrap(function A$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              t = _ref122.address, n = _ref122.block;\n              m(\"fetching binary for %s\", t);\n              _context38.next = 4;\n              return (0, i.apply)(e, e.getDeployedCode, [t, n]);\n\n            case 4:\n              r = _context38.sent;\n              m(\"received binary for %s\", t);\n              _context38.next = 8;\n              return (0, i.put)(l.receiveBinary(t, r));\n\n            case 8:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, _marked11);\n    }\n\n    function T(e) {\n      var _yield4, t;\n\n      return _regeneratorRuntime.wrap(function T$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return (0, i.take)(function (t) {\n                return t.type == l.RECEIVE_BINARY && t.address == e;\n              });\n\n            case 2:\n              _yield4 = _context39.sent;\n              t = _yield4.binary;\n              return _context39.abrupt(\"return\", (m(\"got binary for %s\", e), t));\n\n            case 5:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, _marked12);\n    }\n\n    function E() {\n      var _yield5, e, t;\n\n      return _regeneratorRuntime.wrap(function E$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return (0, i.take)(l.INIT_WEB3);\n\n            case 2:\n              _yield5 = _context40.sent;\n              e = _yield5.provider;\n              t = new f.default(e);\n              _context40.next = 7;\n              return (0, i.takeEvery)(l.INSPECT, b, t);\n\n            case 7:\n              _context40.next = 9;\n              return (0, i.takeEvery)(l.FETCH_BINARY, A, t);\n\n            case 9:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, _marked13);\n    }\n\n    t.default = (0, o.prefixName)(\"web3\", E);\n  }, function (e, t) {\n    e.exports = require(\"web3\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _b;\n\n    var _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(A),\n        _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(T),\n        _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(E),\n        _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(_);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = m(n(35));\n    t.saga = A, t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n      return _regeneratorRuntime.wrap(function _callee28$(_context41) {\n        while (1) {\n          switch (_context41.prev = _context41.next) {\n            case 0:\n              return _context41.delegateYield(s.reset(), \"t0\", 1);\n\n            case 1:\n              return _context41.delegateYield(c.reset(), \"t1\", 2);\n\n            case 2:\n              return _context41.delegateYield(u.reset(), \"t2\", 3);\n\n            case 3:\n              return _context41.delegateYield(l.reset(), \"t3\", 4);\n\n            case 4:\n              return _context41.delegateYield(d.reset(), \"t4\", 5);\n\n            case 5:\n            case \"end\":\n              return _context41.stop();\n          }\n        }\n      }, _callee28);\n    });\n    var a = m(n(0)),\n        i = n(5),\n        o = n(1),\n        l = y(n(13)),\n        s = y(n(18)),\n        c = y(n(24)),\n        u = y(n(36)),\n        d = y(n(38)),\n        f = y(n(20)),\n        p = m(n(25));\n\n    function y(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function m(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var g = (0, a.default)(\"debugger:controller:sagas\"),\n        b = (_b = {}, _defineProperty(_b, f.ADVANCE, T), _defineProperty(_b, f.STEP_NEXT, E), _defineProperty(_b, f.STEP_OVER, _), _defineProperty(_b, f.STEP_INTO, /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n      var e, t, n, r, a;\n      return _regeneratorRuntime.wrap(function _callee29$(_context42) {\n        while (1) {\n          switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 2:\n              e = _context42.sent;\n              _context42.next = 5;\n              return (0, i.select)(p.default.current.location);\n\n            case 5:\n              t = _context42.sent;\n              g(\"startingDepth: %d\", e), g(\"starting source range: %O\", (t || {}).sourceRange);\n\n            case 7:\n              return _context42.delegateYield(E(), \"t0\", 8);\n\n            case 8:\n              _context42.next = 10;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 10:\n              n = _context42.sent;\n              _context42.next = 13;\n              return (0, i.select)(p.default.current.location);\n\n            case 13:\n              r = _context42.sent;\n              _context42.next = 16;\n              return (0, i.select)(p.default.current.trace.finished);\n\n            case 16:\n              a = _context42.sent;\n              g(\"currentDepth: %d\", n);\n              g(\"current source range: %O\", (r || {}).sourceRange);\n              g(\"finished: %o\", a);\n\n            case 20:\n              if (!a && n <= e && r.source.compilationId === t.source.compilationId && r.source.id === t.source.id && r.sourceRange.lines.start.line === t.sourceRange.lines.start.line) {\n                _context42.next = 7;\n                break;\n              }\n\n            case 21:\n            case \"end\":\n              return _context42.stop();\n          }\n        }\n      }, _callee29);\n    })), _defineProperty(_b, f.STEP_OUT, /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n      var e, t, n;\n      return _regeneratorRuntime.wrap(function _callee30$(_context43) {\n        while (1) {\n          switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return (0, i.select)(p.default.current.location.isMultiline);\n\n            case 2:\n              if (!_context43.sent) {\n                _context43.next = 5;\n                break;\n              }\n\n              return _context43.delegateYield(_(), \"t0\", 4);\n\n            case 4:\n              return _context43.abrupt(\"return\", void _context43.t0);\n\n            case 5:\n              _context43.next = 7;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 7:\n              e = _context43.sent;\n\n            case 8:\n              return _context43.delegateYield(E(), \"t1\", 9);\n\n            case 9:\n              _context43.next = 11;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 11:\n              t = _context43.sent;\n              _context43.next = 14;\n              return (0, i.select)(p.default.current.trace.finished);\n\n            case 14:\n              n = _context43.sent;\n\n            case 15:\n              if (!n && t >= e) {\n                _context43.next = 8;\n                break;\n              }\n\n            case 16:\n            case \"end\":\n              return _context43.stop();\n          }\n        }\n      }, _callee30);\n    })), _defineProperty(_b, f.CONTINUE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(e) {\n      var t, n, r, a, o, l, _loop, _ret;\n\n      return _regeneratorRuntime.wrap(function _callee31$(_context45) {\n        while (1) {\n          switch (_context45.prev = _context45.next) {\n            case 0:\n              if (!(void 0 !== e && void 0 !== e.breakpoints)) {\n                _context45.next = 4;\n                break;\n              }\n\n              _context45.t0 = e.breakpoints;\n              _context45.next = 7;\n              break;\n\n            case 4:\n              _context45.next = 6;\n              return (0, i.select)(p.default.breakpoints);\n\n            case 6:\n              _context45.t0 = _context45.sent;\n\n            case 7:\n              t = _context45.t0;\n              n = !1;\n              _context45.next = 11;\n              return (0, i.select)(p.default.current.location);\n\n            case 11:\n              r = _context45.sent;\n              a = r.sourceRange.lines.start.line;\n              o = r.source.id;\n              l = r.source.compilationId;\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var e, s, c;\n                return _regeneratorRuntime.wrap(function _loop$(_context44) {\n                  while (1) {\n                    switch (_context44.prev = _context44.next) {\n                      case 0:\n                        return _context44.delegateYield(E(), \"t0\", 1);\n\n                      case 1:\n                        e = a, s = o;\n                        _context44.next = 4;\n                        return (0, i.select)(p.default.current.location);\n\n                      case 4:\n                        r = _context44.sent;\n                        g(\"currentLocation: %O\", r);\n                        _context44.next = 8;\n                        return (0, i.select)(p.default.current.trace.finished);\n\n                      case 8:\n                        if (!_context44.sent) {\n                          _context44.next = 10;\n                          break;\n                        }\n\n                        return _context44.abrupt(\"return\", \"break\");\n\n                      case 10:\n                        if (!(o = r.source.id, void 0 === o)) {\n                          _context44.next = 12;\n                          break;\n                        }\n\n                        return _context44.abrupt(\"return\", \"continue\");\n\n                      case 12:\n                        l = r.source.compilationId;\n                        c = r.node.id;\n                        a = r.sourceRange.lines.start.line, n = t.filter(function (_ref123) {\n                          var t = _ref123.sourceId,\n                              n = _ref123.compilationId,\n                              r = _ref123.line,\n                              i = _ref123.node;\n                          return void 0 !== i ? n === l && t === o && i === c : n === l && t === o && r === a && (o !== s || a !== e);\n                        }).length > 0;\n\n                      case 15:\n                      case \"end\":\n                        return _context44.stop();\n                    }\n                  }\n                }, _loop);\n              });\n\n            case 16:\n              return _context45.delegateYield(_loop(), \"t1\", 17);\n\n            case 17:\n              _ret = _context45.t1;\n\n              if (!(_ret === \"break\")) {\n                _context45.next = 20;\n                break;\n              }\n\n              return _context45.abrupt(\"break\", 23);\n\n            case 20:\n              if (!(_ret === \"continue\")) {\n                _context45.next = 22;\n                break;\n              }\n\n              return _context45.abrupt(\"continue\", 22);\n\n            case 22:\n              if (!n) {\n                _context45.next = 16;\n                break;\n              }\n\n            case 23:\n            case \"end\":\n              return _context45.stop();\n          }\n        }\n      }, _callee31);\n    })), _b);\n\n    function A() {\n      var _e25, t;\n\n      return _regeneratorRuntime.wrap(function A$(_context46) {\n        while (1) {\n          switch (_context46.prev = _context46.next) {\n            case 0:\n              g(\"waiting for control action\");\n              _context46.next = 3;\n              return (0, i.take)((0, r.default)(b));\n\n            case 3:\n              _e25 = _context46.sent;\n              _context46.next = 6;\n              return (0, i.select)(p.default.current.trace.loaded);\n\n            case 6:\n              if (_context46.sent) {\n                _context46.next = 8;\n                break;\n              }\n\n              return _context46.abrupt(\"continue\", 16);\n\n            case 8:\n              g(\"got control action\");\n              t = b[_e25.type];\n              _context46.next = 12;\n              return (0, i.put)(f.startStepping());\n\n            case 12:\n              _context46.next = 14;\n              return (0, i.race)({\n                exec: (0, i.call)(t, _e25),\n                interrupt: (0, i.take)(f.INTERRUPT)\n              });\n\n            case 14:\n              _context46.next = 16;\n              return (0, i.put)(f.doneStepping());\n\n            case 16:\n              _context46.next = 0;\n              break;\n\n            case 18:\n            case \"end\":\n              return _context46.stop();\n          }\n        }\n      }, _marked14);\n    }\n\n    function T(e) {\n      var t, _e26;\n\n      return _regeneratorRuntime.wrap(function T$(_context47) {\n        while (1) {\n          switch (_context47.prev = _context47.next) {\n            case 0:\n              t = void 0 !== e && void 0 !== e.count ? e.count : 1;\n              _e26 = 0;\n\n            case 2:\n              _context47.t0 = _e26 < t;\n\n              if (!_context47.t0) {\n                _context47.next = 7;\n                break;\n              }\n\n              _context47.next = 6;\n              return (0, i.select)(p.default.current.trace.finished);\n\n            case 6:\n              _context47.t0 = !_context47.sent;\n\n            case 7:\n              if (!_context47.t0) {\n                _context47.next = 12;\n                break;\n              }\n\n              return _context47.delegateYield(l.advance(), \"t1\", 9);\n\n            case 9:\n              _e26++;\n              _context47.next = 2;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context47.stop();\n          }\n        }\n      }, _marked15);\n    }\n\n    function E() {\n      var e, t, n;\n      return _regeneratorRuntime.wrap(function E$(_context48) {\n        while (1) {\n          switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.next = 2;\n              return (0, i.select)(p.default.current.location);\n\n            case 2:\n              e = _context48.sent;\n\n            case 3:\n              return _context48.delegateYield(T(), \"t0\", 4);\n\n            case 4:\n              _context48.next = 6;\n              return (0, i.select)(p.default.current.location);\n\n            case 6:\n              t = _context48.sent;\n              _context48.next = 9;\n              return (0, i.select)(p.default.current.trace.finished);\n\n            case 9:\n              n = _context48.sent;\n\n            case 10:\n              if (!n && (!t || !t.node || (0, o.isDeliberatelySkippedNodeType)(t.node) || t.sourceRange.start === e.sourceRange.start && t.sourceRange.length === e.sourceRange.length && t.source.id === e.source.id && t.source.compilationId === e.source.compilationId)) {\n                _context48.next = 3;\n                break;\n              }\n\n            case 11:\n            case \"end\":\n              return _context48.stop();\n          }\n        }\n      }, _marked16);\n    }\n\n    function _() {\n      var e, t, n, r, a;\n      return _regeneratorRuntime.wrap(function _$(_context49) {\n        while (1) {\n          switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.next = 2;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 2:\n              e = _context49.sent;\n              _context49.next = 5;\n              return (0, i.select)(p.default.current.location);\n\n            case 5:\n              t = _context49.sent;\n\n            case 6:\n              return _context49.delegateYield(E(), \"t0\", 7);\n\n            case 7:\n              _context49.next = 9;\n              return (0, i.select)(p.default.current.functionDepth);\n\n            case 9:\n              n = _context49.sent;\n              _context49.next = 12;\n              return (0, i.select)(p.default.current.location);\n\n            case 12:\n              r = _context49.sent;\n              _context49.next = 15;\n              return (0, i.select)(p.default.current.trace.finished);\n\n            case 15:\n              a = _context49.sent;\n\n            case 16:\n              if (!a && n >= e && (n > e || r.source.id === t.source.id && r.source.compilationId === t.source.compilationId && r.sourceRange.lines.start.line === t.sourceRange.lines.start.line)) {\n                _context49.next = 6;\n                break;\n              }\n\n            case 17:\n            case \"end\":\n              return _context49.stop();\n          }\n        }\n      }, _marked17);\n    }\n\n    t.default = (0, o.prefixName)(\"controller\", A);\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/object/keys\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(p),\n        _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(y);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.addSources = /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(e) {\n      return _regeneratorRuntime.wrap(function _callee32$(_context50) {\n        while (1) {\n          switch (_context50.prev = _context50.next) {\n            case 0:\n              _context50.next = 2;\n              return (0, a.put)(o.addSources(e));\n\n            case 2:\n            case \"end\":\n              return _context50.stop();\n          }\n        }\n      }, _callee32);\n    }), t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n      var e;\n      return _regeneratorRuntime.wrap(function _callee33$(_context51) {\n        while (1) {\n          switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return (0, a.select)(c.default.transaction.bottomStackframeRequiresPhantomFrame);\n\n            case 2:\n              e = _context51.sent;\n              _context51.next = 5;\n              return (0, a.put)(o.reset(e));\n\n            case 5:\n            case \"end\":\n              return _context51.stop();\n          }\n        }\n      }, _callee33);\n    }), t.unload = /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n      return _regeneratorRuntime.wrap(function _callee34$(_context52) {\n        while (1) {\n          switch (_context52.prev = _context52.next) {\n            case 0:\n              _context52.next = 2;\n              return (0, a.put)(o.unloadTransaction());\n\n            case 2:\n            case \"end\":\n              return _context52.stop();\n          }\n        }\n      }, _callee34);\n    }), t.begin = /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n      var e;\n      return _regeneratorRuntime.wrap(function _callee35$(_context53) {\n        while (1) {\n          switch (_context53.prev = _context53.next) {\n            case 0:\n              _context53.next = 2;\n              return (0, a.select)(c.default.transaction.bottomStackframeRequiresPhantomFrame);\n\n            case 2:\n              e = _context53.sent;\n              _context53.next = 5;\n              return (0, a.put)(o.externalCall(e));\n\n            case 5:\n            case \"end\":\n              return _context53.stop();\n          }\n        }\n      }, _callee35);\n    }), t.saga = y;\n    var r = d(n(0)),\n        a = n(5),\n        i = n(1),\n        o = u(n(37)),\n        l = n(12),\n        s = u(n(13)),\n        c = d(n(10));\n\n    function u(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function d(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var f = (0, r.default)(\"debugger:solidity:sagas\");\n\n    function p() {\n      return _regeneratorRuntime.wrap(function p$(_context55) {\n        while (1) {\n          switch (_context55.prev = _context55.next) {\n            case 0:\n              f(\"got TICK\");\n              return _context55.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36() {\n                var _e27, _t17, _n14, _e28;\n\n                return _regeneratorRuntime.wrap(function _callee36$(_context54) {\n                  while (1) {\n                    switch (_context54.prev = _context54.next) {\n                      case 0:\n                        _context54.next = 2;\n                        return (0, a.select)(c.default.current.willReturn);\n\n                      case 2:\n                        if (!_context54.sent) {\n                          _context54.next = 7;\n                          break;\n                        }\n\n                        _context54.next = 5;\n                        return (0, a.put)(o.externalReturn());\n\n                      case 5:\n                        _context54.next = 38;\n                        break;\n\n                      case 7:\n                        _context54.next = 9;\n                        return (0, a.select)(c.default.current.willJump);\n\n                      case 9:\n                        if (!_context54.sent) {\n                          _context54.next = 29;\n                          break;\n                        }\n\n                        _context54.next = 12;\n                        return (0, a.select)(c.default.current.jumpDirection);\n\n                      case 12:\n                        _e27 = _context54.sent;\n                        f(\"checking guard\");\n                        _context54.next = 16;\n                        return (0, a.select)(c.default.current.nextFrameIsPhantom);\n\n                      case 16:\n                        _t17 = _context54.sent;\n                        _context54.next = 19;\n                        return (0, a.select)(c.default.next.source);\n\n                      case 19:\n                        _n14 = _context54.sent;\n\n                        if (!(\"i\" === _e27 && _t17 && void 0 !== _n14.id)) {\n                          _context54.next = 25;\n                          break;\n                        }\n\n                        _context54.next = 23;\n                        return (0, a.put)(o.clearPhantomGuard());\n\n                      case 23:\n                        _context54.next = 27;\n                        break;\n\n                      case 25:\n                        _context54.next = 27;\n                        return (0, a.put)(o.jump(_e27));\n\n                      case 27:\n                        _context54.next = 38;\n                        break;\n\n                      case 29:\n                        _context54.next = 31;\n                        return (0, a.select)(c.default.current.willCall);\n\n                      case 31:\n                        if (!_context54.sent) {\n                          _context54.next = 38;\n                          break;\n                        }\n\n                        f(\"checking if guard needed\");\n                        _context54.next = 35;\n                        return (0, a.select)(c.default.current.callRequiresPhantomFrame);\n\n                      case 35:\n                        _e28 = _context54.sent;\n                        _context54.next = 38;\n                        return (0, a.put)(o.externalCall(_e28));\n\n                      case 38:\n                      case \"end\":\n                        return _context54.stop();\n                    }\n                  }\n                }, _callee36);\n              })(), \"t0\", 2);\n\n            case 2:\n              _context55.t1 = f;\n              _context55.next = 5;\n              return (0, a.select)(c.default.current.instruction);\n\n            case 5:\n              _context55.t2 = _context55.sent;\n              (0, _context55.t1)(\"instruction: %O\", _context55.t2);\n              return _context55.delegateYield(s.signalTickSagaCompletion(), \"t3\", 8);\n\n            case 8:\n            case \"end\":\n              return _context55.stop();\n          }\n        }\n      }, _marked18);\n    }\n\n    function y() {\n      return _regeneratorRuntime.wrap(function y$(_context56) {\n        while (1) {\n          switch (_context56.prev = _context56.next) {\n            case 0:\n              _context56.next = 2;\n              return (0, a.takeEvery)(l.TICK, p);\n\n            case 2:\n            case \"end\":\n              return _context56.stop();\n          }\n        }\n      }, _marked19);\n    }\n\n    t.default = (0, i.prefixName)(\"solidity\", y);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.addSources = function (e) {\n      return {\n        type: r,\n        compilations: e\n      };\n    }, t.jump = function (e) {\n      return {\n        type: a,\n        jumpDirection: e\n      };\n    }, t.externalCall = function (e) {\n      return {\n        type: i,\n        guard: e\n      };\n    }, t.externalReturn = function () {\n      return {\n        type: o\n      };\n    }, t.clearPhantomGuard = function () {\n      return {\n        type: l\n      };\n    }, t.reset = function (e) {\n      return {\n        type: s,\n        guard: e\n      };\n    }, t.unloadTransaction = function () {\n      return {\n        type: c\n      };\n    };\n    var r = t.ADD_SOURCES = \"SOLIDITY_ADD_SOURCES\";\n    var a = t.JUMP = \"SOLIDITY_JUMP\";\n    var i = t.EXTERNAL_CALL = \"SOLIDITY_EXTERNAL_CALL\";\n    var o = t.EXTERNAL_RETURN = \"SOLIDITY_EXTERNAL_RETURN\";\n    var l = t.CLEAR_PHANTOM_GUARD = \"SOLIDITY_CLEAR_PHANTOM_GUARD\";\n    var s = t.RESET = \"SOLIDITY_RESET\";\n    var c = t.UNLOAD_TRANSACTION = \"SOLIDITY_UNLOAD_TRANSACTION\";\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(p),\n        _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(y);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.reset = /*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n      return _regeneratorRuntime.wrap(function _callee37$(_context57) {\n        while (1) {\n          switch (_context57.prev = _context57.next) {\n            case 0:\n              _context57.next = 2;\n              return (0, a.put)(o.reset());\n\n            case 2:\n            case \"end\":\n              return _context57.stop();\n          }\n        }\n      }, _callee37);\n    }), t.unload = /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n      return _regeneratorRuntime.wrap(function _callee38$(_context58) {\n        while (1) {\n          switch (_context58.prev = _context58.next) {\n            case 0:\n              _context58.next = 2;\n              return (0, a.put)(o.unloadTransaction());\n\n            case 2:\n            case \"end\":\n              return _context58.stop();\n          }\n        }\n      }, _callee38);\n    }), t.begin = /*#__PURE__*/_regeneratorRuntime.mark(function _callee39() {\n      var e, t;\n      return _regeneratorRuntime.wrap(function _callee39$(_context59) {\n        while (1) {\n          switch (_context59.prev = _context59.next) {\n            case 0:\n              _context59.next = 2;\n              return (0, a.select)(c.default.current.context);\n\n            case 2:\n              e = _context59.sent;\n              _context59.next = 5;\n              return (0, a.select)(c.default.current.address);\n\n            case 5:\n              t = _context59.sent;\n              _context59.next = 8;\n              return (0, a.put)(o.externalCall(null, e, t));\n\n            case 8:\n            case \"end\":\n              return _context59.stop();\n          }\n        }\n      }, _callee39);\n    }), t.saga = y;\n    var r = d(n(0)),\n        a = n(5),\n        i = n(1),\n        o = u(n(39)),\n        l = n(12),\n        s = u(n(13)),\n        c = d(n(22));\n\n    function u(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function d(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var f = (0, r.default)(\"debugger:stacktrace:sagas\");\n\n    function p() {\n      return _regeneratorRuntime.wrap(function p$(_context61) {\n        while (1) {\n          switch (_context61.prev = _context61.next) {\n            case 0:\n              return _context61.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40() {\n                var e, t, n, r, _n15, _t18, _n16, _t19, _n17;\n\n                return _regeneratorRuntime.wrap(function _callee40$(_context60) {\n                  while (1) {\n                    switch (_context60.prev = _context60.next) {\n                      case 0:\n                        _context60.next = 2;\n                        return (0, a.select)(c.default.current.strippedLocation);\n\n                      case 2:\n                        e = _context60.sent;\n                        _context60.next = 5;\n                        return (0, a.select)(c.default.current.lastPosition);\n\n                      case 5:\n                        t = _context60.sent;\n                        _context60.next = 8;\n                        return (0, a.select)(c.default.current.returnCounter);\n\n                      case 8:\n                        n = _context60.sent;\n                        r = !1;\n                        _context60.next = 12;\n                        return (0, a.select)(c.default.current.willReturn);\n\n                      case 12:\n                        if (!_context60.sent) {\n                          _context60.next = 22;\n                          break;\n                        }\n\n                        _context60.next = 15;\n                        return (0, a.select)(c.default.current.returnStatus);\n\n                      case 15:\n                        _n15 = _context60.sent;\n                        f(\"returning!\");\n                        _context60.next = 19;\n                        return (0, a.put)(o.externalReturn(t, _n15, e));\n\n                      case 19:\n                        r = !0;\n                        _context60.next = 39;\n                        break;\n\n                      case 22:\n                        _context60.t0 = n > 0;\n\n                        if (!_context60.t0) {\n                          _context60.next = 27;\n                          break;\n                        }\n\n                        _context60.next = 26;\n                        return (0, a.select)(c.default.current.positionWillChange);\n\n                      case 26:\n                        _context60.t0 = _context60.sent;\n\n                      case 27:\n                        _context60.t1 = _context60.t0;\n\n                        if (!_context60.t1) {\n                          _context60.next = 39;\n                          break;\n                        }\n\n                        f(\"executing!\");\n                        _context60.t2 = f;\n                        _context60.next = 33;\n                        return (0, a.select)(c.default.next.location);\n\n                      case 33:\n                        _context60.t3 = _context60.sent;\n                        (0, _context60.t2)(\"location: %o\", _context60.t3);\n                        f(\"marked: %o\", t);\n                        _context60.next = 38;\n                        return (0, a.put)(o.executeReturn(n, e));\n\n                      case 38:\n                        r = !0;\n\n                      case 39:\n                        _context60.next = 41;\n                        return (0, a.select)(c.default.current.willJumpIn);\n\n                      case 41:\n                        if (!_context60.sent) {\n                          _context60.next = 53;\n                          break;\n                        }\n\n                        _context60.next = 44;\n                        return (0, a.select)(c.default.next.location);\n\n                      case 44:\n                        _t18 = _context60.sent;\n                        _context60.next = 47;\n                        return (0, a.select)(c.default.next.contractNode);\n\n                      case 47:\n                        _n16 = _context60.sent;\n                        _context60.next = 50;\n                        return (0, a.put)(o.jumpIn(e, _t18.node, _n16));\n\n                      case 50:\n                        r = !0;\n                        _context60.next = 73;\n                        break;\n\n                      case 53:\n                        _context60.next = 55;\n                        return (0, a.select)(c.default.current.willJumpOut);\n\n                      case 55:\n                        if (!_context60.sent) {\n                          _context60.next = 61;\n                          break;\n                        }\n\n                        _context60.next = 58;\n                        return (0, a.put)(o.jumpOut(e));\n\n                      case 58:\n                        r = !0;\n                        _context60.next = 73;\n                        break;\n\n                      case 61:\n                        _context60.next = 63;\n                        return (0, a.select)(c.default.current.willCall);\n\n                      case 63:\n                        if (!_context60.sent) {\n                          _context60.next = 73;\n                          break;\n                        }\n\n                        _context60.next = 66;\n                        return (0, a.select)(c.default.current.callContext);\n\n                      case 66:\n                        _t19 = _context60.sent;\n                        _context60.next = 69;\n                        return (0, a.select)(c.default.current.callAddress);\n\n                      case 69:\n                        _n17 = _context60.sent;\n                        _context60.next = 72;\n                        return (0, a.put)(o.externalCall(e, _t19, _n17));\n\n                      case 72:\n                        r = !0;\n\n                      case 73:\n                        _context60.t4 = r;\n\n                        if (_context60.t4) {\n                          _context60.next = 77;\n                          break;\n                        }\n\n                        _context60.next = 77;\n                        return (0, a.put)(o.updatePosition(e));\n\n                      case 77:\n                      case \"end\":\n                        return _context60.stop();\n                    }\n                  }\n                }, _callee40);\n              })(), \"t0\", 1);\n\n            case 1:\n              return _context61.delegateYield(s.signalTickSagaCompletion(), \"t1\", 2);\n\n            case 2:\n            case \"end\":\n              return _context61.stop();\n          }\n        }\n      }, _marked20);\n    }\n\n    function y() {\n      return _regeneratorRuntime.wrap(function y$(_context62) {\n        while (1) {\n          switch (_context62.prev = _context62.next) {\n            case 0:\n              _context62.next = 2;\n              return (0, a.takeEvery)(l.TICK, p);\n\n            case 2:\n            case \"end\":\n              return _context62.stop();\n          }\n        }\n      }, _marked21);\n    }\n\n    t.default = (0, i.prefixName)(\"stacktrace\", y);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.jumpIn = function (e, t, n) {\n      return {\n        type: r,\n        location: e,\n        functionNode: t,\n        contractNode: n\n      };\n    }, t.jumpOut = function (e) {\n      return {\n        type: a,\n        location: e\n      };\n    }, t.externalCall = function (e, t, n) {\n      return {\n        type: i,\n        location: e,\n        context: t,\n        address: n\n      };\n    }, t.externalReturn = function (e, t, n) {\n      return {\n        type: o,\n        from: e,\n        status: t,\n        location: n\n      };\n    }, t.executeReturn = function (e, t) {\n      return {\n        type: l,\n        counter: e,\n        location: t\n      };\n    }, t.updatePosition = function (e) {\n      return {\n        type: s,\n        location: e\n      };\n    }, t.reset = function () {\n      return {\n        type: c\n      };\n    }, t.unloadTransaction = function () {\n      return {\n        type: u\n      };\n    };\n    var r = t.JUMP_IN = \"STACKTRACE_JUMP_IN\";\n    var a = t.JUMP_OUT = \"STACKTRACE_JUMP_OUT\";\n    var i = t.EXTERNAL_CALL = \"STACKTRACE_EXTERNAL_CALL\";\n    var o = t.EXTERNAL_RETURN = \"STACKTRACE_EXTERNAL_RETURN\";\n    var l = t.EXECUTE_RETURN = \"STACKTRACE_EXECUTE_RETURN\";\n    var s = t.UPDATE_POSITION = \"STACKTRACE_UPDATE_POSITION\";\n    var c = t.RESET = \"STACKTRACE_RESET\";\n    var u = t.UNLOAD_TRANSACTION = \"STACKTRACE_UNLOAD_TRANSACTION\";\n  }, function (e, t, n) {\n    n(41);\n    var r = n(42).default;\n    e.exports = r;\n  }, function (e, t) {\n    e.exports = require(\"source-map-support/register\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = g(n(19)),\n        a = g(n(0)),\n        i = g(n(43)),\n        o = n(4),\n        l = g(n(21)),\n        s = g(n(26)),\n        c = g(n(8)),\n        u = g(n(9)),\n        d = g(n(10)),\n        f = g(n(23)),\n        p = g(n(22)),\n        y = g(n(25)),\n        m = n(3);\n\n    function g(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var b = (0, a.default)(\"debugger\"),\n        A = {\n      forTx: (E = (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(e) {\n        var t,\n            n,\n            r,\n            a,\n            o,\n            l,\n            s,\n            _args63 = arguments;\n        return _regeneratorRuntime.wrap(function _callee41$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                t = _args63.length > 1 && _args63[1] !== undefined ? _args63[1] : {};\n                n = t.contracts, r = t.files, a = t.provider, o = t.compilations, l = t.lightMode;\n                o || (o = m.Compilations.Utils.shimArtifacts(n, r));\n                s = new i.default(o, a, {\n                  lightMode: l\n                }, e);\n                _context63.prev = 4;\n                _context63.next = 7;\n                return s.ready();\n\n              case 7:\n                b(\"session ready\");\n                _context63.next = 13;\n                break;\n\n              case 10:\n                _context63.prev = 10;\n                _context63.t0 = _context63[\"catch\"](4);\n                b(\"error occurred, unloaded\"), s.unload();\n\n              case 13:\n                return _context63.abrupt(\"return\", s);\n\n              case 14:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee41, null, [[4, 10]]);\n      })), function (e) {\n        return E.apply(this, arguments);\n      }),\n      forProject: (T = (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        var e,\n            t,\n            n,\n            r,\n            a,\n            o,\n            l,\n            _args64 = arguments;\n        return _regeneratorRuntime.wrap(function _callee42$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                e = _args64.length > 0 && _args64[0] !== undefined ? _args64[0] : {};\n                t = e.contracts, n = e.files, r = e.provider, a = e.compilations, o = e.lightMode;\n                a || (a = m.Compilations.Utils.shimArtifacts(t, n));\n                l = new i.default(a, r, {\n                  lightMode: o\n                });\n                _context64.next = 6;\n                return l.ready();\n\n              case 6:\n                return _context64.abrupt(\"return\", l);\n\n              case 7:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee42);\n      })), function () {\n        return T.apply(this, arguments);\n      }),\n\n      get selectors() {\n        return (0, o.createNestedSelector)({\n          ast: s.default,\n          data: l.default,\n          trace: c.default,\n          evm: u.default,\n          solidity: d.default,\n          stacktrace: p.default,\n          session: f.default,\n          controller: y.default\n        });\n      }\n\n    };\n    var T, E;\n    t.default = A;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r = h(n(6)),\n        a = h(n(11)),\n        i = h(n(2)),\n        o = h(n(19)),\n        l = h(n(44)),\n        s = h(n(0)),\n        c = L(n(3)),\n        u = n(1),\n        d = h(n(46)),\n        f = L(n(20)),\n        p = L(n(14)),\n        y = h(n(21)),\n        m = h(n(22)),\n        g = h(n(23)),\n        b = L(n(18)),\n        A = L(n(34)),\n        T = L(n(56)),\n        E = h(n(25)),\n        _ = n(4),\n        v = h(n(26)),\n        R = h(n(8)),\n        S = h(n(9)),\n        C = h(n(10)),\n        I = h(n(58)),\n        O = n(65);\n\n    function L(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function h(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var N = (0, s.default)(\"debugger:session\");\n\n    var D = /*#__PURE__*/function () {\n      function D(e, t, n, r) {\n        var _this = this;\n\n        _classCallCheck(this, D);\n\n        var _ref124 = (0, d.default)(I.default, T.default, [n]),\n            a = _ref124.store,\n            i = _ref124.sagaMiddleware;\n\n        this._store = a, this._sagaMiddleware = i;\n\n        var _D$normalize = D.normalize(e),\n            o = _D$normalize.contexts,\n            s = _D$normalize.sources;\n\n        this._store.dispatch(p.recordContracts(o, s)), this._ready = new l.default(function (e, t) {\n          var n = _this._store.subscribe(function () {\n            _this.view(g.default.status.ready) ? (N(\"ready!\"), n(), e()) : _this.view(g.default.status.errored) && (N(\"error!\"), n(), t(_this.view(g.default.status.error)));\n          });\n        }), this._store.dispatch(p.start(t, r));\n      }\n\n      _createClass(D, [{\n        key: \"ready\",\n        value: function ready() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43() {\n            return _regeneratorRuntime.wrap(function _callee43$(_context65) {\n              while (1) {\n                switch (_context65.prev = _context65.next) {\n                  case 0:\n                    _context65.next = 2;\n                    return e._ready;\n\n                  case 2:\n                  case \"end\":\n                    return _context65.stop();\n                }\n              }\n            }, _callee43);\n          }))();\n        }\n      }, {\n        key: \"readyAgainAfterLoading\",\n        value: function readyAgainAfterLoading(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44() {\n            return _regeneratorRuntime.wrap(function _callee44$(_context66) {\n              while (1) {\n                switch (_context66.prev = _context66.next) {\n                  case 0:\n                    return _context66.abrupt(\"return\", new l.default(function (n, r) {\n                      var a = !1;\n                      N(\"reready listener set up\");\n\n                      var i = t._store.subscribe(function () {\n                        N(\"reready?\"), a ? t.view(g.default.status.ready) ? (N(\"reready!\"), i(), n(!0)) : t.view(g.default.status.errored) && (i(), N(\"error!\"), r(t.view(g.default.status.error))) : t.view(g.default.status.waiting) && (N(\"started waiting\"), a = !0);\n                      });\n\n                      t.dispatch(e);\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context66.stop();\n                }\n              }\n            }, _callee44);\n          }))();\n        }\n      }, {\n        key: \"state\",\n        get: function get() {\n          return this._store.getState();\n        }\n      }, {\n        key: \"view\",\n        value: function view(e) {\n          return e(this.state);\n        }\n      }, {\n        key: \"dispatch\",\n        value: function dispatch(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45() {\n            return _regeneratorRuntime.wrap(function _callee45$(_context67) {\n              while (1) {\n                switch (_context67.prev = _context67.next) {\n                  case 0:\n                    return _context67.abrupt(\"return\", (t._store.dispatch(e), !0));\n\n                  case 1:\n                  case \"end\":\n                    return _context67.stop();\n                }\n              }\n            }, _callee45);\n          }))();\n        }\n      }, {\n        key: \"_runSaga\",\n        value: function _runSaga(e) {\n          for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            t[_key - 1] = arguments[_key];\n          }\n\n          var n = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46() {\n            var _n$_sagaMiddleware;\n\n            return _regeneratorRuntime.wrap(function _callee46$(_context68) {\n              while (1) {\n                switch (_context68.prev = _context68.next) {\n                  case 0:\n                    _context68.next = 2;\n                    return (_n$_sagaMiddleware = n._sagaMiddleware).run.apply(_n$_sagaMiddleware, [e].concat(t)).toPromise();\n\n                  case 2:\n                    return _context68.abrupt(\"return\", _context68.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context68.stop();\n                }\n              }\n            }, _callee46);\n          }))();\n        }\n      }, {\n        key: \"interrupt\",\n        value: function interrupt() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47() {\n            return _regeneratorRuntime.wrap(function _callee47$(_context69) {\n              while (1) {\n                switch (_context69.prev = _context69.next) {\n                  case 0:\n                    _context69.next = 2;\n                    return e.dispatch(p.interrupt());\n\n                  case 2:\n                    _context69.next = 4;\n                    return e.dispatch(f.interrupt());\n\n                  case 4:\n                  case \"end\":\n                    return _context69.stop();\n                }\n              }\n            }, _callee47);\n          }))();\n        }\n      }, {\n        key: \"doneStepping\",\n        value: function doneStepping(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48() {\n            return _regeneratorRuntime.wrap(function _callee48$(_context70) {\n              while (1) {\n                switch (_context70.prev = _context70.next) {\n                  case 0:\n                    return _context70.abrupt(\"return\", new l.default(function (n) {\n                      var r = !1;\n\n                      var a = t._store.subscribe(function () {\n                        var e = t.view(E.default.isStepping);\n                        if (e && !r) return r = !0, void N(\"heard step start\");\n                        !e && r && (N(\"heard step stop\"), a(), n(!0));\n                      });\n\n                      t.dispatch(e);\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context70.stop();\n                }\n              }\n            }, _callee48);\n          }))();\n        }\n      }, {\n        key: \"load\",\n        value: function load(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {\n            return _regeneratorRuntime.wrap(function _callee49$(_context71) {\n              while (1) {\n                switch (_context71.prev = _context71.next) {\n                  case 0:\n                    if (!t.view(g.default.status.loaded)) {\n                      _context71.next = 2;\n                      break;\n                    }\n\n                    return _context71.abrupt(\"return\", !1);\n\n                  case 2:\n                    _context71.prev = 2;\n                    _context71.next = 5;\n                    return t.readyAgainAfterLoading(p.loadTransaction(e));\n\n                  case 5:\n                    return _context71.abrupt(\"return\", _context71.sent);\n\n                  case 8:\n                    _context71.prev = 8;\n                    _context71.t0 = _context71[\"catch\"](2);\n                    return _context71.abrupt(\"return\", (t._runSaga(T.unload), _context71.t0));\n\n                  case 11:\n                  case \"end\":\n                    return _context71.stop();\n                }\n              }\n            }, _callee49, null, [[2, 8]]);\n          }))();\n        }\n      }, {\n        key: \"unload\",\n        value: function unload() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50() {\n            return _regeneratorRuntime.wrap(function _callee50$(_context72) {\n              while (1) {\n                switch (_context72.prev = _context72.next) {\n                  case 0:\n                    _context72.t0 = !!e.view(g.default.status.loaded);\n\n                    if (!_context72.t0) {\n                      _context72.next = 6;\n                      break;\n                    }\n\n                    N(\"unloading\");\n                    _context72.next = 5;\n                    return e._runSaga(T.unload);\n\n                  case 5:\n                    _context72.t0 = !0;\n\n                  case 6:\n                    return _context72.abrupt(\"return\", _context72.t0);\n\n                  case 7:\n                  case \"end\":\n                    return _context72.stop();\n                }\n              }\n            }, _callee50);\n          }))();\n        }\n      }, {\n        key: \"advance\",\n        value: function advance(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {\n            return _regeneratorRuntime.wrap(function _callee51$(_context73) {\n              while (1) {\n                switch (_context73.prev = _context73.next) {\n                  case 0:\n                    _context73.next = 2;\n                    return t.doneStepping(f.advance(e));\n\n                  case 2:\n                    return _context73.abrupt(\"return\", _context73.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context73.stop();\n                }\n              }\n            }, _callee51);\n          }))();\n        }\n      }, {\n        key: \"stepNext\",\n        value: function stepNext() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52() {\n            return _regeneratorRuntime.wrap(function _callee52$(_context74) {\n              while (1) {\n                switch (_context74.prev = _context74.next) {\n                  case 0:\n                    _context74.next = 2;\n                    return e.doneStepping(f.stepNext());\n\n                  case 2:\n                    return _context74.abrupt(\"return\", _context74.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context74.stop();\n                }\n              }\n            }, _callee52);\n          }))();\n        }\n      }, {\n        key: \"stepOver\",\n        value: function stepOver() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53() {\n            return _regeneratorRuntime.wrap(function _callee53$(_context75) {\n              while (1) {\n                switch (_context75.prev = _context75.next) {\n                  case 0:\n                    _context75.next = 2;\n                    return e.doneStepping(f.stepOver());\n\n                  case 2:\n                    return _context75.abrupt(\"return\", _context75.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context75.stop();\n                }\n              }\n            }, _callee53);\n          }))();\n        }\n      }, {\n        key: \"stepInto\",\n        value: function stepInto() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54() {\n            return _regeneratorRuntime.wrap(function _callee54$(_context76) {\n              while (1) {\n                switch (_context76.prev = _context76.next) {\n                  case 0:\n                    _context76.next = 2;\n                    return e.doneStepping(f.stepInto());\n\n                  case 2:\n                    return _context76.abrupt(\"return\", _context76.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context76.stop();\n                }\n              }\n            }, _callee54);\n          }))();\n        }\n      }, {\n        key: \"stepOut\",\n        value: function stepOut() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55() {\n            return _regeneratorRuntime.wrap(function _callee55$(_context77) {\n              while (1) {\n                switch (_context77.prev = _context77.next) {\n                  case 0:\n                    _context77.next = 2;\n                    return e.doneStepping(f.stepOut());\n\n                  case 2:\n                    return _context77.abrupt(\"return\", _context77.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context77.stop();\n                }\n              }\n            }, _callee55);\n          }))();\n        }\n      }, {\n        key: \"reset\",\n        value: function reset() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56() {\n            return _regeneratorRuntime.wrap(function _callee56$(_context78) {\n              while (1) {\n                switch (_context78.prev = _context78.next) {\n                  case 0:\n                    if (!e.view(g.default.status.loaded)) {\n                      _context78.next = 4;\n                      break;\n                    }\n\n                    _context78.next = 3;\n                    return e._runSaga(A.reset);\n\n                  case 3:\n                    return _context78.abrupt(\"return\", _context78.sent);\n\n                  case 4:\n                  case \"end\":\n                    return _context78.stop();\n                }\n              }\n            }, _callee56);\n          }))();\n        }\n      }, {\n        key: \"continueUntilBreakpoint\",\n        value: function continueUntilBreakpoint(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57() {\n            return _regeneratorRuntime.wrap(function _callee57$(_context79) {\n              while (1) {\n                switch (_context79.prev = _context79.next) {\n                  case 0:\n                    _context79.next = 2;\n                    return t.doneStepping(f.continueUntilBreakpoint(e));\n\n                  case 2:\n                    return _context79.abrupt(\"return\", _context79.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context79.stop();\n                }\n              }\n            }, _callee57);\n          }))();\n        }\n      }, {\n        key: \"addBreakpoint\",\n        value: function addBreakpoint(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58() {\n            return _regeneratorRuntime.wrap(function _callee58$(_context80) {\n              while (1) {\n                switch (_context80.prev = _context80.next) {\n                  case 0:\n                    _context80.next = 2;\n                    return t.dispatch(f.addBreakpoint(e));\n\n                  case 2:\n                    return _context80.abrupt(\"return\", _context80.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context80.stop();\n                }\n              }\n            }, _callee58);\n          }))();\n        }\n      }, {\n        key: \"removeBreakpoint\",\n        value: function removeBreakpoint(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59() {\n            return _regeneratorRuntime.wrap(function _callee59$(_context81) {\n              while (1) {\n                switch (_context81.prev = _context81.next) {\n                  case 0:\n                    _context81.next = 2;\n                    return t.dispatch(f.removeBreakpoint(e));\n\n                  case 2:\n                    return _context81.abrupt(\"return\", _context81.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context81.stop();\n                }\n              }\n            }, _callee59);\n          }))();\n        }\n      }, {\n        key: \"removeAllBreakpoints\",\n        value: function removeAllBreakpoints() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60() {\n            return _regeneratorRuntime.wrap(function _callee60$(_context82) {\n              while (1) {\n                switch (_context82.prev = _context82.next) {\n                  case 0:\n                    _context82.next = 2;\n                    return e.dispatch(f.removeAllBreakpoints());\n\n                  case 2:\n                    return _context82.abrupt(\"return\", _context82.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context82.stop();\n                }\n              }\n            }, _callee60);\n          }))();\n        }\n      }, {\n        key: \"decodeReady\",\n        value: function decodeReady() {\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61() {\n            return _regeneratorRuntime.wrap(function _callee61$(_context83) {\n              while (1) {\n                switch (_context83.prev = _context83.next) {\n                  case 0:\n                    return _context83.abrupt(\"return\", !0);\n\n                  case 1:\n                  case \"end\":\n                    return _context83.stop();\n                }\n              }\n            }, _callee61);\n          }))();\n        }\n      }, {\n        key: \"variable\",\n        value: function variable(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62() {\n            var n, r, a;\n            return _regeneratorRuntime.wrap(function _callee62$(_context84) {\n              while (1) {\n                switch (_context84.prev = _context84.next) {\n                  case 0:\n                    n = t.view(y.default.current.identifiers.definitions), r = t.view(y.default.current.identifiers.refs), a = t.view(y.default.current.compilationId);\n                    _context84.next = 3;\n                    return t._runSaga(b.decode, n[e], r[e], a);\n\n                  case 3:\n                    return _context84.abrupt(\"return\", _context84.sent);\n\n                  case 4:\n                  case \"end\":\n                    return _context84.stop();\n                }\n              }\n            }, _callee62);\n          }))();\n        }\n      }, {\n        key: \"variables\",\n        value: function variables() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63() {\n            var t, n, a, i, _iterator7, _step7, _step7$value, _o2, _l3;\n\n            return _regeneratorRuntime.wrap(function _callee63$(_context85) {\n              while (1) {\n                switch (_context85.prev = _context85.next) {\n                  case 0:\n                    if (e.view(g.default.status.loaded)) {\n                      _context85.next = 2;\n                      break;\n                    }\n\n                    return _context85.abrupt(\"return\", {});\n\n                  case 2:\n                    t = e.view(y.default.current.identifiers.definitions), n = e.view(y.default.current.identifiers.refs), a = e.view(y.default.current.compilationId), i = {};\n                    _iterator7 = _createForOfIteratorHelper((0, r.default)(n));\n                    _context85.prev = 4;\n\n                    _iterator7.s();\n\n                  case 6:\n                    if ((_step7 = _iterator7.n()).done) {\n                      _context85.next = 15;\n                      break;\n                    }\n\n                    _step7$value = _slicedToArray(_step7.value, 2), _o2 = _step7$value[0], _l3 = _step7$value[1];\n                    _context85.t0 = _o2 in t;\n\n                    if (!_context85.t0) {\n                      _context85.next = 13;\n                      break;\n                    }\n\n                    _context85.next = 12;\n                    return e._runSaga(b.decode, t[_o2], _l3, a);\n\n                  case 12:\n                    i[_o2] = _context85.sent;\n\n                  case 13:\n                    _context85.next = 6;\n                    break;\n\n                  case 15:\n                    _context85.next = 20;\n                    break;\n\n                  case 17:\n                    _context85.prev = 17;\n                    _context85.t1 = _context85[\"catch\"](4);\n\n                    _iterator7.e(_context85.t1);\n\n                  case 20:\n                    _context85.prev = 20;\n\n                    _iterator7.f();\n\n                    return _context85.finish(20);\n\n                  case 23:\n                    return _context85.abrupt(\"return\", i);\n\n                  case 24:\n                  case \"end\":\n                    return _context85.stop();\n                }\n              }\n            }, _callee63, null, [[4, 17, 20, 23]]);\n          }))();\n        }\n      }, {\n        key: \"returnValue\",\n        value: function returnValue() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64() {\n            return _regeneratorRuntime.wrap(function _callee64$(_context86) {\n              while (1) {\n                switch (_context86.prev = _context86.next) {\n                  case 0:\n                    if (!(e.view(g.default.status.loaded) && e.view(S.default.current.step.isHalting))) {\n                      _context86.next = 6;\n                      break;\n                    }\n\n                    _context86.next = 3;\n                    return e._runSaga(b.decodeReturnValue);\n\n                  case 3:\n                    _context86.t0 = _context86.sent;\n                    _context86.next = 7;\n                    break;\n\n                  case 6:\n                    _context86.t0 = null;\n\n                  case 7:\n                    return _context86.abrupt(\"return\", _context86.t0);\n\n                  case 8:\n                  case \"end\":\n                    return _context86.stop();\n                }\n              }\n            }, _callee64);\n          }))();\n        }\n      }, {\n        key: \"callstack\",\n        value: function callstack() {\n          return this.view(g.default.status.loaded) ? this.view(m.default.current.report) : null;\n        }\n      }, {\n        key: \"stacktrace\",\n        value: function stacktrace() {\n          return this.view(g.default.status.loaded) ? this.view(m.default.current.finalReport) : null;\n        }\n      }, {\n        key: \"connect\",\n        value: function connect() {\n          return this;\n        }\n      }, {\n        key: \"addExternalCompilations\",\n        value: function addExternalCompilations(e) {\n          var t = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65() {\n            var _D$normalize2, n, r;\n\n            return _regeneratorRuntime.wrap(function _callee65$(_context87) {\n              while (1) {\n                switch (_context87.prev = _context87.next) {\n                  case 0:\n                    _D$normalize2 = D.normalize(e), n = _D$normalize2.contexts, r = _D$normalize2.sources;\n                    _context87.next = 3;\n                    return t.dispatch(p.addCompilations(r, n));\n\n                  case 3:\n                    return _context87.abrupt(\"return\", _context87.sent);\n\n                  case 4:\n                  case \"end\":\n                    return _context87.stop();\n                }\n              }\n            }, _callee65);\n          }))();\n        }\n      }, {\n        key: \"startFullMode\",\n        value: function startFullMode() {\n          var e = this;\n          return (0, o.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66() {\n            return _regeneratorRuntime.wrap(function _callee66$(_context88) {\n              while (1) {\n                switch (_context88.prev = _context88.next) {\n                  case 0:\n                    _context88.next = 2;\n                    return e.dispatch(p.startFullMode());\n\n                  case 2:\n                    return _context88.abrupt(\"return\", _context88.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context88.stop();\n                }\n              }\n            }, _callee66);\n          }))();\n        }\n      }, {\n        key: \"selectors\",\n        get: function get() {\n          return (0, _.createNestedSelector)({\n            ast: v.default,\n            data: y.default,\n            trace: R.default,\n            evm: S.default,\n            solidity: C.default,\n            stacktrace: m.default,\n            session: g.default,\n            controller: E.default\n          });\n        }\n      }], [{\n        key: \"normalize\",\n        value: function normalize(e) {\n          var t = [],\n              n = {};\n\n          var _iterator8 = _createForOfIteratorHelper(e),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _r7 = _step8.value;\n              if (_r7.unreliableSourceOrder) throw new Error(\"Error: Compilation \".concat(_r7.id, \" has unreliable source order.\"));\n              var _e29 = _r7.compiler;\n              n[_r7.id] = [];\n\n              for (var _t20 in _r7.sources) {\n                var _a7 = _r7.sources[_t20];\n                _a7 && (n[_r7.id][_t20] = (0, i.default)({}, _a7, {\n                  compiler: _a7.compiler || _e29,\n                  compilationId: _r7.id,\n                  id: _t20\n                }));\n              }\n\n              var _iterator9 = _createForOfIteratorHelper(_r7.contracts),\n                  _step9;\n\n              try {\n                var _loop2 = function _loop2() {\n                  var e = _step9.value;\n                  var n = void 0,\n                      a = e.contractName,\n                      i = e.bytecode,\n                      o = e.sourceMap,\n                      l = e.deployedBytecode,\n                      s = e.deployedSourceMap,\n                      u = e.immutableReferences,\n                      d = e.abi,\n                      f = e.compiler,\n                      p = e.primarySourceId;\n                  \"object\" == typeof i && (i = (0, O.shimBytecode)(i)), \"object\" == typeof l && (l = (0, O.shimBytecode)(l)), void 0 !== p && (n = _r7.sources.findIndex(function (e) {\n                    return e && e.id === p;\n                  }));\n                  var y = c.Compilations.Utils.getContractNode(e, _r7),\n                      m = y ? y.id : void 0,\n                      g = y ? y.contractKind : void 0;\n                  d = c.AbiData.Utils.schemaAbiToAbi(d), N(\"contractName %s\", a), N(\"sourceMap %o\", o), N(\"compiler %o\", f), N(\"abi %O\", d), i && \"0x\" != i && t.push({\n                    contractName: a,\n                    binary: i,\n                    sourceMap: o,\n                    primarySource: n,\n                    abi: d,\n                    compiler: f,\n                    compilationId: _r7.id,\n                    contractId: m,\n                    contractKind: g,\n                    externalSolidity: _r7.externalSolidity,\n                    isConstructor: !0\n                  }), l && \"0x\" != l && t.push({\n                    contractName: a,\n                    binary: l,\n                    sourceMap: s,\n                    primarySource: n,\n                    immutableReferences: u,\n                    abi: d,\n                    compiler: f,\n                    compilationId: _r7.id,\n                    contractId: m,\n                    contractKind: g,\n                    externalSolidity: _r7.externalSolidity,\n                    isConstructor: !1\n                  });\n                };\n\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  _loop2();\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          return t = (0, a.default).apply(void 0, [{}].concat(_toConsumableArray(t.map(function (e) {\n            var t = (0, u.keccak256)({\n              type: \"string\",\n              value: e.binary\n            });\n            return _defineProperty({}, t, (0, i.default)({}, e, {\n              context: t\n            }));\n          })))), t = c.Contexts.Utils.normalizeContexts(t), {\n            contexts: t,\n            sources: n\n          };\n        }\n      }]);\n\n      return D;\n    }();\n\n    t.default = D;\n  }, function (e, t) {\n    e.exports = require(\"babel-runtime/core-js/promise\");\n  }, function (e, t) {\n    e.exports = require(\"json-stable-stringify\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    e.exports = n(47);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r,\n        a = n(48),\n        i = (r = a) && r.__esModule ? r : {\n      default: r\n    };\n    t.default = i.default;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.default = function (e, t, n, r, o) {\n      var l = (0, i.default)();\n      o || (o = a.compose);\n      var s = (0, a.createStore)(e, r, o((0, a.applyMiddleware)(l)));\n      return l.run.apply(l, [t].concat(_toConsumableArray(n))), {\n        store: s,\n        sagaMiddleware: l\n      };\n    };\n    var r = o(n(0)),\n        a = n(7),\n        i = o(n(49));\n\n    function o(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    (0, r.default)(\"debugger:store:common\");\n  }, function (e, t) {\n    e.exports = require(\"redux-saga\");\n  }, function (e, t) {\n    e.exports = require(\"@truffle/solidity-utils\");\n  }, function (e, t) {\n    e.exports = require(\"lodash.zipwith\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.init = function (e) {\n      return {\n        type: r,\n        provider: e\n      };\n    }, t.inspect = function (e) {\n      return {\n        type: a,\n        txHash: e\n      };\n    }, t.fetchBinary = function (e, t) {\n      return {\n        type: i,\n        address: e,\n        block: t\n      };\n    }, t.receiveBinary = function (e, t) {\n      return {\n        type: o,\n        address: e,\n        binary: t\n      };\n    }, t.receiveTrace = function (e) {\n      return {\n        type: l,\n        trace: e\n      };\n    }, t.receiveCall = function (_ref126) {\n      var e = _ref126.address,\n          t = _ref126.binary,\n          n = _ref126.data,\n          r = _ref126.storageAddress,\n          a = _ref126.status,\n          i = _ref126.sender,\n          o = _ref126.value,\n          l = _ref126.gasprice,\n          c = _ref126.block;\n      return {\n        type: s,\n        address: e,\n        binary: t,\n        data: n,\n        storageAddress: r,\n        status: a,\n        sender: i,\n        value: o,\n        gasprice: l,\n        block: c\n      };\n    }, t.error = function (e) {\n      return {\n        type: c,\n        error: e\n      };\n    };\n    var r = t.INIT_WEB3 = \"INIT_WEB3\";\n    var a = t.INSPECT = \"INSPECT_TRANSACTION\";\n    var i = t.FETCH_BINARY = \"FETCH_BINARY\";\n    var o = t.RECEIVE_BINARY = \"RECEIVE_BINARY\";\n    var l = t.RECEIVE_TRACE = \"RECEIVE_TRACE\";\n    var s = t.RECEIVE_CALL = \"RECEIVE_CALL\";\n    var c = t.ERROR_WEB3 = \"ERROR_WEB3\";\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = l(n(19)),\n        a = l(n(0)),\n        i = l(n(33)),\n        o = n(54);\n\n    function l(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var s = (0, a.default)(\"debugger:web3:adapter\");\n\n    t.default = /*#__PURE__*/function () {\n      function _class(e) {\n        _classCallCheck(this, _class);\n\n        this.web3 = new i.default(e);\n      }\n\n      _createClass(_class, [{\n        key: \"getTrace\",\n        value: function getTrace(e) {\n          var t = this;\n          return (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67() {\n            var n;\n            return _regeneratorRuntime.wrap(function _callee67$(_context89) {\n              while (1) {\n                switch (_context89.prev = _context89.next) {\n                  case 0:\n                    _context89.next = 2;\n                    return (0, o.promisify)(t.web3.currentProvider.send)({\n                      jsonrpc: \"2.0\",\n                      method: \"debug_traceTransaction\",\n                      params: [e, {}],\n                      id: new Date().getTime()\n                    });\n\n                  case 2:\n                    n = _context89.sent;\n\n                    if (!n.error) {\n                      _context89.next = 5;\n                      break;\n                    }\n\n                    throw new Error(n.error.message);\n\n                  case 5:\n                    return _context89.abrupt(\"return\", n.result.structLogs);\n\n                  case 6:\n                  case \"end\":\n                    return _context89.stop();\n                }\n              }\n            }, _callee67);\n          }))();\n        }\n      }, {\n        key: \"getTransaction\",\n        value: function getTransaction(e) {\n          var t = this;\n          return (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68() {\n            return _regeneratorRuntime.wrap(function _callee68$(_context90) {\n              while (1) {\n                switch (_context90.prev = _context90.next) {\n                  case 0:\n                    _context90.next = 2;\n                    return t.web3.eth.getTransaction(e);\n\n                  case 2:\n                    return _context90.abrupt(\"return\", _context90.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context90.stop();\n                }\n              }\n            }, _callee68);\n          }))();\n        }\n      }, {\n        key: \"getReceipt\",\n        value: function getReceipt(e) {\n          var t = this;\n          return (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69() {\n            return _regeneratorRuntime.wrap(function _callee69$(_context91) {\n              while (1) {\n                switch (_context91.prev = _context91.next) {\n                  case 0:\n                    _context91.next = 2;\n                    return t.web3.eth.getTransactionReceipt(e);\n\n                  case 2:\n                    return _context91.abrupt(\"return\", _context91.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context91.stop();\n                }\n              }\n            }, _callee69);\n          }))();\n        }\n      }, {\n        key: \"getBlock\",\n        value: function getBlock(e) {\n          var t = this;\n          return (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70() {\n            return _regeneratorRuntime.wrap(function _callee70$(_context92) {\n              while (1) {\n                switch (_context92.prev = _context92.next) {\n                  case 0:\n                    _context92.next = 2;\n                    return t.web3.eth.getBlock(e);\n\n                  case 2:\n                    return _context92.abrupt(\"return\", _context92.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context92.stop();\n                }\n              }\n            }, _callee70);\n          }))();\n        }\n      }, {\n        key: \"getDeployedCode\",\n        value: function getDeployedCode(e, t) {\n          var n = this;\n          return (0, r.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71() {\n            var r;\n            return _regeneratorRuntime.wrap(function _callee71$(_context93) {\n              while (1) {\n                switch (_context93.prev = _context93.next) {\n                  case 0:\n                    s(\"getting deployed code for %s\", e);\n                    _context93.next = 3;\n                    return n.web3.eth.getCode(e, t);\n\n                  case 3:\n                    r = _context93.sent;\n                    return _context93.abrupt(\"return\", \"0x0\" === r ? \"0x\" : r);\n\n                  case 5:\n                  case \"end\":\n                    return _context93.stop();\n                }\n              }\n            }, _callee71);\n          }))();\n        }\n      }]);\n\n      return _class;\n    }();\n  }, function (e, t) {\n    e.exports = require(\"util\");\n  }, function (e, t) {\n    e.exports = require(\"lodash.sum\");\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _ref129;\n\n    var _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(v),\n        _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(R),\n        _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(S),\n        _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(C),\n        _marked26 = /*#__PURE__*/_regeneratorRuntime.mark(I),\n        _marked27 = /*#__PURE__*/_regeneratorRuntime.mark(O);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = T(n(15)),\n        a = T(n(35));\n    t.saga = R, t.processTransaction = S, t.unload = /*#__PURE__*/_regeneratorRuntime.mark(function _callee72() {\n      return _regeneratorRuntime.wrap(function _callee72$(_context94) {\n        while (1) {\n          switch (_context94.prev = _context94.next) {\n            case 0:\n              E(\"unloading\");\n              return _context94.delegateYield(y.reset(), \"t0\", 2);\n\n            case 2:\n              return _context94.delegateYield(u.unload(), \"t1\", 3);\n\n            case 3:\n              return _context94.delegateYield(f.unload(), \"t2\", 4);\n\n            case 4:\n              return _context94.delegateYield(p.unload(), \"t3\", 5);\n\n            case 5:\n              return _context94.delegateYield(d.unload(), \"t4\", 6);\n\n            case 6:\n              _context94.next = 8;\n              return (0, o.put)(g.unloadTransaction());\n\n            case 8:\n            case \"end\":\n              return _context94.stop();\n          }\n        }\n      }, _callee72);\n    });\n    var i = T(n(0)),\n        o = n(5),\n        l = n(1),\n        s = A(n(57)),\n        c = A(n(34)),\n        u = A(n(36)),\n        d = A(n(38)),\n        f = A(n(24)),\n        p = A(n(13)),\n        y = A(n(18)),\n        m = A(n(32)),\n        g = A(n(14)),\n        b = T(n(23));\n\n    function A(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function T(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var E = (0, i.default)(\"debugger:session:sagas\"),\n        _ = (_ref129 = {}, _defineProperty(_ref129, g.LOAD_TRANSACTION, /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(_ref127) {\n      var e;\n      return _regeneratorRuntime.wrap(function _callee73$(_context95) {\n        while (1) {\n          switch (_context95.prev = _context95.next) {\n            case 0:\n              e = _ref127.txHash;\n              return _context95.delegateYield(S(e), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context95.stop();\n          }\n        }\n      }, _callee73);\n    })), _defineProperty(_ref129, g.ADD_COMPILATIONS, /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(_ref128) {\n      var e, t;\n      return _regeneratorRuntime.wrap(function _callee74$(_context96) {\n        while (1) {\n          switch (_context96.prev = _context96.next) {\n            case 0:\n              e = _ref128.sources, t = _ref128.contexts;\n              E(\"recording contract binaries\");\n              return _context96.delegateYield(C(t), \"t0\", 3);\n\n            case 3:\n              E(\"recording contract sources\");\n              return _context96.delegateYield(I(e), \"t1\", 5);\n\n            case 5:\n              E(\"refreshing instances\");\n              return _context96.delegateYield(f.refreshInstances(), \"t2\", 7);\n\n            case 7:\n            case \"end\":\n              return _context96.stop();\n          }\n        }\n      }, _callee74);\n    })), _defineProperty(_ref129, g.START_FULL_MODE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee75() {\n      return _regeneratorRuntime.wrap(function _callee75$(_context97) {\n        while (1) {\n          switch (_context97.prev = _context97.next) {\n            case 0:\n              E(\"session: %O\", b.default);\n              _context97.next = 3;\n              return (0, o.select)(b.default.status.lightMode);\n\n            case 3:\n              if (_context97.sent) {\n                _context97.next = 5;\n                break;\n              }\n\n              return _context97.abrupt(\"return\");\n\n            case 5:\n              E(\"turning on data listener\");\n              _context97.next = 8;\n              return (0, o.fork)(y.saga);\n\n            case 8:\n              E(\"visiting ASTs\");\n              return _context97.delegateYield(s.visitAll(), \"t0\", 10);\n\n            case 10:\n              E(\"saving allocation table\");\n              return _context97.delegateYield(y.recordAllocations(), \"t1\", 12);\n\n            case 12:\n              return _context97.delegateYield(p.addSubmoduleToCount(), \"t2\", 13);\n\n            case 13:\n              _context97.next = 15;\n              return (0, o.put)(g.setFullMode());\n\n            case 15:\n            case \"end\":\n              return _context97.stop();\n          }\n        }\n      }, _callee75);\n    })), _ref129);\n\n    function v() {\n      var _e30, _t21;\n\n      return _regeneratorRuntime.wrap(function v$(_context98) {\n        while (1) {\n          switch (_context98.prev = _context98.next) {\n            case 0:\n              _context98.next = 2;\n              return (0, o.take)((0, a.default)(_));\n\n            case 2:\n              _e30 = _context98.sent;\n              _t21 = _[_e30.type];\n              _context98.next = 6;\n              return (0, o.put)(g.wait());\n\n            case 6:\n              _context98.next = 8;\n              return (0, o.race)({\n                exec: (0, o.call)(_t21, _e30),\n                interrupt: (0, o.take)(g.INTERRUPT)\n              });\n\n            case 8:\n              _context98.next = 10;\n              return (0, o.put)(g.ready());\n\n            case 10:\n              _context98.next = 0;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context98.stop();\n          }\n        }\n      }, _marked22);\n    }\n\n    function R(e) {\n      var _yield6, t, n, _yield7, r, a;\n\n      return _regeneratorRuntime.wrap(function R$(_context101) {\n        while (1) {\n          switch (_context101.prev = _context101.next) {\n            case 0:\n              E(\"starting listeners\");\n              return _context101.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(e) {\n                var t, n, r, a;\n                return _regeneratorRuntime.wrap(function _callee76$(_context99) {\n                  while (1) {\n                    switch (_context99.prev = _context99.next) {\n                      case 0:\n                        _context99.next = 2;\n                        return (0, o.fork)(v);\n\n                      case 2:\n                        t = [f, u, d];\n                        e.lightMode || t.push(y);\n                        n = [p, c, m];\n                        r = t.length, a = t.concat(n);\n                        return _context99.delegateYield(p.setSubmoduleCount(r), \"t0\", 7);\n\n                      case 7:\n                        _context99.next = 9;\n                        return (0, o.all)(a.map(function (e) {\n                          return (0, o.fork)(e.saga);\n                        }));\n\n                      case 9:\n                        return _context99.abrupt(\"return\", _context99.sent);\n\n                      case 10:\n                      case \"end\":\n                        return _context99.stop();\n                    }\n                  }\n                }, _callee76);\n              })(e), \"t0\", 2);\n\n            case 2:\n              E(\"waiting for contract information\");\n              _context101.next = 5;\n              return (0, o.take)(g.RECORD_CONTRACTS);\n\n            case 5:\n              _yield6 = _context101.sent;\n              t = _yield6.contexts;\n              n = _yield6.sources;\n              E(\"recording contract binaries\");\n              return _context101.delegateYield(C(t), \"t1\", 10);\n\n            case 10:\n              E(\"recording contract sources\");\n              return _context101.delegateYield(I(n), \"t2\", 12);\n\n            case 12:\n              E(\"waiting for start\");\n              _context101.next = 15;\n              return (0, o.take)(g.START);\n\n            case 15:\n              _yield7 = _context101.sent;\n              r = _yield7.txHash;\n              a = _yield7.provider;\n              E(\"starting\");\n\n              if (!e.lightMode) {\n                _context101.next = 25;\n                break;\n              }\n\n              E(\"setting light mode\");\n              _context101.next = 23;\n              return (0, o.put)(g.setLightMode());\n\n            case 23:\n              _context101.next = 29;\n              break;\n\n            case 25:\n              E(\"visiting ASTs\");\n              return _context101.delegateYield(s.visitAll(), \"t3\", 27);\n\n            case 27:\n              E(\"saving allocation table\");\n              return _context101.delegateYield(y.recordAllocations(), \"t4\", 29);\n\n            case 29:\n              E(\"initializing adapter\");\n              return _context101.delegateYield(m.init(a), \"t5\", 31);\n\n            case 31:\n              _context101.t6 = void 0 !== r;\n\n              if (!_context101.t6) {\n                _context101.next = 34;\n                break;\n              }\n\n              return _context101.delegateYield(S(r), \"t7\", 34);\n\n            case 34:\n              E(\"readying\");\n              return _context101.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77() {\n                return _regeneratorRuntime.wrap(function _callee77$(_context100) {\n                  while (1) {\n                    switch (_context100.prev = _context100.next) {\n                      case 0:\n                        _context100.next = 2;\n                        return (0, o.put)(g.ready());\n\n                      case 2:\n                      case \"end\":\n                        return _context100.stop();\n                    }\n                  }\n                }, _callee77);\n              })(), \"t8\", 36);\n\n            case 36:\n            case \"end\":\n              return _context101.stop();\n          }\n        }\n      }, _marked23);\n    }\n\n    function S(e) {\n      var t;\n      return _regeneratorRuntime.wrap(function S$(_context104) {\n        while (1) {\n          switch (_context104.prev = _context104.next) {\n            case 0:\n              E(\"fetching transaction info\");\n              return _context104.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78(e) {\n                var t, n, r, a;\n                return _regeneratorRuntime.wrap(function _callee78$(_context102) {\n                  while (1) {\n                    switch (_context102.prev = _context102.next) {\n                      case 0:\n                        return _context102.delegateYield(m.inspectTransaction(e), \"t0\", 1);\n\n                      case 1:\n                        t = _context102.t0;\n\n                        if (!(E(\"result %o\", t), t.error)) {\n                          _context102.next = 4;\n                          break;\n                        }\n\n                        return _context102.abrupt(\"return\", t.error);\n\n                      case 4:\n                        E(\"processing trace for addresses\");\n                        return _context102.delegateYield(p.processTrace(t.trace), \"t1\", 6);\n\n                      case 6:\n                        n = _context102.t1;\n                        t.address && !n.includes(t.address) && n.push(t.address);\n                        t.binary && t.status && !n.includes(t.storageAddress) && n.push(t.storageAddress);\n                        r = t.block.number.toString();\n                        E(\"obtaining binaries\");\n                        return _context102.delegateYield(m.obtainBinaries(n, r), \"t2\", 12);\n\n                      case 12:\n                        a = _context102.t2;\n                        E(\"recording instances\");\n                        _context102.next = 16;\n                        return (0, o.all)(n.map(function (e, t) {\n                          return (0, o.call)(O, e, a[t]);\n                        }));\n\n                      case 16:\n                        E(\"sending initial call\");\n                        return _context102.delegateYield(f.begin(t), \"t3\", 18);\n\n                      case 18:\n                        return _context102.delegateYield(u.begin(), \"t4\", 19);\n\n                      case 19:\n                        return _context102.delegateYield(d.begin(), \"t5\", 20);\n\n                      case 20:\n                      case \"end\":\n                        return _context102.stop();\n                    }\n                  }\n                }, _callee78);\n              })(e), \"t0\", 2);\n\n            case 2:\n              t = _context104.t0;\n              _context104.t1 = t;\n\n              if (!_context104.t1) {\n                _context104.next = 7;\n                break;\n              }\n\n              E(\"error %o\", t);\n              return _context104.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79(e) {\n                return _regeneratorRuntime.wrap(function _callee79$(_context103) {\n                  while (1) {\n                    switch (_context103.prev = _context103.next) {\n                      case 0:\n                        _context103.next = 2;\n                        return (0, o.put)(g.error(e));\n\n                      case 2:\n                      case \"end\":\n                        return _context103.stop();\n                    }\n                  }\n                }, _callee79);\n              })(t), \"t2\", 7);\n\n            case 7:\n            case \"end\":\n              return _context104.stop();\n          }\n        }\n      }, _marked24);\n    }\n\n    function C(e) {\n      var _iterator10, _step10, _t22;\n\n      return _regeneratorRuntime.wrap(function C$(_context105) {\n        while (1) {\n          switch (_context105.prev = _context105.next) {\n            case 0:\n              _iterator10 = _createForOfIteratorHelper((0, r.default)(e));\n              _context105.prev = 1;\n\n              _iterator10.s();\n\n            case 3:\n              if ((_step10 = _iterator10.n()).done) {\n                _context105.next = 8;\n                break;\n              }\n\n              _t22 = _step10.value;\n              return _context105.delegateYield(f.addContext(_t22), \"t0\", 6);\n\n            case 6:\n              _context105.next = 3;\n              break;\n\n            case 8:\n              _context105.next = 13;\n              break;\n\n            case 10:\n              _context105.prev = 10;\n              _context105.t1 = _context105[\"catch\"](1);\n\n              _iterator10.e(_context105.t1);\n\n            case 13:\n              _context105.prev = 13;\n\n              _iterator10.f();\n\n              return _context105.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context105.stop();\n          }\n        }\n      }, _marked25, null, [[1, 10, 13, 16]]);\n    }\n\n    function I(e) {\n      return _regeneratorRuntime.wrap(function I$(_context106) {\n        while (1) {\n          switch (_context106.prev = _context106.next) {\n            case 0:\n              return _context106.delegateYield(u.addSources(e), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context106.stop();\n          }\n        }\n      }, _marked26);\n    }\n\n    function O(e, t) {\n      return _regeneratorRuntime.wrap(function O$(_context107) {\n        while (1) {\n          switch (_context107.prev = _context107.next) {\n            case 0:\n              return _context107.delegateYield(f.addInstance(e, t), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context107.stop();\n          }\n        }\n      }, _marked27);\n    }\n\n    t.default = (0, l.prefixName)(\"session\", R);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var _marked28 = /*#__PURE__*/_regeneratorRuntime.mark(p);\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = d(n(15)),\n        a = d(n(6));\n    t.visitAll = /*#__PURE__*/_regeneratorRuntime.mark(function _callee80() {\n      var e, t;\n      return _regeneratorRuntime.wrap(function _callee80$(_context108) {\n        while (1) {\n          switch (_context108.prev = _context108.next) {\n            case 0:\n              _context108.next = 2;\n              return (0, o.select)(s.default.views.sources);\n\n            case 2:\n              e = _context108.sent;\n              t = (0, c.default)((0, r.default)(e).map(function (_ref130) {\n                var e = _ref130.byId;\n                return e;\n              })).filter(function (e) {\n                return e;\n              });\n              _context108.next = 6;\n              return (0, o.all)(t.filter(function (_ref131) {\n                var e = _ref131.ast;\n                return e;\n              }).map(function (_ref132) {\n                var e = _ref132.ast,\n                    t = _ref132.id,\n                    n = _ref132.compilationId;\n                return (0, o.call)(p, n, t, e);\n              }));\n\n            case 6:\n              f(\"done visiting\");\n\n            case 7:\n            case \"end\":\n              return _context108.stop();\n          }\n        }\n      }, _callee80);\n    });\n\n    var i = d(n(0)),\n        o = n(5),\n        l = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(18)),\n        s = d(n(26)),\n        c = d(n(27)),\n        u = d(n(16));\n\n    function d(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var f = (0, i.default)(\"debugger:ast:sagas\");\n\n    function p(e, t, n) {\n      var r,\n          i,\n          _iterator11,\n          _step11,\n          _step11$value,\n          _a8,\n          _o3,\n          _iterator14,\n          _step14,\n          _step14$value,\n          _i5,\n          _o5,\n          _args115 = arguments;\n\n      return _regeneratorRuntime.wrap(function p$(_context115) {\n        while (1) {\n          switch (_context115.prev = _context115.next) {\n            case 0:\n              r = _args115.length > 3 && _args115[3] !== undefined ? _args115[3] : \"\";\n              i = _args115.length > 4 && _args115[4] !== undefined ? _args115[4] : null;\n              f(\"walking %d %o %o\", t, r, n);\n              return _context115.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81(e, t, n, r, a) {\n                return _regeneratorRuntime.wrap(function _callee81$(_context109) {\n                  while (1) {\n                    switch (_context109.prev = _context109.next) {\n                      case 0:\n                        if (!(f(\"entering %d %s\", t, r), !(n instanceof Object))) {\n                          _context109.next = 2;\n                          break;\n                        }\n\n                        return _context109.abrupt(\"return\");\n\n                      case 2:\n                        _context109.t0 = void 0 !== n.id;\n\n                        if (!_context109.t0) {\n                          _context109.next = 6;\n                          break;\n                        }\n\n                        f(\"%s recording scope %s\", r, n.id);\n                        return _context109.delegateYield(l.scope(n.id, r, a, t, e), \"t1\", 6);\n\n                      case 6:\n                        _context109.t2 = n.nodeType;\n                        _context109.next = _context109.t2 === \"VariableDeclaration\" ? 9 : _context109.t2 === \"ContractDefinition\" ? 12 : _context109.t2 === \"StructDefinition\" ? 12 : _context109.t2 === \"EnumDefinition\" ? 12 : 14;\n                        break;\n\n                      case 9:\n                        f(\"%s recording variable %o\", r, n);\n                        return _context109.delegateYield(l.declare(n, e), \"t3\", 11);\n\n                      case 11:\n                        return _context109.abrupt(\"break\", 14);\n\n                      case 12:\n                        f(\"%s recording type %o\", r, n);\n                        return _context109.delegateYield(l.defineType(n, e), \"t4\", 14);\n\n                      case 14:\n                      case \"end\":\n                        return _context109.stop();\n                    }\n                  }\n                }, _callee81);\n              })(e, t, n, r, i), \"t0\", 4);\n\n            case 4:\n              if (!Array.isArray(n)) {\n                _context115.next = 23;\n                break;\n              }\n\n              _iterator11 = _createForOfIteratorHelper(n.entries());\n              _context115.prev = 6;\n\n              _iterator11.s();\n\n            case 8:\n              if ((_step11 = _iterator11.n()).done) {\n                _context115.next = 13;\n                break;\n              }\n\n              _step11$value = _slicedToArray(_step11.value, 2), _a8 = _step11$value[0], _o3 = _step11$value[1];\n              return _context115.delegateYield(p(e, t, _o3, \"\".concat(r, \"/\").concat(_a8), i), \"t1\", 11);\n\n            case 11:\n              _context115.next = 8;\n              break;\n\n            case 13:\n              _context115.next = 18;\n              break;\n\n            case 15:\n              _context115.prev = 15;\n              _context115.t2 = _context115[\"catch\"](6);\n\n              _iterator11.e(_context115.t2);\n\n            case 18:\n              _context115.prev = 18;\n\n              _iterator11.f();\n\n              return _context115.finish(18);\n\n            case 21:\n              _context115.next = 44;\n              break;\n\n            case 23:\n              if (!(n && \"YulBlock\" === n.nodeType)) {\n                _context115.next = 27;\n                break;\n              }\n\n              return _context115.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84(e, t, n, r, i) {\n                return _regeneratorRuntime.wrap(function _callee84$(_context113) {\n                  while (1) {\n                    switch (_context113.prev = _context113.next) {\n                      case 0:\n                        return _context113.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function e(t, n, r, i, o, s, c) {\n                          var _iterator12, _step12, _step12$value, _a9, _l4, _iterator13, _step13, _step13$value, _l5, _c2;\n\n                          return _regeneratorRuntime.wrap(function e$(_context112) {\n                            while (1) {\n                              switch (_context112.prev = _context112.next) {\n                                case 0:\n                                  return _context112.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82(e, t, n, r, a, i, o) {\n                                    var _o4;\n\n                                    return _regeneratorRuntime.wrap(function _callee82$(_context110) {\n                                      while (1) {\n                                        switch (_context110.prev = _context110.next) {\n                                          case 0:\n                                            if (!(f(\"entering %d %s\", t, r), !n)) {\n                                              _context110.next = 2;\n                                              break;\n                                            }\n\n                                            return _context110.abrupt(\"return\");\n\n                                          case 2:\n                                            _context110.t0 = void 0 !== n.src;\n\n                                            if (!_context110.t0) {\n                                              _context110.next = 6;\n                                              break;\n                                            }\n\n                                            f(\"scoping!\");\n                                            return _context110.delegateYield(l.yulScope(r, t, e, o), \"t1\", 6);\n\n                                          case 6:\n                                            if (!(\"YulTypedName\" === n.nodeType)) {\n                                              _context110.next = 9;\n                                              break;\n                                            }\n\n                                            _o4 = function e(t, n, r, a) {\n                                              f(\"pointer: %s\", n), f(\"basePointer: %s\", a);\n                                              var i = n.slice(a.length);\n                                              f(\"relativePointer: %s\", i);\n                                              var o = i.replace(/\\/[^/]*$/, \"\"),\n                                                  l = a + o;\n                                              f(\"parentPointer: %s\", l);\n                                              var s = u.default.get(r, o);\n                                              return \"YulBlock\" === t.nodeType ? \"YulForLoop\" === s.nodeType && n === l + \"/pre\" ? l : n : \"YulFunctionDefinition\" === t.nodeType ? n : e(s, l, r, a);\n                                            }(n, r, a, i);\n\n                                            return _context110.delegateYield(l.yulDeclare(n, r, _o4, t, e), \"t2\", 9);\n\n                                          case 9:\n                                          case \"end\":\n                                            return _context110.stop();\n                                        }\n                                      }\n                                    }, _callee82);\n                                  })(t, n, r, i, o, s, c), \"t0\", 1);\n\n                                case 1:\n                                  if (!Array.isArray(r)) {\n                                    _context112.next = 20;\n                                    break;\n                                  }\n\n                                  _iterator12 = _createForOfIteratorHelper(r.entries());\n                                  _context112.prev = 3;\n\n                                  _iterator12.s();\n\n                                case 5:\n                                  if ((_step12 = _iterator12.n()).done) {\n                                    _context112.next = 10;\n                                    break;\n                                  }\n\n                                  _step12$value = _slicedToArray(_step12.value, 2), _a9 = _step12$value[0], _l4 = _step12$value[1];\n                                  return _context112.delegateYield(e(t, n, _l4, \"\".concat(i, \"/\").concat(_a9), o, s), \"t1\", 8);\n\n                                case 8:\n                                  _context112.next = 5;\n                                  break;\n\n                                case 10:\n                                  _context112.next = 15;\n                                  break;\n\n                                case 12:\n                                  _context112.prev = 12;\n                                  _context112.t2 = _context112[\"catch\"](3);\n\n                                  _iterator12.e(_context112.t2);\n\n                                case 15:\n                                  _context112.prev = 15;\n\n                                  _iterator12.f();\n\n                                  return _context112.finish(15);\n\n                                case 18:\n                                  _context112.next = 37;\n                                  break;\n\n                                case 20:\n                                  if (!(r instanceof Object)) {\n                                    _context112.next = 37;\n                                    break;\n                                  }\n\n                                  _iterator13 = _createForOfIteratorHelper((0, a.default)(r));\n                                  _context112.prev = 22;\n\n                                  _iterator13.s();\n\n                                case 24:\n                                  if ((_step13 = _iterator13.n()).done) {\n                                    _context112.next = 29;\n                                    break;\n                                  }\n\n                                  _step13$value = _slicedToArray(_step13.value, 2), _l5 = _step13$value[0], _c2 = _step13$value[1];\n                                  return _context112.delegateYield(e(t, n, _c2, \"\".concat(i, \"/\").concat(_l5), o, s), \"t3\", 27);\n\n                                case 27:\n                                  _context112.next = 24;\n                                  break;\n\n                                case 29:\n                                  _context112.next = 34;\n                                  break;\n\n                                case 31:\n                                  _context112.prev = 31;\n                                  _context112.t4 = _context112[\"catch\"](22);\n\n                                  _iterator13.e(_context112.t4);\n\n                                case 34:\n                                  _context112.prev = 34;\n\n                                  _iterator13.f();\n\n                                  return _context112.finish(34);\n\n                                case 37:\n                                  return _context112.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(e, t, n, r, a, i, o) {\n                                    return _regeneratorRuntime.wrap(function _callee83$(_context111) {\n                                      while (1) {\n                                        switch (_context111.prev = _context111.next) {\n                                          case 0:\n                                            f(\"exiting %d %s\", t, r);\n\n                                          case 1:\n                                          case \"end\":\n                                            return _context111.stop();\n                                        }\n                                      }\n                                    }, _callee83);\n                                  })(0, n, 0, i), \"t5\", 38);\n\n                                case 38:\n                                case \"end\":\n                                  return _context112.stop();\n                              }\n                            }\n                          }, e, null, [[3, 12, 15, 18], [22, 31, 34, 37]]);\n                        })(e, t, n, r, n, r, i), \"t0\", 1);\n\n                      case 1:\n                      case \"end\":\n                        return _context113.stop();\n                    }\n                  }\n                }, _callee84);\n              })(e, t, n, r, i), \"t3\", 25);\n\n            case 25:\n              _context115.next = 44;\n              break;\n\n            case 27:\n              if (!(n instanceof Object)) {\n                _context115.next = 44;\n                break;\n              }\n\n              _iterator14 = _createForOfIteratorHelper((0, a.default)(n));\n              _context115.prev = 29;\n\n              _iterator14.s();\n\n            case 31:\n              if ((_step14 = _iterator14.n()).done) {\n                _context115.next = 36;\n                break;\n              }\n\n              _step14$value = _slicedToArray(_step14.value, 2), _i5 = _step14$value[0], _o5 = _step14$value[1];\n              return _context115.delegateYield(p(e, t, _o5, \"\".concat(r, \"/\").concat(_i5), n.id), \"t4\", 34);\n\n            case 34:\n              _context115.next = 31;\n              break;\n\n            case 36:\n              _context115.next = 41;\n              break;\n\n            case 38:\n              _context115.prev = 38;\n              _context115.t5 = _context115[\"catch\"](29);\n\n              _iterator14.e(_context115.t5);\n\n            case 41:\n              _context115.prev = 41;\n\n              _iterator14.f();\n\n              return _context115.finish(41);\n\n            case 44:\n              return _context115.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85(e, t, n, r) {\n                return _regeneratorRuntime.wrap(function _callee85$(_context114) {\n                  while (1) {\n                    switch (_context114.prev = _context114.next) {\n                      case 0:\n                        f(\"exiting %d %s\", t, r);\n\n                      case 1:\n                      case \"end\":\n                        return _context114.stop();\n                    }\n                  }\n                }, _callee85);\n              })(0, t, 0, r), \"t6\", 45);\n\n            case 45:\n            case \"end\":\n              return _context115.stop();\n          }\n        }\n      }, _marked28, null, [[6, 15, 18, 21], [29, 38, 41, 44]]);\n    }\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r = f(n(0)),\n        a = n(7),\n        i = f(n(59)),\n        o = f(n(60)),\n        l = f(n(61)),\n        s = f(n(62)),\n        c = f(n(63)),\n        u = f(n(64)),\n        d = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(14));\n\n    function f(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var p = (0, r.default)(\"debugger:session:reducers\");\n    var y = (0, a.combineReducers)({\n      ready: function ready() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.READY:\n            return p(\"readying\"), !0;\n\n          case d.WAIT:\n            return !1;\n\n          default:\n            return e;\n        }\n      },\n      lastLoadingError: function lastLoadingError() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.ERROR:\n            return p(\"error: %o\", t.error), t.error;\n\n          case d.WAIT:\n            return null;\n\n          default:\n            return e;\n        }\n      },\n      transaction: function transaction() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.SAVE_TRANSACTION:\n            return t.transaction;\n\n          case d.UNLOAD_TRANSACTION:\n            return {};\n\n          default:\n            return e;\n        }\n      },\n      receipt: function receipt() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.SAVE_RECEIPT:\n            return t.receipt;\n\n          case d.UNLOAD_TRANSACTION:\n            return {};\n\n          default:\n            return e;\n        }\n      },\n      block: function block() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.SAVE_BLOCK:\n            return t.block;\n\n          case d.UNLOAD_TRANSACTION:\n            return {};\n\n          default:\n            return e;\n        }\n      },\n      lightMode: function lightMode() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case d.SET_LIGHT_MODE:\n            return !0;\n\n          case d.SET_FULL_MODE:\n            return !1;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        m = (0, a.combineReducers)({\n      session: y,\n      data: i.default,\n      evm: o.default,\n      solidity: l.default,\n      stacktrace: u.default,\n      trace: s.default,\n      controller: c.default\n    });\n    t.default = m;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = p(n(30)),\n        a = p(n(15)),\n        i = p(n(11)),\n        o = p(n(2)),\n        l = p(n(0)),\n        s = n(7),\n        c = f(n(29)),\n        u = f(n(3)),\n        d = n(1);\n\n    function f(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function p(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var y = (0, l.default)(\"debugger:data:reducers\"),\n        m = {\n      byCompilationId: {}\n    };\n    var g = {\n      storage: {},\n      memory: {},\n      abi: {},\n      state: {}\n    };\n    var b = (0, s.combineReducers)({\n      scopes: function scopes() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : m;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n        var n, r, a;\n\n        switch (t.type) {\n          case c.SCOPE:\n            {\n              var _a10 = t.compilationId,\n                  _i6 = t.id,\n                  _l6 = t.sourceId,\n                  _s2 = t.parentId,\n                  _c3 = t.pointer,\n                  _u4 = void 0 !== _i6 ? _i6 : (0, d.makePath)(_l6, _c3);\n\n              return r = {\n                byCompilationId: (0, o.default)({}, e.byCompilationId, _defineProperty({}, _a10, (0, o.default)({}, e.byCompilationId[_a10])))\n              }, r.byCompilationId[_a10] = (0, o.default)({}, r.byCompilationId[_a10], {\n                byAstRef: (0, o.default)({}, r.byCompilationId[_a10].byAstRef)\n              }), n = r.byCompilationId[_a10].byAstRef[_u4], r.byCompilationId[_a10].byAstRef[_u4] = (0, o.default)({}, n, {\n                id: _i6,\n                sourceId: _l6,\n                parentId: _s2,\n                pointer: _c3,\n                compilationId: _a10\n              }), r;\n            }\n\n          case c.DECLARE:\n            {\n              var _r8 = t.compilationId,\n                  _i7 = t.name,\n                  _l7 = t.astRef,\n                  _s3 = t.scopeAstRef;\n              return n = e.byCompilationId[_r8].byAstRef[_s3] || {}, a = n.variables || [], {\n                byCompilationId: (0, o.default)({}, e.byCompilationId, _defineProperty({}, _r8, (0, o.default)({}, e.byCompilationId[_r8], {\n                  byAstRef: (0, o.default)({}, e.byCompilationId[_r8].byAstRef, _defineProperty({}, _s3, (0, o.default)({}, n, {\n                    variables: [].concat(_toConsumableArray(a), [{\n                      name: _i7,\n                      astRef: _l7,\n                      compilationId: _r8\n                    }])\n                  })))\n                })))\n              };\n            }\n\n          default:\n            return e;\n        }\n      },\n      userDefinedTypes: function userDefinedTypes() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case c.DEFINE_TYPE:\n            return [].concat(_toConsumableArray(e), [{\n              id: t.node.id,\n              compilationId: t.compilationId\n            }]);\n\n          default:\n            return e;\n        }\n      },\n      allocations: function allocations() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : g;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n        return t.type === c.ALLOCATE ? {\n          storage: t.storage,\n          memory: t.memory,\n          abi: t.abi,\n          calldata: t.calldata,\n          state: t.state\n        } : e;\n      }\n    }),\n        A = [[{\n      builtin: \"msg\"\n    }, {\n      location: \"special\",\n      special: \"msg\"\n    }], [{\n      builtin: \"tx\"\n    }, {\n      location: \"special\",\n      special: \"tx\"\n    }], [{\n      builtin: \"block\"\n    }, {\n      location: \"special\",\n      special: \"block\"\n    }], [{\n      builtin: \"this\"\n    }, {\n      location: \"special\",\n      special: \"this\"\n    }], [{\n      builtin: \"now\"\n    }, {\n      location: \"special\",\n      special: \"timestamp\"\n    }]].map(function (_ref136) {\n      var _ref137 = _slicedToArray(_ref136, 2),\n          e = _ref137[0],\n          t = _ref137[1];\n\n      return (0, d.makeAssignment)(e, t);\n    }),\n        T = {\n      byId: (0, i.default).apply(void 0, [{}].concat(_toConsumableArray(A.map(function (e) {\n        return _defineProperty({}, e.id, e);\n      })))),\n      byCompilationId: {},\n      byBuiltin: (0, i.default).apply(void 0, [{}].concat(_toConsumableArray(A.map(function (e) {\n        return _defineProperty({}, e.builtin, [e.id]);\n      }))))\n    };\n    var E = {\n      byAddress: {}\n    };\n\n    var _ = (0, s.combineReducers)({\n      assignments: function assignments() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : T;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case c.ASSIGN:\n          case c.MAP_PATH_AND_ASSIGN:\n            return y(\"action.type %O\", t.type), y(\"action.assignments %O\", t.assignments), (0, a.default)(t.assignments).reduce(function (e, t) {\n              var n = t.id,\n                  a = t.astRef,\n                  i = t.compilationId;\n              return (0, o.default)({}, e, {\n                byId: (0, o.default)({}, e.byId, _defineProperty({}, n, t)),\n                byCompilationId: (0, o.default)({}, e.byCompilationId, _defineProperty({}, i, (0, o.default)({}, e.byCompilationId[i], {\n                  byAstRef: (0, o.default)({}, (e.byCompilationId[i] || {}).byAstRef, _defineProperty({}, a, _toConsumableArray(new r.default([].concat(_toConsumableArray(((e.byCompilationId[i] || {}).byAstRef || {})[a] || []), [n])))))\n                })))\n              });\n            }, e);\n\n          case c.RESET:\n            return T;\n\n          default:\n            return e;\n        }\n      },\n      mappedPaths: function mappedPaths() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : E;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case c.MAP_PATH_AND_ASSIGN:\n            var _n18 = t.address,\n                _r9 = t.slot,\n                _a11 = t.typeIdentifier,\n                _i8 = t.parentType;\n            y(\"typeIdentifier %s\", _a11), _a11 = u.Ast.Utils.regularizeTypeIdentifier(_a11), _i8 = u.Ast.Utils.regularizeTypeIdentifier(_i8), y(\"slot %o\", _r9);\n\n            var _l8 = u.Conversion.toHexString(u.Storage.Utils.slotAddress(_r9), u.Evm.Utils.WORD_SIZE),\n                _s4 = _r9.path ? u.Conversion.toHexString(u.Storage.Utils.slotAddress(_r9.path), u.Evm.Utils.WORD_SIZE) : void 0,\n                _d2 = (0, o.default)({}, e, {\n              byAddress: (0, o.default)({}, e.byAddress, _defineProperty({}, _n18, {\n                byType: (0, o.default)({}, (e.byAddress[_n18] || {\n                  byType: {}\n                }).byType)\n              }))\n            });\n\n            if (_d2.byAddress[_n18].byType = (0, o.default)({}, _d2.byAddress[_n18].byType, _defineProperty({}, _a11, {\n              bySlotAddress: (0, o.default)({}, (_d2.byAddress[_n18].byType[_a11] || {\n                bySlotAddress: {}\n              }).bySlotAddress)\n            })), void 0 === _d2.byAddress[_n18].byType[_a11].bySlotAddress[_l8]) {\n              var _e31;\n\n              y(\"parentAddress %o\", _s4), _e31 = void 0 !== _s4 && _d2.byAddress[_n18].byType[_i8] && _d2.byAddress[_n18].byType[_i8].bySlotAddress[_s4] ? (0, o.default)({}, _r9, {\n                path: _d2.byAddress[_n18].byType[_i8].bySlotAddress[_s4]\n              }) : _r9, _d2.byAddress[_n18].byType[_a11].bySlotAddress[_l8] = _e31;\n            }\n\n            return _d2;\n\n          case c.RESET:\n            return E;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        v = (0, s.combineReducers)({\n      info: b,\n      proc: _\n    });\n\n    t.default = v;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n    var r = u(n(2)),\n        a = u(n(0)),\n        i = n(7),\n        o = c(n(31)),\n        l = c(n(3)),\n        s = u(n(17));\n\n    function c(e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }\n\n    function u(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var d = (0, a.default)(\"debugger:evm:reducers\"),\n        f = {\n      byContext: {}\n    };\n    var p = (0, i.combineReducers)({\n      contexts: function contexts() {\n        var _n20;\n\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : f;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.ADD_CONTEXT:\n            var _n19 = t.context,\n                _a12 = t.contractName,\n                _i9 = t.binary,\n                _s5 = t.sourceMap,\n                _c4 = t.primarySource,\n                _u5 = t.immutableReferences,\n                _f2 = t.compiler,\n                _p2 = t.compilationId,\n                _y = t.abi,\n                _m = t.contractId,\n                _g = t.contractKind,\n                _b2 = t.isConstructor,\n                _A = t.externalSolidity;\n            return d(\"action %O\", t), (0, r.default)({}, e, {\n              byContext: (0, r.default)({}, e.byContext, _defineProperty({}, _n19, (_n20 = {\n                context: _n19,\n                contractName: _a12\n              }, _defineProperty(_n20, \"context\", _n19), _defineProperty(_n20, \"binary\", _i9), _defineProperty(_n20, \"sourceMap\", _s5), _defineProperty(_n20, \"primarySource\", _c4), _defineProperty(_n20, \"immutableReferences\", _u5), _defineProperty(_n20, \"compiler\", _f2), _defineProperty(_n20, \"compilationId\", _p2), _defineProperty(_n20, \"abi\", _y), _defineProperty(_n20, \"contractId\", _m), _defineProperty(_n20, \"contractKind\", _g), _defineProperty(_n20, \"isConstructor\", _b2), _defineProperty(_n20, \"externalSolidity\", _A), _defineProperty(_n20, \"payable\", l.AbiData.Utils.abiHasPayableFallback(_y)), _n20)))\n            });\n\n          default:\n            return e;\n        }\n      }\n    }),\n        y = {\n      gasprice: new s.default(0),\n      origin: l.Evm.Utils.ZERO_ADDRESS\n    };\n    var m = {\n      coinbase: l.Evm.Utils.ZERO_ADDRESS,\n      difficulty: new s.default(0),\n      gaslimit: new s.default(0),\n      number: new s.default(0),\n      timestamp: new s.default(0)\n    };\n    var g = (0, i.combineReducers)({\n      tx: function tx() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : y;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.SAVE_GLOBALS:\n            var _n21 = t.gasprice,\n                _r10 = t.origin;\n            return {\n              gasprice: _n21,\n              origin: _r10\n            };\n\n          case o.UNLOAD_TRANSACTION:\n            return y;\n\n          default:\n            return e;\n        }\n      },\n      block: function block() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : m;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.SAVE_GLOBALS:\n            return t.block;\n\n          case o.UNLOAD_TRANSACTION:\n            return m;\n\n          default:\n            return e;\n        }\n      }\n    });\n    var b = (0, i.combineReducers)({\n      globals: g,\n      status: function status() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.SAVE_STATUS:\n            return t.status;\n\n          case o.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      },\n      initialCall: function initialCall() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.CALL:\n          case o.CREATE:\n            return null !== e ? e : t;\n\n          case o.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      }\n    });\n    var A = [{\n      accounts: {}\n    }];\n    var T = (0, i.combineReducers)({\n      callstack: function callstack() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case o.CALL:\n            {\n              var _n22 = t.address,\n                  _r11 = t.data,\n                  _a13 = t.storageAddress,\n                  _i10 = t.sender,\n                  _o6 = t.value;\n              return e.concat([{\n                address: _n22,\n                data: _r11,\n                storageAddress: _a13,\n                sender: _i10,\n                value: _o6\n              }]);\n            }\n\n          case o.CREATE:\n            {\n              var _n23 = t.binary,\n                  _r12 = t.storageAddress,\n                  _a14 = t.sender,\n                  _i11 = t.value;\n              return e.concat([{\n                binary: _n23,\n                data: \"0x\",\n                storageAddress: _r12,\n                sender: _a14,\n                value: _i11\n              }]);\n            }\n\n          case o.RETURN_CALL:\n          case o.RETURN_CREATE:\n          case o.FAIL:\n            return e.length > 1 ? e.slice(0, -1) : e;\n\n          case o.RESET:\n          case o.UNLOAD_TRANSACTION:\n            return [];\n\n          default:\n            return e;\n        }\n      },\n      codex: function codex() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : A;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n        var n, a;\n\n        var i = function i(e, t, n, a) {\n          return (0, r.default)({}, e, {\n            accounts: (0, r.default)({}, e.accounts, _defineProperty({}, t, (0, r.default)({\n              code: \"0x\",\n              context: null\n            }, e.accounts[t], {\n              storage: (0, r.default)({}, (e.accounts[t] || {}).storage, _defineProperty({}, n, a))\n            })))\n          });\n        },\n            s = function s(e, t, n, a) {\n          var i = e.accounts[t] || {\n            storage: {}\n          };\n          return (0, r.default)({}, e, {\n            accounts: (0, r.default)({}, e.accounts, _defineProperty({}, t, (0, r.default)({}, i, {\n              code: n,\n              context: a\n            })))\n          });\n        },\n            c = function c(e) {\n          return e.length > 2 ? e.slice(0, -2).concat([e[e.length - 1]]) : e;\n        };\n\n        switch (t.type) {\n          case o.CALL:\n            return d(\"call action\"), d(\"codex: %O\", e), [].concat(_toConsumableArray(e), [e[e.length - 1]]);\n\n          case o.CREATE:\n            return d(\"create action\"), n = [].concat(_toConsumableArray(e), [e[e.length - 1]]), a = n[n.length - 1], void 0 !== a.accounts[t.storageAddress] || t.storageAddress === l.Evm.Utils.ZERO_ADDRESS ? n : (n[n.length - 1] = (0, r.default)({}, a, {\n              accounts: (0, r.default)({}, a.accounts, _defineProperty({}, t.storageAddress, {\n                storage: {},\n                code: \"0x\",\n                context: null\n              }))\n            }), n);\n\n          case o.STORE:\n            {\n              d(\"store action\");\n              var _r13 = t.address,\n                  _o7 = t.slot,\n                  _s6 = t.value;\n              return _r13 === l.Evm.Utils.ZERO_ADDRESS ? e : (n = e.slice(), a = n[n.length - 1], n[n.length - 1] = i(a, _r13, _o7, _s6), n);\n            }\n\n          case o.LOAD:\n            {\n              d(\"load action\");\n              var _n24 = t.address,\n                  _r14 = t.slot,\n                  _o8 = t.value;\n              return _n24 === l.Evm.Utils.ZERO_ADDRESS ? e : (a = e[e.length - 1], void 0 !== a.accounts[_n24].storage[_r14] ? e : e.map(function (e) {\n                return i(e, _n24, _r14, _o8);\n              }));\n            }\n\n          case o.RETURN_CALL:\n            return d(\"return from call\"), c(e);\n\n          case o.RETURN_CREATE:\n            {\n              d(\"return from create\");\n              var _r15 = t.address,\n                  _a15 = t.code,\n                  _i12 = t.context;\n              return n = e.slice(), n[n.length - 1] = s(n[n.length - 1], _r15, _a15, _i12), d(\"newState: %O\", n), c(n);\n            }\n\n          case o.FAIL:\n            return d(\"fail action\"), (u = e).length > 2 ? u.slice(0, -1) : u;\n\n          case o.RESET:\n            return d(\"reset action\"), [e[0]];\n\n          case o.UNLOAD_TRANSACTION:\n            return d(\"unload action\"), A;\n\n          case o.ADD_INSTANCE:\n            {\n              d(\"adding instance\");\n              var _n25 = t.address,\n                  _r16 = t.binary,\n                  _a16 = t.context;\n              return e.map(function (e) {\n                return s(e, _n25, _r16, _a16);\n              });\n            }\n\n          default:\n            return e;\n        }\n\n        var u;\n      }\n    }),\n        E = (0, i.combineReducers)({\n      info: p,\n      transaction: b,\n      proc: T\n    });\n    t.default = E;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r = s(n(6)),\n        a = s(n(11)),\n        i = s(n(2)),\n        o = n(7),\n        l = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(37));\n\n    function s(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    var c = {\n      byCompilationId: {}\n    };\n    var u = (0, o.combineReducers)({\n      sources: function sources() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : c;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.ADD_SOURCES:\n            return {\n              byCompilationId: (0, i.default)({}, e.byCompilationId, (0, a.default).apply(void 0, [{}].concat(_toConsumableArray((0, r.default)(t.compilations).map(function (_ref150) {\n                var _ref151 = _slicedToArray(_ref150, 2),\n                    e = _ref151[0],\n                    t = _ref151[1];\n\n                return _defineProperty({}, e, {\n                  byId: t\n                });\n              })))))\n            };\n\n          default:\n            return e;\n        }\n      }\n    });\n    var d = (0, o.combineReducers)({\n      functionDepthStack: function functionDepthStack() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.JUMP:\n            var _r17 = e.slice();\n\n            var _a17 = \"i\" === (n = t.jumpDirection) ? 1 : \"o\" === n ? -1 : 0;\n\n            var _i13 = _r17[_r17.length - 1],\n                _o9 = _r17.length > 1 ? _r17[_r17.length - 2] : -1;\n\n            return _r17[_r17.length - 1] = Math.max(_i13 + _a17, _o9 + 1), _r17;\n\n          case l.RESET:\n            return [0];\n\n          case l.UNLOAD_TRANSACTION:\n            return [];\n\n          case l.EXTERNAL_CALL:\n            return 0 === e.length ? [0] : [].concat(_toConsumableArray(e), [e[e.length - 1] + 1]);\n\n          case l.EXTERNAL_RETURN:\n            return e.length > 1 ? e.slice(0, -1) : e;\n\n          default:\n            return e;\n        }\n\n        var n;\n      },\n      nextFrameIsPhantom: function nextFrameIsPhantom() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.CLEAR_PHANTOM_GUARD:\n          case l.EXTERNAL_RETURN:\n            return !1;\n\n          case l.EXTERNAL_CALL:\n          case l.RESET:\n            return t.guard;\n\n          case l.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        f = (0, o.combineReducers)({\n      info: u,\n      proc: d\n    });\n    t.default = f;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r,\n        a = n(0),\n        i = (r = a) && r.__esModule ? r : {\n      default: r\n    },\n        o = n(7),\n        l = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(12));\n\n    var s = (0, i.default)(\"debugger:trace:reducers\");\n    var c = (0, o.combineReducers)({\n      steps: function steps() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.SAVE_STEPS:\n            return t.steps;\n\n          case l.UNLOAD_TRANSACTION:\n            return s(\"unloading\"), null;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        u = (0, o.combineReducers)({\n      index: function index() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.TOCK:\n            return e + 1;\n\n          case l.RESET:\n          case l.UNLOAD_TRANSACTION:\n            return 0;\n\n          default:\n            return e;\n        }\n      },\n      finished: function finished() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.END_OF_TRACE:\n            return !0;\n\n          case l.RESET:\n          case l.UNLOAD_TRANSACTION:\n            return !1;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        d = (0, o.combineReducers)({\n      submoduleCount: function submoduleCount() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.SET_SUBMODULE_COUNT:\n            return t.count;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        f = (0, o.combineReducers)({\n      transaction: c,\n      proc: u,\n      application: d\n    });\n    t.default = f;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r,\n        a = n(0),\n        i = (r = a) && r.__esModule ? r : {\n      default: r\n    },\n        o = n(7),\n        l = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(20));\n\n    var s = (0, i.default)(\"debugger:controller:reducers\");\n    var c = (0, o.combineReducers)({\n      breakpoints: function breakpoints() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.ADD_BREAKPOINT:\n            return e.filter(function (e) {\n              return e.compilationId === t.breakpoint.compilationId && e.sourceId === t.breakpoint.sourceId && e.line === t.breakpoint.line && e.node === t.breakpoint.node;\n            }).length > 0 ? e : e.concat([t.breakpoint]);\n\n          case l.REMOVE_BREAKPOINT:\n            return e.filter(function (e) {\n              return e.compilationId !== t.breakpoint.compilationId || e.sourceId !== t.breakpoint.sourceId || e.line !== t.breakpoint.line || e.node !== t.breakpoint.node;\n            });\n\n          case l.REMOVE_ALL_BREAKPOINTS:\n            return [];\n\n          default:\n            return e;\n        }\n      },\n      isStepping: function isStepping() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case l.START_STEPPING:\n            return s(\"got step start action\"), !0;\n\n          case l.DONE_STEPPING:\n            return s(\"got step stop action\"), !1;\n\n          default:\n            return e;\n        }\n      }\n    });\n    t.default = c;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n\n    var r,\n        a = n(0),\n        i = (r = a) && r.__esModule ? r : {\n      default: r\n    },\n        o = n(7),\n        l = n(1),\n        s = function (e) {\n      if (e && e.__esModule) return e;\n      var t = {};\n      if (null != e) for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n      return t.default = e, t;\n    }(n(39));\n\n    (0, i.default)(\"debugger:stacktrace:reducers\");\n    var c = (0, o.combineReducers)({\n      callstack: function callstack() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n        var n;\n\n        switch (t.type) {\n          case s.JUMP_IN:\n            var _r18 = t.location,\n                _a18 = t.functionNode,\n                _i14 = t.contractNode;\n            return n = {\n              type: \"internal\",\n              calledFromLocation: _r18,\n              address: e[e.length - 1].address,\n              functionName: !_a18 || \"FunctionDefinition\" !== _a18.nodeType && \"YulFunctionDefinition\" !== _a18.nodeType ? void 0 : _a18.name,\n              contractName: _i14 && \"ContractDefinition\" === _i14.nodeType ? _i14.name : void 0\n            }, [].concat(_toConsumableArray(e), [n]);\n\n          case s.JUMP_OUT:\n            var _o10 = e[e.length - 1];\n            return _o10 && \"internal\" === _o10.type ? e.slice(0, -1) : e;\n\n          case s.EXTERNAL_CALL:\n            return n = {\n              type: \"external\",\n              address: t.address,\n              calledFromLocation: t.location,\n              functionName: void 0,\n              contractName: t.context.contractName\n            }, [].concat(_toConsumableArray(e), [n]);\n\n          case s.EXECUTE_RETURN:\n            return (0, l.popNWhere)(e, t.counter, function (e) {\n              return \"external\" === e.type;\n            });\n\n          case s.RESET:\n            return [e[0]];\n\n          case s.UNLOAD_TRANSACTION:\n            return [];\n\n          default:\n            return e;\n        }\n      },\n      returnCounter: function returnCounter() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case s.EXTERNAL_RETURN:\n            return e + 1;\n\n          case s.EXECUTE_RETURN:\n          case s.RESET:\n          case s.UNLOAD_TRANSACTION:\n            return 0;\n\n          default:\n            return e;\n        }\n      },\n      lastPosition: function lastPosition() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case s.JUMP_IN:\n          case s.JUMP_OUT:\n          case s.ETERNAL_CALL:\n          case s.EXTERNAL_RETURN:\n          case s.UPDATE_POSITION:\n          case s.EXECUTE_RETURN:\n            var _n26 = t.location;\n            return void 0 === _n26.source.id ? e : _n26;\n\n          case s.RESET:\n          case s.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      },\n      innerReturnPosition: function innerReturnPosition() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case s.EXTERNAL_RETURN:\n            return e || t.from;\n\n          case s.EXECUTE_RETURN:\n          case s.RESET:\n          case s.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      },\n      innerReturnStatus: function innerReturnStatus() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var t = arguments.length > 1 ? arguments[1] : undefined;\n\n        switch (t.type) {\n          case s.EXTERNAL_RETURN:\n            return null === e ? t.status : e;\n\n          case s.EXECUTE_RETURN:\n          case s.RESET:\n          case s.UNLOAD_TRANSACTION:\n            return null;\n\n          default:\n            return e;\n        }\n      }\n    }),\n        u = (0, o.combineReducers)({\n      proc: c\n    });\n    t.default = u;\n  }, function (e, t) {\n    e.exports = require(\"@truffle/compile-solidity/legacy/shims\");\n  }]);\n});","map":{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","external \"debug\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/helpers/index.js","external \"babel-runtime/helpers/extends\"","external \"@truffle/codec\"","external \"reselect-tree\"","external \"redux-saga/effects\"","external \"babel-runtime/core-js/object/entries\"","external \"redux\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/trace/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/evm/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/solidity/selectors/index.js","external \"babel-runtime/core-js/object/assign\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/trace/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/trace/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/session/actions/index.js","external \"babel-runtime/core-js/object/values\"","external \"json-pointer\"","external \"bn.js\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/data/sagas/index.js","external \"babel-runtime/helpers/asyncToGenerator\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/controller/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/data/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/stacktrace/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/session/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/evm/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/controller/selectors/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/ast/selectors/index.js","external \"lodash.flatten\"","external \"semver\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/data/actions/index.js","external \"babel-runtime/core-js/set\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/evm/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/web3/sagas/index.js","external \"web3\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/controller/sagas/index.js","external \"babel-runtime/core-js/object/keys\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/solidity/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/solidity/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/stacktrace/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/stacktrace/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/debugger.js","external \"source-map-support/register\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/debugger.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/session/index.js","external \"babel-runtime/core-js/promise\"","external \"json-stable-stringify\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/store/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/store/production.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/store/common.js","external \"redux-saga\"","external \"@truffle/solidity-utils\"","external \"lodash.zipwith\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/web3/actions/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/web3/adapter.js","external \"util\"","external \"lodash.sum\"","/home/sniffnoy/truffle/truffle/packages/debugger/lib/session/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/ast/sagas/index.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/session/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/data/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/evm/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/solidity/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/trace/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/controller/reducers.js","/home/sniffnoy/truffle/truffle/packages/debugger/lib/stacktrace/reducers.js","external \"@truffle/compile-solidity/legacy/shims\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Codec","isDeliberatelySkippedNodeType","node","includes","nodeType","isSkippedNodeType","typeDescriptions","undefined","Ast","Utils","typeClass","prefixName","prefix","fn","configurable","makePath","sourceId","pointer","popNWhere","array","numToRemove","predicate","newArray","slice","length","top","pop","keccak256","args","Conversion","toHexString","Evm","WORD_SIZE","stableKeccak256","obj","type","makeAssignment","idObj","ref","id","isCallMnemonic","op","isShortCallMnemonic","isDelegateCallMnemonicBroad","isDelegateCallMnemonicStrict","isStaticCallMnemonic","isCreateMnemonic","PAST_END_OF_TRACE","depth","error","gas","memory","stack","storage","gasCost","pc","trace","index","state","proc","loaded","steps","finished","finishedOrUnloaded","transaction","stepsRemaining","step","next","nextOfSameDepth","find","application","submoduleCount","ZERO_WORD","repeat","determineFullContext","address","binary","instances","search","contexts","contextId","isConstructor","Boolean","context","createStepSelectors","base","programCounter","isCall","isShortCall","isDelegateCallBroad","isDelegateCallStrict","isStaticCall","isCreate","isCreate2","isStore","isLoad","touchesStorage","stores","loads","path","startsWith","isJump","valueStored","callAddress","toAddress","createBinary","offset","parseInt","join","substring","padEnd","callData","short","argOffset","callValue","calls","delegates","isStatic","BN","toBN","createValue","storageAffected","callContext","evm","info","byContext","binaries","Contexts","findDebuggerContext","globals","tx","block","status","initialCall","startingContext","current","callstack","map","param","createdAddress","create2Address","ZERO_ADDRESS","storageAddress","ADDRESS_SIZE","isInstantCallOrCreate","creates","contextChange","isContextChange","currentDepth","nextDepth","isNormalHalting","isHalting","isExceptionalHalting","returnStatus","remaining","finalStatus","returnValue","valueLoaded","codex","_","rawStorage","accounts","code","debug","contextRequiresPhantomStackframes","compiler","semver","satisfies","version","includePrerelease","createMultistepSelectors","stepSelector","instruction","modifierDepth","source","sources","file","findOverlappingRange","compilationId","functions","sourceRange","SolidityUtils","getSourceRange","pointerAndNode","range","findRange","start","ast","solidity","byCompilationId","bottomStackframeRequiresPhantomFrame","byId","sourceMap","humanReadableSourceMap","getHumanReadableSourceMap","functionDepthStack","nextFrameIsPhantom","functionDepth","callRequiresPhantomFrame","instructions","getProcessedInstructionsForBinary","instructionAtProgramCounter","isSourceRangeFinal","functionsByProgramCounter","getFunctionsByProgramCounter","isMultiline","lines","line","end","willJump","jumpDirection","jump","willCall","isInstant","willReturn","nextMapped","views","compilations","makeOverlapFunction","SAVE_STEPS","saveSteps","NEXT","TICK","tick","TOCK","tock","END_OF_TRACE","endTrace","RESET","reset","UNLOAD_TRANSACTION","unloadTransaction","BACKTICK","backtick","SET_SUBMODULE_COUNT","setSubmoduleCount","count","actions","addSubmoduleToCount","advance","waitingForSubmodules","signalTickSagaCompletion","processTrace","filter","unload","saga","START","provider","txHash","LOAD_TRANSACTION","loadTransaction","INTERRUPT","interrupt","READY","ready","WAIT","wait","ERROR","RECORD_CONTRACTS","recordContracts","SAVE_TRANSACTION","saveTransaction","SAVE_RECEIPT","saveReceipt","receipt","SAVE_BLOCK","saveBlock","SET_LIGHT_MODE","setLightMode","SET_FULL_MODE","setFullMode","START_FULL_MODE","startFullMode","ADD_COMPILATIONS","addCompilations","web3","scope","nodeId","parentId","declare","yulScope","yulDeclare","scopePointer","defineType","tickSaga","variablesAndMappingsSaga","decode","definition","userDefinedTypes","data","mappingKeys","allocations","currentContext","internalFunctionsTable","Uint8Array","decoder","decodeVariable","result","done","request","response","requestCode","decodeReturnValue","returnAllocation","decodeReturndata","NO_CODE","blockNumber","obtainBinaries","addInstance","toBytes","atLastInstructionForSourceRange","nextPointer","scopes","inlined","storageAllocations","currentAssignments","assignments","mappedPaths","inModifier","inFunctionOrModifier","aboutToModify","modifier","modifierBeingInvoked","currentIndex","modifierArgumentIndex","parameters","parametersLeft","adjustment","stackSize","preambleAssignments","assignParameters","nextModifier","assign","returnSuffixes","returnVariables","vars","parameterSuffixes","bareLetSuffixes","bareLetsInYulAreHit","outerIndex","declaration","body","statements","innerIndex","variables","unshift","suffixes","concat","position","suffix","sourceAndPointer","assignment","astRef","stackframe","location","from","to","allocation","members","Number","fullId","varId","parentPointer","replace","parent","jsonpointer","variableSourceAndPointer","literalAssignments","baseExpression","isReference","referenceType","isMapping","keyDefinition","indexValue","decodeMappingKeySaga","indexExpression","fetchBasePath","slot","hashPath","isDynamicArray","asBN","muln","Storage","Allocate","storageSize","Import","definitionToType","words","mapPathAndAssign","typeIdentifier","expression","structType","memberAllocations","memberName","referencedDeclaration","memberAllocation","member","clone","indexDefinition","decodeMappingKeyCore","cleanBool","indexId","indexIdObj","fullIndexId","indexReference","isSimpleConstant","splicedDefinition","spliceLocation","indexConstantDeclaration","constant","indexConstantDefinition","kind","arguments","operator","recordAllocations","contracts","contractAllocationInfo","referenceDeclarations","getStorageAllocations","memoryAllocations","Memory","getMemoryAllocations","abiAllocations","AbiData","getAbiAllocations","calldataAllocations","getCalldataAllocations","stateAllocations","getStateAllocations","allocate","literal","Stack","Read","readStack","forModifier","reverseParameters","reverse","currentPosition","parameter","baseNode","ADVANCE","STEP_NEXT","stepNext","STEP_OVER","stepOver","STEP_INTO","stepInto","STEP_OUT","stepOut","CONTINUE","continueUntilBreakpoint","breakpoints","ADD_BREAKPOINT","addBreakpoint","breakpoint","REMOVE_BREAKPOINT","removeBreakpoint","REMOVE_ALL_BREAKPOINTS","removeAllBreakpoints","START_STEPPING","startStepping","DONE_STEPPING","doneStepping","identity","x","findAncestorOfType","types","modifierForInvocation","invocation","rawId","modifierName","baseName","rawNode","nodes","functionKind","debuggerContextToDecoderContext","contextHash","contractName","contractId","contractKind","abi","payable","computeSelectors","NOW_DEFINITION","src","typeString","MSG_DEFINITION","TX_DEFINITION","BLOCK_DEFINITION","final","newScope","linearizedBaseContractsFromBase","linearizedBaseContracts","variable","visibility","raw","byAstRef","entry","definitionToStoredType","deployedContext","constructorContext","immutableReferences","contractNode","compilationIdForType","byAddress","byType","bySlotAddress","number","toString","calldata","decodingKeys","decodingStarted","word","mapping","specials","sender","this","allAllocations","transformedAllocations","contract","function","nextInvocation","argument","modifierInvocation","invocationPointer","difference","rawIndex","match","identifiers","cur","msg","builtin","now","definitions","thisDefinition","identifier","builtins","refs","idHash","byBuiltin","constructorAllocations","functionAllocations","output","selector","returndata","invalid","generateReport","message","locations","frame","calledFromLocation","shift","push","names","functionName","report","nameInfo","strippedLocation","sourcePath","stacktrace","returnCounter","lastPosition","innerReturnPosition","innerReturnStatus","willJumpIn","willJumpOut","revertString","rawRevertMessage","revertDecodings","decodeRevert","revertStringInfo","asString","Buffer","asHex","positionWillChange","nextLocation","currentLocation","lastLocation","oldLocation","finalReport","session","affectedInstances","primarySource","readyOrError","waiting","lastLoadingError","isError","success","errored","lightMode","addContext","refreshInstances","begin","gasprice","saveGlobals","saveStatus","callstackAndCodexSaga","fail","currentCall","returnedBinary","returnedContext","returnCreate","returnCall","storedValue","store","loadedValue","load","anyNonSkippedInRange","sourceStart","sourceLength","sourceEnd","some","isOldStyleAssembly","AST","controller","executionContext","resolver","adjustedBreakpoint","lineLengths","split","lineStarts","isStepping","SCOPE","DECLARE","scopeAstRef","ASSIGN","MAP_PATH_AND_ASSIGN","parentType","DEFINE_TYPE","ALLOCATE","ADD_CONTEXT","externalSolidity","ADD_INSTANCE","REFRESH_INSTANCE","SAVE_GLOBALS","origin","SAVE_STATUS","CALL","CREATE","RETURN_CALL","RETURN_CREATE","FAIL","STORE","LOAD","padHexString","hexString","padStart","fetchTransactionInfo","adapter","getTrace","receiveTrace","getTransaction","getReceipt","getBlock","solidityBlock","coinbase","miner","difficulty","gaslimit","gasLimit","timestamp","receiveCall","input","gasPrice","Web3","utils","isAddress","contractAddress","fetchBinary","getDeployedCode","receiveBinary","inspectTransaction","inspect","action","RECEIVE_TRACE","ERROR_WEB3","RECEIVE_CALL","addresses","tasks","RECEIVE_BINARY","init","INIT_WEB3","Web3Adapter","INSPECT","FETCH_BINARY","STEP_SAGAS","exec","starting","upcoming","startingDepth","startingLocation","breakpointHit","currentLine","currentSourceId","currentCompilationId","previousLine","previousSourceId","currentNode","addSources","functionDepthSaga","externalReturn","guard","nextSource","clearPhantomGuard","externalCall","ADD_SOURCES","JUMP","EXTERNAL_CALL","EXTERNAL_RETURN","CLEAR_PHANTOM_GUARD","stacktraceSaga","positionUpdated","executeReturn","nextParent","jumpIn","jumpOut","nextContext","nextAddress","updatePosition","JUMP_IN","functionNode","JUMP_OUT","EXECUTE_RETURN","counter","UPDATE_POSITION","Debugger","default","forTx","options","files","Compilations","shimArtifacts","Session","forProject","astSelector","dataSelector","traceSelector","evmSelector","soliditySelector","stacktraceSelector","sessionSelector","controllerSelector","dataSagas","controllerSagas","sagas","constructor","moduleOptions","sagaMiddleware","reducer","rootSaga","_store","_sagaMiddleware","normalize","dispatch","_ready","accept","reject","unsubscribe","subscribe","view","readyAgainAfterLoading","sessionAction","hasStartedWaiting","compilation","unreliableSourceOrder","Error","bytecode","deployedBytecode","deployedBinary","deployedSourceMap","primarySourceId","primarySourceIndex","findIndex","getContractNode","schemaAbiToAbi","normalizeContexts","getState","_runSaga","run","stepperAction","hasStarted","resolve","decodeReady","decoded","connect","addExternalCompilations","configureStore","sagaArgs","initialState","composeEnhancers","compose","currentProvider","jsonrpc","method","params","Date","getTime","eth","getTransactionReceipt","blockNumberOrHash","getCode","LOAD_SAGAS","listenerSaga","forkListeners","recordContexts","recordSources","visitAll","processTransaction","err","fetchTx","mainApps","otherApps","apps","app","recordInstance","walk","handleEnter","Array","isArray","child","entries","handleYul","handleExit","yulWalk","basePointer","handleYulEnter","handleYulExit","_parentId","findYulScopePointer","relativePointer","relativeParentPointer","reduceState","DEFAULT_SCOPES","newState","DEFAULT_ALLOCATIONS","GLOBAL_ASSIGNMENTS","special","DEFAULT_ASSIGNMENTS","reduce","acc","DEFAULT_PATHS","regularizeTypeIdentifier","hexSlotAddress","slotAddress","parentAddress","newSlot","DEFAULT_CONTEXTS","abiHasPayableFallback","DEFAULT_TX","DEFAULT_BLOCK","DEFAULT_CODEX","topCodex","updateFrameStorage","updateFrameCode","existingPage","safeSave","DEFAULT_SOURCES","delta","belowTop","Math","max","newFrame","ETERNAL_CALL"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Debugger\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Debugger\"] = factory();\n\telse\n\t\troot[\"Debugger\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","module.exports = require(\"debug\");","import * as Codec from \"@truffle/codec\";\nimport stringify from \"json-stable-stringify\";\n\n/** AST node types that are skipped by stepNext() to filter out some noise */\nexport function isDeliberatelySkippedNodeType(node) {\n  const skippedTypes = [\n    \"ContractDefinition\",\n    \"VariableDeclaration\",\n    \"YulVariableDeclaration\",\n    \"YulBlock\"\n  ];\n  return skippedTypes.includes(node.nodeType);\n}\n\n//HACK\n//these aren't the only types of skipped nodes, but determining all skipped\n//nodes would be too difficult\nexport function isSkippedNodeType(node) {\n  const otherSkippedTypes = [\n    \"VariableDeclarationStatement\",\n    \"Mapping\",\n    \"Block\",\n    \"InlineAssembly\", //definitely do *not* add to deliberately skipped!\n    \"YulTypedName\"\n  ];\n  return (\n    isDeliberatelySkippedNodeType(node) ||\n    otherSkippedTypes.includes(node.nodeType) ||\n    node.nodeType.includes(\"TypeName\") || //HACK\n    //skip string literals too -- we'll handle that manually\n    (node.typeDescriptions !== undefined && //seems this sometimes happens?\n      Codec.Ast.Utils.typeClass(node) === \"stringliteral\")\n  );\n}\n\nexport function prefixName(prefix, fn) {\n  Object.defineProperty(fn, \"name\", {\n    value: `${prefix}.${fn.name}`,\n    configurable: true\n  });\n\n  return fn;\n}\n\nexport function makePath(sourceId, pointer) {\n  return `${sourceId}:${pointer}`;\n}\n\n/**\n * returns a new array which is a copy of array but with\n * elements popped from the top until numToRemove elements\n * satisfying the predicate have been removed (or until the\n * array is empty)\n */\nexport function popNWhere(array, numToRemove, predicate) {\n  let newArray = array.slice();\n  //I'm going to write this the C way, hope you don't mind :P\n  while (numToRemove > 0 && newArray.length > 0) {\n    let top = newArray[newArray.length - 1];\n    if (predicate(top)) {\n      numToRemove--;\n    }\n    newArray.pop();\n  }\n  return newArray;\n}\n\n/**\n * @return 0x-prefix string of keccak256 hash\n */\nexport function keccak256(...args) {\n  return Codec.Conversion.toHexString(\n    Codec.Evm.Utils.keccak256(...args),\n    Codec.Evm.Utils.WORD_SIZE\n  );\n}\n\n/**\n * Given an object, return a stable hash by first running it through a stable\n * stringify operation before hashing\n */\nexport function stableKeccak256(obj) {\n  return keccak256({ type: \"string\", value: stringify(obj) });\n}\n\n/*\n * used by data; takes an id object and a ref (pointer) and returns a full\n * corresponding assignment object\n */\nexport function makeAssignment(idObj, ref) {\n  let id = stableKeccak256(idObj);\n  return { ...idObj, id, ref };\n}\n\n/*\n * Given a mmemonic, determine whether it's the mnemonic of a calling\n * instruction (does NOT include creation instructions)\n */\nexport function isCallMnemonic(op) {\n  const calls = [\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"];\n  return calls.includes(op);\n}\n\n/*\n * returns true for mnemonics for calls that take only 6 args instead of 7\n */\nexport function isShortCallMnemonic(op) {\n  const shortCalls = [\"DELEGATECALL\", \"STATICCALL\"];\n  return shortCalls.includes(op);\n}\n\n/*\n * returns true for mnemonics for calls that delegate storage\n */\nexport function isDelegateCallMnemonicBroad(op) {\n  const delegateCalls = [\"DELEGATECALL\", \"CALLCODE\"];\n  return delegateCalls.includes(op);\n}\n\n/*\n * returns true for mnemonics for calls that delegate everything\n */\nexport function isDelegateCallMnemonicStrict(op) {\n  const delegateCalls = [\"DELEGATECALL\"];\n  return delegateCalls.includes(op);\n}\n\n/*\n * returns true for mnemonics for static calls\n */\nexport function isStaticCallMnemonic(op) {\n  const delegateCalls = [\"STATICCALL\"];\n  return delegateCalls.includes(op);\n}\n\n/*\n * Given a mmemonic, determine whether it's the mnemonic of a creation\n * instruction\n */\nexport function isCreateMnemonic(op) {\n  const creates = [\"CREATE\", \"CREATE2\"];\n  return creates.includes(op);\n}\n","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"@truffle/codec\");","module.exports = require(\"reselect-tree\");","module.exports = require(\"redux-saga/effects\");","module.exports = require(\"babel-runtime/core-js/object/entries\");","module.exports = require(\"redux\");","import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nconst PAST_END_OF_TRACE = {\n  depth: -1, //this is the part that matters!\n  //the rest of this is just to look like a trace step\n  error: \"\",\n  gas: 0,\n  memory: [],\n  stack: [],\n  storage: {},\n  gasCost: 0,\n  op: \"STOP\",\n  pc: -1 //this is not at all valid but that's fine\n};\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: state => state.trace.proc.index,\n\n  /*\n   * trace.loaded\n   * is a trace loaded?\n   */\n  loaded: createLeaf([\"/steps\"], steps => steps !== null),\n\n  /**\n   * trace.finished\n   * is the trace finished?\n   */\n  finished: state => state.trace.proc.finished,\n\n  /**\n   * trace.finishedOrUnloaded\n   *\n   * is the trace finished, including if it's unloaded?\n   */\n  finishedOrUnloaded: createLeaf(\n    [\"/finished\", \"/loaded\"],\n    (finished, loaded) => finished || !loaded\n  ),\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: state => state.trace.transaction.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"],\n    (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   * HACK: if no steps,\n   * we will return a spoofed \"past end\" step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"],\n    (steps, index) =>\n      steps ? (steps.length > 0 ? steps[index] : PAST_END_OF_TRACE) : null //null if no tx loaded\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step\n   * HACK: if at the end,\n   * we will return a spoofed \"past end\" step\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"],\n    (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : PAST_END_OF_TRACE\n  ),\n\n  /*\n   * trace.nextOfSameDepth\n   * next trace step that's at the same depth as this one\n   * NOTE: if there is none, will return undefined\n   * (should not be used in such cases)\n   */\n  nextOfSameDepth: createLeaf([\"./steps\", \"./index\"], (steps, index) => {\n    let depth = steps[index].depth;\n    return steps.slice(index + 1).find(step => step.depth === depth);\n  }),\n\n  /**\n   * trace.application\n   */\n  application: {\n    /**\n     * trace.application.submoduleCount\n     */\n    submoduleCount: state => state.trace.application.submoduleCount\n  }\n});\n\nexport default trace;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\"); // eslint-disable-line no-unused-vars\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport BN from \"bn.js\";\n\nimport trace from \"lib/trace/selectors\";\n\nimport * as Codec from \"@truffle/codec\";\nimport {\n  keccak256,\n  isCallMnemonic,\n  isCreateMnemonic,\n  isShortCallMnemonic,\n  isDelegateCallMnemonicBroad,\n  isDelegateCallMnemonicStrict,\n  isStaticCallMnemonic\n} from \"lib/helpers\";\n\nconst ZERO_WORD = \"00\".repeat(Codec.Evm.Utils.WORD_SIZE);\n\nfunction determineFullContext(\n  { address, binary },\n  instances,\n  search,\n  contexts\n) {\n  let contextId;\n  let isConstructor = Boolean(binary);\n  if (address) {\n    //if we're in a call to a deployed contract, we must have recorded\n    //the context in the codex, so we don't need to do any further\n    //searching\n    ({ context: contextId, binary } = instances[address]);\n  } else if (isConstructor) {\n    //otherwise, if we're in a constructor, we'll need to actually do a\n    //search\n    contextId = search(binary);\n  } else {\n    //exceptional case: no transaction is loaded\n    return null;\n  }\n\n  if (contextId != undefined) {\n    //if we found the context, use it\n    let context = contexts[contextId];\n    return {\n      ...context,\n      binary\n    };\n  } else {\n    //otherwise we'll construct something default\n    return {\n      binary,\n      isConstructor\n    };\n  }\n}\n\n/**\n * create EVM-level selectors for a given trace step selector\n * may specify additional selectors to include\n */\nfunction createStepSelectors(step, state = null) {\n  let base = {\n    /**\n     * .trace\n     *\n     * trace step info related to operation\n     */\n    trace: createLeaf([step], step => {\n      if (!step) {\n        return null;\n      }\n      let { gasCost, op, pc } = step;\n      return { gasCost, op, pc };\n    }),\n\n    /**\n     * .programCounter\n     */\n    programCounter: createLeaf([\"./trace\"], step => (step ? step.pc : null)),\n\n    /**\n     * .isCall\n     *\n     * whether the opcode will switch to another calling context\n     */\n    isCall: createLeaf([\"./trace\"], step => isCallMnemonic(step.op)),\n\n    /**\n     * .isShortCall\n     *\n     * for calls that only take 6 arguments instead of 7\n     */\n    isShortCall: createLeaf([\"./trace\"], step => isShortCallMnemonic(step.op)),\n\n    /**\n     * .isDelegateCallBroad\n     *\n     * for calls that delegate storage\n     */\n    isDelegateCallBroad: createLeaf([\"./trace\"], step =>\n      isDelegateCallMnemonicBroad(step.op)\n    ),\n\n    /**\n     * .isDelegateCallStrict\n     *\n     * for calls that additionally delegate sender and value\n     */\n    isDelegateCallStrict: createLeaf([\"./trace\"], step =>\n      isDelegateCallMnemonicStrict(step.op)\n    ),\n\n    /**\n     * .isStaticCall\n     */\n    isStaticCall: createLeaf([\"./trace\"], step =>\n      isStaticCallMnemonic(step.op)\n    ),\n\n    /**\n     * .isCreate\n     * (includes CREATE2)\n     */\n    isCreate: createLeaf([\"./trace\"], step => isCreateMnemonic(step.op)),\n\n    /**\n     * .isCreate2\n     */\n    isCreate2: createLeaf([\"./trace\"], step => step.op === \"CREATE2\"),\n\n    /*\n     * .isStore\n     */\n    isStore: createLeaf([\"./trace\"], step => step.op === \"SSTORE\"),\n\n    /*\n     * .isLoad\n     */\n    isLoad: createLeaf([\"./trace\"], step => step.op === \"SLOAD\"),\n\n    /*\n     * .touchesStorage\n     *\n     * whether the instruction involves storage\n     */\n    touchesStorage: createLeaf(\n      [\"./isStore\", \"isLoad\"],\n      (stores, loads) => stores || loads\n    )\n  };\n\n  if (state) {\n    const isRelative = path =>\n      typeof path === \"string\" &&\n      (path.startsWith(\"./\") || path.startsWith(\"../\"));\n\n    if (isRelative(state)) {\n      state = `../${state}`;\n    }\n\n    Object.assign(base, {\n      /**\n       * .isJump\n       */\n      isJump: createLeaf(\n        [\"./trace\", state],\n        (step, { stack }) =>\n          step.op === \"JUMP\" ||\n          (step.op === \"JUMPI\" && stack[stack.length - 2] !== ZERO_WORD)\n      ),\n\n      /**\n       * .valueStored\n       * the storage written, as determined by looking at the stack\n       * rather than at storage (since valueLoaded is now being done\n       * this way, may as well do valueStored this way as well and\n       * completely remove our dependence on the storage field!)\n       */\n      valueStored: createLeaf([\"./isStore\", state], (isStore, { stack }) => {\n        if (!isStore) {\n          return null;\n        }\n        return stack[stack.length - 2];\n      }),\n\n      /**\n       * .callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", state],\n\n        (isCall, { stack }) => {\n          if (!isCall) {\n            return null;\n          }\n\n          let address = stack[stack.length - 2];\n          return Codec.Evm.Utils.toAddress(address);\n        }\n      ),\n\n      /**\n       * .createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", state],\n\n        (isCreate, { stack, memory }) => {\n          if (!isCreate) {\n            return null;\n          }\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return (\n            \"0x\" +\n            memory\n              .join(\"\")\n              .substring(offset, offset + length)\n              .padEnd(length, \"00\")\n          );\n        }\n      ),\n\n      /**\n       * .callData\n       *\n       * data passed to EVM call\n       */\n      callData: createLeaf(\n        [\"./isCall\", \"./isShortCall\", state],\n        (isCall, short, { stack, memory }) => {\n          if (!isCall) {\n            return null;\n          }\n\n          //if it's 6-argument call, the data start and offset will be one spot\n          //higher in the stack than they would be for a 7-argument call, so\n          //let's introduce an offset to handle this\n          let argOffset = short ? 1 : 0;\n\n          // Get the data from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 4 + argOffset], 16) * 2;\n          const length = parseInt(stack[stack.length - 5 + argOffset], 16) * 2;\n\n          return (\n            \"0x\" +\n            memory\n              .join(\"\")\n              .substring(offset, offset + length)\n              .padEnd(length, \"00\")\n          );\n        }\n      ),\n\n      /**\n       * .callValue\n       *\n       * value for the call (not create); returns null for DELEGATECALL\n       */\n      callValue: createLeaf(\n        [\"./isCall\", \"./isDelegateCallStrict\", \"./isStaticCall\", state],\n        (calls, delegates, isStatic, { stack }) => {\n          if (!calls || delegates) {\n            return null;\n          }\n\n          if (isStatic) {\n            return new BN(0);\n          }\n\n          //otherwise, for CALL and CALLCODE, it's the 3rd argument\n          let value = stack[stack.length - 3];\n          return Codec.Conversion.toBN(value);\n        }\n      ),\n\n      /**\n       * .createValue\n       *\n       * value for the create\n       */\n      createValue: createLeaf([\"./isCreate\", state], (isCreate, { stack }) => {\n        if (!isCreate) {\n          return null;\n        }\n\n        //creates have the value as the first argument\n        let value = stack[stack.length - 1];\n        return Codec.Conversion.toBN(value);\n      }),\n\n      /**\n       * .storageAffected\n       *\n       * storage slot being stored to or loaded from\n       * we do NOT prepend \"0x\"\n       */\n      storageAffected: createLeaf(\n        [\"./touchesStorage\", state],\n\n        (touchesStorage, { stack }) => {\n          if (!touchesStorage) {\n            return null;\n          }\n\n          return stack[stack.length - 1];\n        }\n      ),\n\n      /**\n       * .callContext\n       *\n       * context of what this step is calling/creating (if applicable)\n       */\n      callContext: createLeaf(\n        [\n          \"./callAddress\",\n          \"./createBinary\",\n          \"/current/codex/instances\",\n          \"/info/binaries/search\",\n          \"/info/contexts\"\n        ],\n        (address, binary, instances, search, contexts) =>\n          determineFullContext({ address, binary }, instances, search, contexts)\n      )\n    });\n  }\n\n  return base;\n}\n\nconst evm = createSelectorTree({\n  /**\n   * evm.state\n   */\n  state: state => state.evm,\n\n  /**\n   * evm.info\n   */\n  info: {\n    /**\n     * evm.info.contexts\n     */\n    contexts: createLeaf([\"/state\"], state => state.info.contexts.byContext),\n\n    /**\n     * evm.info.binaries\n     */\n    binaries: {\n      /**\n       * evm.info.binaries.search\n       *\n       * returns function (binary) => context (returns the *ID* of the context)\n       * (returns null on no match)\n       */\n      search: createLeaf([\"/info/contexts\"], contexts => binary =>\n        Codec.Contexts.Utils.findDebuggerContext(contexts, binary)\n      )\n    }\n  },\n\n  /**\n   * evm.transaction\n   */\n  transaction: {\n    /*\n     * evm.transaction.globals\n     */\n    globals: {\n      /*\n       * evm.transaction.globals.tx\n       */\n      tx: createLeaf([\"/state\"], state => state.transaction.globals.tx),\n      /*\n       * evm.transaction.globals.block\n       */\n      block: createLeaf([\"/state\"], state => state.transaction.globals.block)\n    },\n\n    /*\n     * evm.transaction.status\n     */\n    status: createLeaf([\"/state\"], state => state.transaction.status),\n\n    /*\n     * evm.transaction.initialCall\n     */\n    initialCall: createLeaf([\"/state\"], state => state.transaction.initialCall),\n\n    /*\n     * evm.transaction.startingContext\n     */\n    startingContext: createLeaf(\n      [\n        \"/current/callstack\", //we're just getting bottom stackframe, so this is in fact tx-level\n        \"/current/codex/instances\", //this should also be fine?\n        \"/info/binaries/search\",\n        \"/info/contexts\"\n      ],\n      (stack, instances, search, contexts) =>\n        stack.length > 0\n          ? determineFullContext(stack[0], instances, search, contexts)\n          : null\n    )\n  },\n\n  /**\n   * evm.current\n   */\n  current: {\n    /**\n     * evm.current.callstack\n     */\n    callstack: state => state.evm.proc.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      stack => (stack.length ? stack[stack.length - 1] : {})\n    ),\n\n    /**\n     * evm.current.context\n     */\n    context: createLeaf(\n      [\n        \"./call\",\n        \"./codex/instances\",\n        \"/info/binaries/search\",\n        \"/info/contexts\"\n      ],\n      determineFullContext\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: Object.assign(\n      {},\n      ...[\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(param => ({\n        [param]: createLeaf([trace.step], step => step[param])\n      }))\n    ),\n\n    /**\n     * evm.current.step\n     */\n    step: {\n      ...createStepSelectors(trace.step, \"./state\"),\n\n      //the following step selectors only exist for current, not next or any\n      //other step\n\n      /*\n       * evm.current.step.createdAddress\n       *\n       * address created by the current create step\n       */\n      createdAddress: createLeaf(\n        [\n          \"./isCreate\",\n          \"/nextOfSameDepth/state/stack\",\n          \"./isCreate2\",\n          \"./create2Address\"\n        ],\n        (isCreate, stack, isCreate2, create2Address) => {\n          if (!isCreate) {\n            return null;\n          }\n          let address = Codec.Evm.Utils.toAddress(stack[stack.length - 1]);\n          if (address === Codec.Evm.Utils.ZERO_ADDRESS && isCreate2) {\n            return create2Address;\n          }\n          return address;\n        }\n      ),\n\n      create2Address: createLeaf(\n        [\"./isCreate2\", \"./createBinary\", \"../call\", \"../state/stack\"],\n        (isCreate2, binary, { storageAddress }, stack) =>\n          isCreate2\n            ? Codec.Evm.Utils.toAddress(\n                \"0x\" +\n                  keccak256({\n                    type: \"bytes\",\n                    value:\n                      //slice 2's are for cutting off initial \"0x\" where we've prepended this\n                      //0xff, then address, then salt, then code hash\n                      \"0xff\" +\n                      storageAddress.slice(2) +\n                      stack[stack.length - 4] +\n                      keccak256({ type: \"bytes\", value: binary }).slice(2)\n                  }).slice(\n                    2 +\n                      2 *\n                        (Codec.Evm.Utils.WORD_SIZE -\n                          Codec.Evm.Utils.ADDRESS_SIZE)\n                  )\n                //slice off initial 0x and initial 12 bytes (note we've re-prepended the\n                //0x at the beginning)\n              )\n            : null\n      ),\n\n      /**\n       * evm.current.step.isInstantCallOrReturn\n       *\n       * are we doing a call or create for which there are no trace steps?\n       * This can happen if:\n       * 1. we call a precompile\n       * 2. we call an externally-owned account (or other account w/no code)\n       * 3. we do a call or create but the call stack is exhausted\n       * 4. we attempt to transfer more ether than we have\n       */\n      isInstantCallOrCreate: createLeaf(\n        [\"./isCall\", \"./isCreate\", \"./isContextChange\"],\n        (calls, creates, contextChange) => (calls || creates) && !contextChange\n      ),\n\n      /**\n       * evm.current.step.isContextChange\n       * groups together calls, creates, halts, and exceptional halts\n       */\n      isContextChange: createLeaf(\n        [\"/current/state/depth\", \"/next/state/depth\"],\n        (currentDepth, nextDepth) => currentDepth !== nextDepth\n      ),\n\n      /**\n       * .isNormalHalting\n       */\n      isNormalHalting: createLeaf(\n        [\"./isHalting\", \"./returnStatus\"],\n        (isHalting, status) => isHalting && status\n      ),\n\n      /**\n       * .isHalting\n       *\n       * whether the instruction halts or returns from a calling context\n       * HACK: the check for stepsRemainining === 0 is a hack to cover\n       * the special case when there are no trace steps; normally this\n       * is unnecessary because the spoofed step past the end covers it\n       */\n      isHalting: createLeaf(\n        [\"/current/state/depth\", \"/next/state/depth\", trace.stepsRemaining],\n        (currentDepth, nextDepth, stepsRemaining) =>\n          nextDepth < currentDepth || stepsRemaining === 0\n      ),\n\n      /**\n       * evm.current.step.isExceptionalHalting\n       */\n      isExceptionalHalting: createLeaf(\n        [\"./isHalting\", \"./returnStatus\"],\n        (isHalting, status) => isHalting && !status\n      ),\n\n      /**\n       * evm.current.step.returnStatus\n       * checks the return status of the *current* halting instruction\n       * returns null if not halting\n       * (returns a boolean -- true for success, false for failure)\n       */\n      returnStatus: createLeaf(\n        [\n          \"./isHalting\",\n          \"/next/state\",\n          trace.stepsRemaining,\n          \"/transaction/status\"\n        ],\n        (isHalting, { stack }, remaining, finalStatus) => {\n          if (!isHalting) {\n            return null; //not clear this'll do much good since this may get\n            //read as false, but, oh well, may as well\n          }\n          if (remaining <= 1) {\n            return finalStatus;\n          } else {\n            return stack[stack.length - 1] !== ZERO_WORD;\n          }\n        }\n      ),\n\n      /**\n       * evm.current.step.returnValue\n       *\n       * for a [successful] RETURN or REVERT instruction, the value returned;\n       * we DO prepend \"0x\"\n       * for everything else, including unsuccessful RETURN, just returns \"0x\"\n       * (which is what the return value would be if the instruction were to\n       * fail) (or succeed in the case of STOP or SELFDESTRUCT)\n       * NOTE: technically this will be wrong if a REVERT fails, but that case\n       * is hard to detect and it barely matters\n       */\n      returnValue: createLeaf(\n        [\"./trace\", \"./isExceptionalHalting\", \"../state\"],\n\n        (step, isExceptionalHalting, { stack, memory }) => {\n          if (step.op !== \"RETURN\" && step.op !== \"REVERT\") {\n            return \"0x\";\n          }\n          if (isExceptionalHalting && step.op !== \"REVERT\") {\n            return \"0x\";\n          }\n          // Get the data from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 1], 16) * 2;\n          const length = parseInt(stack[stack.length - 2], 16) * 2;\n\n          return (\n            \"0x\" +\n            memory\n              .join(\"\")\n              .substring(offset, offset + length)\n              .padEnd(length, \"00\")\n          );\n        }\n      ),\n\n      /**\n       * evm.current.step.valueLoaded\n       * the storage loaded on an SLOAD. determined by examining\n       * the next stack, rather than storage (we're avoiding\n       * relying on storage to support old versions of Geth and Besu)\n       * we do not include an initial \"0x\"\n       */\n      valueLoaded: createLeaf(\n        [\"./isLoad\", \"/next/state\"],\n        (isLoad, { stack }) => {\n          if (!isLoad) {\n            return null;\n          }\n          return stack[stack.length - 1];\n        }\n      )\n    },\n\n    /**\n     * evm.current.codex (namespace)\n     */\n    codex: {\n      /**\n       * evm.current.codex (selector)\n       * the whole codex! not that that's very much at the moment\n       */\n      _: createLeaf([\"/state\"], state => state.proc.codex),\n\n      /**\n       * evm.current.codex.storage\n       * the current storage, as fetched from the codex... unless we're in a\n       * failed creation call, then we just fall back on the state (which will\n       * work, since nothing else can interfere with the storage of a failed\n       * creation call!)\n       */\n      storage: createLeaf(\n        [\"./_\", \"../state/storage\", \"../call\"],\n        (codex, rawStorage, { storageAddress }) =>\n          storageAddress === Codec.Evm.Utils.ZERO_ADDRESS\n            ? rawStorage //HACK -- if zero address ignore the codex\n            : codex[codex.length - 1].accounts[storageAddress].storage\n      ),\n\n      /*\n       * evm.current.codex.instances\n       */\n      instances: createLeaf([\"./_\"], codex =>\n        Object.assign(\n          {},\n          ...Object.entries(codex[codex.length - 1].accounts).map(\n            ([address, { code, context }]) => ({\n              [address]: { address, binary: code, context }\n            })\n          )\n        )\n      )\n    }\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign(\n      {},\n      ...[\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(param => ({\n        [param]: createLeaf([trace.next], step => step[param])\n      }))\n    ),\n\n    /*\n     * evm.next.step\n     */\n    step: createStepSelectors(trace.next, \"./state\")\n  },\n\n  /**\n   * evm.nextOfSameDepth\n   */\n  nextOfSameDepth: {\n    /**\n     * evm.nextOfSameDepth.state\n     *\n     * evm state at the next step of same depth\n     */\n    state: Object.assign(\n      {},\n      ...[\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(param => ({\n        [param]: createLeaf([trace.nextOfSameDepth], step => step[param])\n      }))\n    )\n  }\n});\n\nexport default evm;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"@truffle/solidity-utils\";\n\nimport semver from \"semver\";\n\nimport evm from \"lib/evm/selectors\";\nimport trace from \"lib/trace/selectors\";\n\nfunction contextRequiresPhantomStackframes(context) {\n  debug(\"context: %O\", context);\n  return (\n    context.compiler !== undefined && //(do NOT just put context.compiler here,\n    //we need this to be a boolean, not undefined, because it gets put in the state)\n    semver.satisfies(context.compiler.version, \">=0.5.1\", {\n      includePrerelease: true\n    }) &&\n    !context.isConstructor //constructors should not get a phantom stackframe!\n  );\n}\n\n//function to create selectors that need both a current and next version\nfunction createMultistepSelectors(stepSelector) {\n  return {\n    /**\n     * .instruction\n     */\n    instruction: createLeaf(\n      [\"/current/instructionAtProgramCounter\", stepSelector.programCounter],\n      //HACK: we use solidity.current.instructionAtProgramCounter\n      //even if we're looking at solidity.next.\n      //This is harmless... so long as the current instruction isn't a context\n      //change.  So, don't use solidity.next when it is.\n\n      (map, pc) => map[pc] || {}\n    ),\n\n    /**\n     * .modifierDepth\n     */\n    modifierDepth: createLeaf(\n      [\"./instruction\"],\n      instruction => instruction.modifierDepth\n    ),\n\n    /**\n     * .source\n     */\n    source: createLeaf(\n      //HACK: same hack as with instruction (we use current sources).\n      //but I don't need to give the same warning twice.\n      [\"/current/sources\", \"./instruction\"],\n\n      (sources, { file: id }) => (sources ? sources[id] || {} : {})\n    ),\n\n    /**\n     * HACK... you get the idea\n     */\n    findOverlappingRange: createLeaf(\n      [\"./source\", \"/views/findOverlappingRange\"],\n      ({ compilationId, id }, functions) => (functions[compilationId] || {})[id]\n    ),\n\n    /**\n     * .sourceRange\n     */\n    sourceRange: createLeaf([\"./instruction\"], SolidityUtils.getSourceRange),\n\n    /**\n     * .pointerAndNode\n     */\n    pointerAndNode: createLeaf(\n      [\"./findOverlappingRange\", \"./sourceRange\"],\n\n      (findOverlappingRange, range) =>\n        findOverlappingRange\n          ? SolidityUtils.findRange(\n              findOverlappingRange,\n              range.start,\n              range.length\n            )\n          : null\n    ),\n\n    /**\n     * .pointer\n     */\n    pointer: createLeaf(\n      [\"./pointerAndNode\"],\n\n      pointerAndNode => (pointerAndNode ? pointerAndNode.pointer : null)\n    ),\n\n    /**\n     * .node\n     */\n    node: createLeaf(\n      [\"./source\", \"./pointerAndNode\"],\n\n      ({ ast }, pointerAndNode) => (pointerAndNode ? pointerAndNode.node : ast)\n    )\n  };\n}\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.state\n   */\n  state: state => state.solidity,\n\n  /**\n   * solidity.info\n   */\n  info: {\n    /**\n     * solidity.info.sources\n     * NOTE: grouped by compilation!\n     */\n    sources: createLeaf([\"/state\"], state => state.info.sources.byCompilationId)\n  },\n\n  /**\n   * solidity.transaction\n   */\n  transaction: {\n    /**\n     * solidity.transaction.bottomStackframeRequiresPhantomFrame\n     */\n    bottomStackframeRequiresPhantomFrame: createLeaf(\n      [evm.transaction.startingContext],\n      contextRequiresPhantomStackframes\n    )\n  },\n\n  /**\n   * solidity.current\n   */\n  current: {\n    /**\n     * solidity.current.sources\n     * This takes the place of the old solidity.info.sources,\n     * returning only the sources for the current compilation.\n     */\n    sources: createLeaf(\n      [\"/info/sources\", evm.current.context],\n      (sources, context) =>\n        context\n          ? context.compilationId !== undefined\n            ? (sources[context.compilationId] || { byId: null }).byId\n            : [] //unknown context, return no sources\n          : null //no tx loaded, return null\n    ),\n\n    /**\n     * solidity.current.sourceMap\n     */\n    sourceMap: createLeaf(\n      [evm.current.context],\n\n      context => (context ? context.sourceMap : null) //null when no tx loaded\n    ),\n\n    /**\n     * solidity.current.humanReadableSourceMap\n     */\n    humanReadableSourceMap: createLeaf(\n      [\"./sourceMap\"],\n      sourceMap =>\n        sourceMap ? SolidityUtils.getHumanReadableSourceMap(sourceMap) : null\n    ),\n\n    /**\n     * solidity.current.functionDepthStack\n     */\n    functionDepthStack: state => state.solidity.proc.functionDepthStack,\n\n    /**\n     * solidity.current.nextFrameIsPhantom\n     */\n    nextFrameIsPhantom: state => state.solidity.proc.nextFrameIsPhantom,\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: createLeaf(\n      [\"./functionDepthStack\"],\n      stack => stack[stack.length - 1]\n    ),\n\n    /**\n     * solidity.current.callRequiresPhantomFrame\n     */\n    callRequiresPhantomFrame: createLeaf(\n      [evm.current.context],\n      contextRequiresPhantomStackframes\n    ),\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [\"./sources\", evm.current.context, \"./humanReadableSourceMap\"],\n\n      (sources, context, sourceMap) => {\n        if (!context) {\n          return [];\n        }\n\n        return SolidityUtils.getProcessedInstructionsForBinary(\n          (sources || []).map(({ source }) => source),\n          context.binary,\n          sourceMap\n        );\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      instructions =>\n        Object.assign(\n          {},\n          ...instructions.map(instruction => ({\n            [instruction.pc]: instruction\n          }))\n        )\n    ),\n\n    ...createMultistepSelectors(evm.current.step),\n\n    /**\n     * solidity.current.isSourceRangeFinal\n     */\n    isSourceRangeFinal: createLeaf(\n      [\n        \"./instructionAtProgramCounter\",\n        evm.current.step.programCounter,\n        evm.next.step.programCounter\n      ],\n\n      (map, current, next) => {\n        if (!map[next]) {\n          return true;\n        }\n\n        current = map[current];\n        next = map[next];\n\n        return (\n          current.start != next.start ||\n          current.length != next.length ||\n          current.file != next.file\n        );\n      }\n    ),\n\n    /*\n     * solidity.current.functionsByProgramCounter\n     */\n    functionsByProgramCounter: createLeaf(\n      [\n        \"./instructions\",\n        \"./sources\",\n        \"/views/findOverlappingRange\",\n        evm.current.context\n      ],\n      (instructions, sources, functions, { compilationId }) =>\n        //note: we can skip an explicit null check on sources here because\n        //if sources is null then instructions = [] so the problematic map\n        //never occurs\n        SolidityUtils.getFunctionsByProgramCounter(\n          instructions,\n          sources.map(({ ast }) => ast),\n          functions[compilationId],\n          compilationId\n        )\n    ),\n\n    /**\n     * solidity.current.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ({ lines }) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], isJump => isJump),\n\n    /**\n     * solidity.current.jumpDirection\n     */\n    jumpDirection: createLeaf([\"./instruction\"], (i = {}) => i.jump || \"-\"),\n\n    /**\n     * solidity.current.willCall\n     * note: includes creations, does *not* include instareturns\n     */\n    willCall: createLeaf(\n      [\n        evm.current.step.isCall,\n        evm.current.step.isCreate,\n        evm.current.step.isInstantCallOrCreate\n      ],\n      (isCall, isCreate, isInstant) => (isCall || isCreate) && !isInstant\n    ),\n\n    /**\n     * solidity.current.willReturn\n     *\n     * covers both normal returns & failures\n     */\n    willReturn: createLeaf(\n      [evm.current.step.isHalting],\n      isHalting => isHalting\n    ),\n\n    /**\n     * solidity.current.nextMapped\n     * returns the next trace step after this one which is sourcemapped\n     * HACK: this assumes we're not about to change context! don't use this if\n     * we are!\n     * ALSO, this may return undefined, so be prepared for that\n     */\n    nextMapped: createLeaf(\n      [\"./instructionAtProgramCounter\", trace.steps, trace.index],\n      (map, steps, index) =>\n        steps.slice(index + 1).find(({ pc }) => map[pc] && map[pc].file !== -1)\n    )\n  },\n\n  /**\n   * solidity.next\n   * HACK WARNING: do not use these selectors when the current instruction is a\n   * context change! (evm call or evm return)\n   */\n  next: createMultistepSelectors(evm.next.step),\n\n  /**\n   * solidity.views\n   */\n  views: {\n    /**\n     * solidity.views.findOverlappingRange\n     * grouped by compilation\n     */\n    findOverlappingRange: createLeaf([\"/info/sources\"], compilations =>\n      Object.assign(\n        {},\n        ...Object.entries(compilations).map(\n          ([compilationId, { byId: sources }]) => ({\n            [compilationId]: sources.map(({ ast }) =>\n              SolidityUtils.makeOverlapFunction(ast)\n            )\n          })\n        )\n      )\n    )\n  }\n});\n\nexport default solidity;\n","module.exports = require(\"babel-runtime/core-js/object/assign\");","export const SAVE_STEPS = \"TRACE_SAVE_STEPS\";\nexport function saveSteps(steps) {\n  return {\n    type: SAVE_STEPS,\n    steps\n  };\n}\n\nexport const NEXT = \"TRACE_NEXT\";\nexport function next() {\n  return { type: NEXT };\n}\n\nexport const TICK = \"TRACE_TICK\";\nexport function tick() {\n  return { type: TICK };\n}\n\nexport const TOCK = \"TRACE_TOCK\";\nexport function tock() {\n  return { type: TOCK };\n}\n\nexport const END_OF_TRACE = \"TRACE_EOT\";\nexport function endTrace() {\n  return { type: END_OF_TRACE };\n}\n\nexport const RESET = \"TRACE_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n\nexport const UNLOAD_TRANSACTION = \"TRACE_UNLOAD_TRANSACTION\";\nexport function unloadTransaction() {\n  return { type: UNLOAD_TRANSACTION };\n}\n\nexport const BACKTICK = \"TRACE_BACKTICK\";\nexport function backtick() {\n  return { type: BACKTICK };\n}\n\nexport const SET_SUBMODULE_COUNT = \"TRACE_SET_SUBMODULE_COUNT\";\nexport function setSubmoduleCount(count) {\n  return { type: SET_SUBMODULE_COUNT, count };\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:sagas\");\n\nimport { take, takeEvery, put, select } from \"redux-saga/effects\";\nimport { prefixName, isCallMnemonic } from \"lib/helpers\";\n\nimport * as Codec from \"@truffle/codec\";\n\nimport * as actions from \"../actions\";\n\nimport trace from \"../selectors\";\n\nexport function* setSubmoduleCount(count) {\n  yield put(actions.setSubmoduleCount(count));\n}\n\nexport function* addSubmoduleToCount() {\n  let count = yield select(trace.application.submoduleCount);\n  yield put(actions.setSubmoduleCount(count + 1));\n}\n\nexport function* advance() {\n  yield put(actions.next());\n\n  debug(\"TOCK to take\");\n  yield take([actions.TOCK, actions.END_OF_TRACE]);\n  debug(\"TOCK taken\");\n}\n\nfunction* next() {\n  let remaining = yield select(trace.stepsRemaining);\n  debug(\"remaining: %o\", remaining);\n  let steps = yield select(trace.steps);\n  debug(\"total steps: %o\", steps.length);\n  let waitingForSubmodules = 0;\n\n  if (remaining > 0) {\n    debug(\"putting TICK\");\n    // updates state for current step\n    waitingForSubmodules = yield select(trace.application.submoduleCount);\n    yield put(actions.tick());\n    debug(\"put TICK\");\n\n    //wait for all backticks before continuing\n    while (waitingForSubmodules > 0) {\n      yield take(actions.BACKTICK);\n      debug(\"got BACKTICK\");\n      waitingForSubmodules--;\n    }\n\n    remaining--; // local update, just for convenience\n  }\n\n  if (remaining) {\n    debug(\"putting TOCK\");\n    // updates step to next step in trace\n    yield put(actions.tock());\n    debug(\"put TOCK\");\n  } else {\n    debug(\"putting END_OF_TRACE\");\n    yield put(actions.endTrace());\n    debug(\"put END_OF_TRACE\");\n  }\n}\n\nexport function* signalTickSagaCompletion() {\n  yield put(actions.backtick());\n}\n\nexport function* processTrace(steps) {\n  yield put(actions.saveSteps(steps));\n\n  let addresses = [\n    ...new Set(\n      steps\n        .map(\n          ({ op, stack }) =>\n            isCallMnemonic(op)\n              ? //if it's a call, just fetch the address off the stack\n                Codec.Evm.Utils.toAddress(stack[stack.length - 2])\n              : //if it's not a call, just return undefined (we've gone back to\n                //skipping creates)\n                undefined\n        )\n        //filter out zero addresses from failed creates (as well as undefineds)\n        .filter(\n          address =>\n            address !== undefined && address !== Codec.Evm.Utils.ZERO_ADDRESS\n        )\n    )\n  ];\n\n  return addresses;\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* unload() {\n  yield put(actions.unloadTransaction());\n}\n\nexport function* saga() {\n  yield takeEvery(actions.NEXT, next);\n}\n\nexport default prefixName(\"trace\", saga);\n","export const START = \"SESSION_START\";\nexport function start(provider, txHash) {\n  return {\n    type: START,\n    provider,\n    txHash //OPTIONAL\n  };\n}\n\nexport const LOAD_TRANSACTION = \"SESSION_LOAD_TRANSACTION\";\nexport function loadTransaction(txHash) {\n  return {\n    type: LOAD_TRANSACTION,\n    txHash\n  };\n}\n\nexport const INTERRUPT = \"SESSION_INTERRUPT\";\nexport function interrupt() {\n  return { type: INTERRUPT };\n}\n\nexport const UNLOAD_TRANSACTION = \"SESSION_UNLOAD_TRANSACTION\";\nexport function unloadTransaction() {\n  return {\n    type: UNLOAD_TRANSACTION\n  };\n}\n\nexport const READY = \"SESSION_READY\";\nexport function ready() {\n  return {\n    type: READY\n  };\n}\n\nexport const WAIT = \"SESSION_WAIT\";\nexport function wait() {\n  return {\n    type: WAIT\n  };\n}\n\nexport const ERROR = \"SESSION_ERROR\";\nexport function error(error) {\n  return {\n    type: ERROR,\n    error\n  };\n}\n\nexport const RECORD_CONTRACTS = \"SESSION_RECORD_CONTRACTS\";\nexport function recordContracts(contexts, sources) {\n  return {\n    type: RECORD_CONTRACTS,\n    contexts,\n    sources\n  };\n}\n\nexport const SAVE_TRANSACTION = \"SESSION_SAVE_TRANSACTION\";\nexport function saveTransaction(transaction) {\n  return {\n    type: SAVE_TRANSACTION,\n    transaction\n  };\n}\n\nexport const SAVE_RECEIPT = \"SESSION_SAVE_RECEIPT\";\nexport function saveReceipt(receipt) {\n  return {\n    type: SAVE_RECEIPT,\n    receipt\n  };\n}\n\nexport const SAVE_BLOCK = \"SESSION_SAVE_BLOCK\";\nexport function saveBlock(block) {\n  return {\n    type: SAVE_BLOCK,\n    block\n  };\n}\n\nexport const SET_LIGHT_MODE = \"SESSION_SET_LIGHT_MODE\";\nexport function setLightMode() {\n  return { type: SET_LIGHT_MODE };\n}\n\nexport const SET_FULL_MODE = \"SESSION_SET_FULL_MODE\";\nexport function setFullMode() {\n  return { type: SET_FULL_MODE };\n}\n\nexport const START_FULL_MODE = \"SESSION_START_FULL_MODE\";\nexport function startFullMode() {\n  return { type: START_FULL_MODE };\n}\n\nexport const ADD_COMPILATIONS = \"SESSION_ADD_COMPILATIONS\";\nexport function addCompilations(sources, contexts) {\n  return {\n    type: ADD_COMPILATIONS,\n    sources,\n    contexts\n  };\n}\n","module.exports = require(\"babel-runtime/core-js/object/values\");","module.exports = require(\"json-pointer\");","module.exports = require(\"bn.js\");","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\n\nimport {\n  prefixName,\n  stableKeccak256,\n  makeAssignment,\n  makePath\n} from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport data from \"../selectors\";\n\nimport sum from \"lodash.sum\";\nimport jsonpointer from \"json-pointer\";\n\nimport * as Codec from \"@truffle/codec\";\nimport BN from \"bn.js\";\n\nexport function* scope(nodeId, pointer, parentId, sourceId, compilationId) {\n  yield put(actions.scope(nodeId, pointer, parentId, sourceId, compilationId));\n}\n\nexport function* declare(node, compilationId) {\n  yield put(actions.declare(node.name, node.id, node.scope, compilationId));\n}\n\nexport function* yulScope(pointer, sourceId, compilationId, parentId) {\n  yield put(\n    actions.scope(undefined, pointer, parentId, sourceId, compilationId)\n  );\n}\n\nexport function* yulDeclare(\n  node,\n  pointer,\n  scopePointer,\n  sourceId,\n  compilationId\n) {\n  yield put(\n    actions.declare(\n      node.name,\n      makePath(sourceId, pointer),\n      makePath(sourceId, scopePointer),\n      compilationId\n    )\n  );\n}\n\nexport function* defineType(node, compilationId) {\n  yield put(actions.defineType(node, compilationId));\n}\n\nfunction* tickSaga() {\n  yield* variablesAndMappingsSaga();\n  yield* trace.signalTickSagaCompletion();\n}\n\nexport function* decode(definition, ref, compilationId) {\n  const userDefinedTypes = yield select(data.views.userDefinedTypes);\n  const state = yield select(data.current.state);\n  const mappingKeys = yield select(data.views.mappingKeys);\n  const allocations = yield select(data.info.allocations);\n  const contexts = yield select(data.views.contexts);\n  const currentContext = yield select(data.current.context);\n  const internalFunctionsTable = yield select(\n    data.current.functionsByProgramCounter\n  );\n\n  const ZERO_WORD = new Uint8Array(Codec.Evm.Utils.WORD_SIZE); //automatically filled with zeroes\n\n  const decoder = Codec.decodeVariable(\n    definition,\n    ref,\n    {\n      userDefinedTypes,\n      state,\n      mappingKeys,\n      allocations,\n      contexts,\n      currentContext,\n      internalFunctionsTable\n    },\n    compilationId\n  );\n\n  debug(\"beginning decoding\");\n  let result = decoder.next();\n  while (!result.done) {\n    debug(\"request received\");\n    let request = result.value;\n    let response;\n    switch (request.type) {\n      case \"storage\":\n        //the debugger supplies all storage it knows at the beginning.\n        //any storage it does not know is presumed to be zero.\n        response = ZERO_WORD;\n        break;\n      case \"code\":\n        response = yield* requestCode(request.address);\n        break;\n      default:\n        debug(\"unrecognized request type!\");\n    }\n    debug(\"sending response\");\n    result = decoder.next(response);\n  }\n  //at this point, result.value holds the final value\n  debug(\"done decoding\");\n  debug(\"decoded value: %O\", result.value);\n  return result.value;\n}\n\nexport function* decodeReturnValue() {\n  const userDefinedTypes = yield select(data.views.userDefinedTypes);\n  const state = yield select(data.next.state); //next state has the return data\n  const allocations = yield select(data.info.allocations);\n  const contexts = yield select(data.views.contexts);\n  const status = yield select(data.current.returnStatus); //may be undefined\n  const returnAllocation = yield select(data.current.returnAllocation); //may be null\n\n  const decoder = Codec.decodeReturndata(\n    {\n      userDefinedTypes,\n      state,\n      allocations,\n      contexts\n    },\n    returnAllocation,\n    status\n  );\n\n  debug(\"beginning decoding\");\n  let result = decoder.next();\n  while (!result.done) {\n    debug(\"request received\");\n    let request = result.value;\n    let response;\n    switch (request.type) {\n      //skip storage case, it won't happen here\n      case \"code\":\n        response = yield* requestCode(request.address);\n        break;\n      default:\n        debug(\"unrecognized request type!\");\n    }\n    debug(\"sending response\");\n    result = decoder.next(response);\n  }\n  //at this point, result.value holds the final value\n  debug(\"done decoding\");\n  return result.value;\n}\n\n//NOTE: calling this *can* add a new instance, which will not\n//go away on a reset!  Yes, this is a little weird, but we\n//decided this is OK for now\nfunction* requestCode(address) {\n  const NO_CODE = new Uint8Array(); //empty array\n  const blockNumber = yield select(data.views.blockNumber);\n  const instances = yield select(data.views.instances);\n\n  if (address in instances) {\n    return instances[address];\n  } else if (address === Codec.Evm.Utils.ZERO_ADDRESS) {\n    //HACK: to avoid displaying the zero address to the user as an\n    //affected address just because they decoded a contract or external\n    //function variable that hadn't been initialized yet, we give the\n    //zero address's codelessness its own private cache :P\n    return NO_CODE;\n  } else {\n    //I don't want to write a new web3 saga, so let's just use\n    //obtainBinaries with a one-element array\n    debug(\"fetching binary\");\n    let binary = (yield* web3.obtainBinaries([address], blockNumber))[0];\n    debug(\"adding instance\");\n    yield* evm.addInstance(address, binary);\n    return Codec.Conversion.toBytes(binary);\n  }\n}\n\nfunction* variablesAndMappingsSaga() {\n  // stack is only ready for interpretation after the last step of each\n  // source range\n  //\n  // the data module always looks at the result of a particular opcode\n  // (i.e., the following trace step's stack/memory/storage), so this\n  // asserts that the _current_ operation is the final one before\n  // proceeding\n  if (!(yield select(data.views.atLastInstructionForSourceRange))) {\n    return;\n  }\n\n  let node = yield select(data.current.node);\n\n  if (!node) {\n    return;\n  }\n\n  //set up stack; see default case for what normally goes on\n  let stack;\n  switch (node.nodeType) {\n    case \"IndexAccess\":\n    case \"MemberAccess\":\n      stack = yield select(data.nextMapped.state.stack);\n      //HACK: unfortunately, in some cases, data.next.state.stack gets the wrong\n      //results due to unmapped instructions intervening.  So, we get the stack at\n      //the next *mapped* stack instead.  This is something of a hack and won't\n      //work if we're about to change context, but it should work in the cases that\n      //need it.\n      break;\n    case \"YulFunctionCall\":\n      stack = yield select(data.nextOfSameDepth.state.stack);\n      //if the step we're on is a CALL (or similar), as can happen with Yul,\n      //we don't want to look at the stack on the *next* step, but rather\n      //the step when it returns; hence this\n      break;\n    default:\n      stack = yield select(data.next.state.stack); //note the use of next!\n      //in this saga we are interested in the *results* of the current instruction\n      //note that the decoder is still based on data.current.state; that's fine\n      //though.  There's already a delay between when we record things off the\n      //stack and when we decode them, after all.  Basically, nothing serious\n      //should happen after an index node but before the index access node that\n      //would cause storage, memory, or calldata to change, meaning that even if\n      //the literal we recorded was a pointer, it will still be valid at the time\n      //we use it.  (The other literals we make use of, for the base expressions,\n      //are not decoded, so no potential mismatch there would be relevant anyway.)\n      break;\n  }\n\n  if (!stack) {\n    //note: should only happen in YulFunctionCall case\n    return;\n  }\n\n  let top = stack.length - 1;\n\n  //set up other variables\n  let pointer = yield select(data.current.pointer);\n  let nextPointer = yield select(data.next.pointer);\n  let scopes = yield select(data.current.scopes.inlined);\n  let allocations = yield select(data.current.allocations.state);\n  let storageAllocations = yield select(data.info.allocations.storage);\n  let userDefinedTypes = yield select(data.views.userDefinedTypes);\n  let currentAssignments = yield select(data.proc.assignments);\n  let mappedPaths = yield select(data.proc.mappedPaths);\n  let currentDepth = yield select(data.current.functionDepth);\n  let modifierDepth = yield select(data.current.modifierDepth);\n  let inModifier = yield select(data.current.inModifier);\n  let inFunctionOrModifier = yield select(data.current.inFunctionOrModifier);\n  let address = yield select(data.current.address); //storage address, not code address\n  let compilationId = yield select(data.current.compilationId);\n  let sourceId = yield select(data.current.sourceId);\n  let compiler = yield select(data.current.compiler);\n\n  let assignment,\n    assignments,\n    preambleAssignments,\n    baseExpression,\n    slot,\n    path,\n    position;\n\n  //HACK: modifier preamble\n  //modifier definitions are typically skipped (this includes constructor\n  //definitions when called as a base constructor); as such I've added this\n  //\"modifier preamble\" to catch them\n  if (yield select(data.current.aboutToModify)) {\n    let modifier = yield select(data.current.modifierBeingInvoked);\n    //may be either a modifier or base constructor\n    let currentIndex = yield select(data.current.modifierArgumentIndex);\n    debug(\"currentIndex %d\", currentIndex);\n    let parameters = modifier.parameters.parameters;\n    //now: look at the parameters *after* the current index.  we'll need to\n    //adjust for those.\n    let parametersLeft = parameters.slice(currentIndex + 1);\n    let adjustment = sum(parametersLeft.map(Codec.Ast.Utils.stackSize));\n    debug(\"adjustment %d\", adjustment);\n    preambleAssignments = assignParameters(\n      compilationId,\n      parameters,\n      top + adjustment,\n      currentDepth,\n      modifierDepth,\n      modifier.nodeType === \"ModifierDefinition\"\n    );\n  } else {\n    preambleAssignments = {};\n  }\n\n  switch (node.nodeType) {\n    case \"FunctionDefinition\":\n    case \"ModifierDefinition\":\n      //NOTE: this will *not* catch most modifier definitions!\n      //the rest hopefully will be caught by the modifier preamble\n      //(in fact they won't all be, but...)\n\n      //HACK: filter out some garbage\n      //this filters out the case where we're really in an invocation of a\n      //modifier or base constructor, but have temporarily hit the definition\n      //node for some reason.  However this obviously can have a false positive\n      //in the case where a function has the same modifier twice.\n      let nextModifier = yield select(data.next.modifierBeingInvoked);\n      if (nextModifier && nextModifier.id === node.id) {\n        break;\n      }\n\n      let parameters = node.parameters.parameters;\n      //note that we do *not* include return parameters, since those are\n      //handled by the VariableDeclaration case (no, I don't know why it\n      //works out that way)\n\n      //we can skip preambleAssignments here, that isn't used in this case\n      assignments = assignParameters(\n        compilationId,\n        parameters,\n        top,\n        currentDepth,\n        modifierDepth,\n        inModifier\n      );\n\n      debug(\"Function definition case\");\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(assignments));\n      break;\n\n    case \"YulFunctionDefinition\":\n      if (nextPointer === null || !nextPointer.startsWith(`${pointer}/body/`)) {\n        //in this case, we're seeing the function\n        //as it's being defined, rather than as it's\n        //being called\n        //notice the final slash; when you enter a function, you go *strictly inside*\n        //its body (if you hit the body node itself you are seeing the definition)\n        break;\n      }\n      //yul parameters are a bit weird.\n      //whereas solidity parameters go bottom to top,\n      //first inputs then outputs (and we skip handling the outputs),\n      //yul parameters have the inputs go top to bottom,\n      //and the outputs go bottom to top (again with the outputs on top)\n      //note we need to handle both inputs and outputs here\n      const returnSuffixes = (node.returnVariables || []).map(\n        (_, index, vars) => `/returnVariables/${vars.length - 1 - index}`\n      );\n      const parameterSuffixes = (node.parameters || []).map(\n        (_, index) => `/parameters/${index}`\n      );\n      //HACK: prior to 0.6.8, we *also* need to account for any bare lets (ones\n      //w/no value given) at the beginning of the function body because these\n      //will throw off our count otherwise\n      let bareLetSuffixes = []; //when hack is not invoked, we just leave this empty\n      if (!(yield select(data.current.bareLetsInYulAreHit))) {\n        let outerIndex = 0;\n        for (const declaration of node.body.statements) {\n          if (\n            declaration.nodeType !== \"YulVariableDeclaration\" ||\n            declaration.value != null\n          ) {\n            //deliberate != for future Solidity versions\n            break;\n          }\n          for (\n            let innerIndex = 0;\n            innerIndex < declaration.variables.length;\n            innerIndex++\n          ) {\n            //we want to process from top to bottom, so we'll put the earlier\n            //variables last\n            bareLetSuffixes.unshift(\n              `/body/statements/${outerIndex}/variables/${innerIndex}`\n            );\n          }\n          outerIndex++;\n        }\n      }\n      //both outputs and inputs in the appropriate order (top to bottom)\n      //(well, and those lets...)\n      const suffixes = bareLetSuffixes.concat(\n        returnSuffixes,\n        parameterSuffixes\n      );\n      debug(\"suffixes: %O\", suffixes);\n      assignments = {};\n      position = top; //because that's how we'll process things\n      for (const suffix of suffixes) {\n        //we only care about the pointer, not the variable\n        const sourceAndPointer = makePath(sourceId, pointer + suffix);\n        assignment = makeAssignment(\n          inModifier\n            ? {\n                compilationId,\n                astRef: sourceAndPointer,\n                stackframe: currentDepth,\n                modifierDepth\n              }\n            : {\n                compilationId,\n                astRef: sourceAndPointer,\n                stackframe: currentDepth\n              },\n          {\n            location: \"stack\",\n            from: position, //all Yul variables are size 1\n            to: position\n          }\n        );\n        assignments[assignment.id] = assignment;\n        position--;\n      }\n      yield put(actions.assign(assignments));\n      break;\n\n    case \"ContractDefinition\":\n      let allocation = allocations[node.id];\n\n      debug(\"Contract definition case\");\n      debug(\"allocations %O\", allocations);\n      debug(\"allocation %O\", allocation);\n      assignments = {};\n      for (let id in allocation.members) {\n        id = Number(id); //not sure why we're getting them as strings, but...\n        let idObj = { compilationId, astRef: id, address };\n        let fullId = stableKeccak256(idObj);\n        //we don't use makeAssignment here as we had to compute the ID anyway\n        assignment = {\n          ...idObj,\n          id: fullId,\n          ref: {\n            ...((currentAssignments.byId[fullId] || {}).ref || {}),\n            ...allocation.members[id].pointer\n          }\n        };\n        assignments[fullId] = assignment;\n      }\n      debug(\"assignments %O\", assignments);\n\n      //this case doesn't need preambleAssignments either\n      yield put(actions.assign(assignments));\n      break;\n\n    case \"FunctionTypeName\":\n      //HACK\n      //for some reasons, for declarations of local variables of function type,\n      //we land on the FunctionTypeName instead of the VariableDeclaration,\n      //so we replace the node with its parent (the VariableDeclaration)\n      node = scopes[scopes[node.id].parentId].definition;\n      //let's do a quick check that it *is* a VariableDeclaration before\n      //continuing\n      if (node.nodeType !== \"VariableDeclaration\") {\n        break;\n      }\n    //otherwise, deliberately fall through to the VariableDeclaration case\n    //NOTE: DELIBERATE FALL-THROUGH\n    case \"VariableDeclaration\":\n      let varId = node.id;\n      debug(\"Variable declaration case\");\n      debug(\"currentDepth %d varId %d\", currentDepth, varId);\n\n      if (!inFunctionOrModifier) {\n        //if we're not in a function or modifier, then this is a contract\n        //variable, not a local variable, and should not be included\n        debug(\"already a contract variable!\");\n        break;\n      }\n\n      //otherwise, go ahead and make the assignment\n      assignment = makeAssignment(\n        inModifier\n          ? {\n              compilationId,\n              astRef: varId,\n              stackframe: currentDepth,\n              modifierDepth\n            }\n          : { compilationId, astRef: varId, stackframe: currentDepth },\n        {\n          location: \"stack\",\n          from: top - Codec.Ast.Utils.stackSize(node) + 1,\n          to: top\n        }\n      );\n      assignments = { [assignment.id]: assignment };\n      //this case doesn't need preambleAssignments either\n      debug(\"assignments: %O\", assignments);\n      yield put(actions.assign(assignments));\n      break;\n\n    case \"YulFunctionCall\":\n      if (nextPointer !== null && nextPointer.startsWith(pointer)) {\n        //if we're moving inside the function call itself, ignore it\n        break;\n      }\n    //NOTE: DELIBERATE FALL-THROUGH\n    case \"YulLiteral\":\n    case \"YulIdentifier\":\n      //yul variable declaration, maybe\n      let parentPointer = pointer.replace(/\\/[^/]*$/, \"\"); //chop off end\n      let root = yield select(data.current.root);\n      let parent = jsonpointer.get(root, parentPointer);\n      if (\n        pointer !== `${parentPointer}/value` ||\n        parent.nodeType !== \"YulVariableDeclaration\"\n      ) {\n        break;\n      }\n      node = parent;\n      pointer = parentPointer;\n    //NOTE: DELIBERATE FALL-THROUGH\n    case \"YulVariableDeclaration\":\n      const sourceAndPointer = makePath(sourceId, pointer);\n      debug(\"sourceAndPointer: %s\", sourceAndPointer);\n      assignments = {};\n      //variables go on from bottom to top, so process from top to bottom\n      position = top; //NOTE: remember that which stack we use depends on our node type!\n      for (let index = node.variables.length - 1; index >= 0; index--) {\n        //we only care about the pointer, not the variable\n        const variableSourceAndPointer = `${sourceAndPointer}/variables/${index}`;\n        assignment = makeAssignment(\n          inModifier\n            ? {\n                compilationId,\n                astRef: variableSourceAndPointer,\n                stackframe: currentDepth,\n                modifierDepth\n              }\n            : {\n                compilationId,\n                astRef: variableSourceAndPointer,\n                stackframe: currentDepth\n              },\n          {\n            location: \"stack\",\n            from: position, //all Yul variables are size 1\n            to: position\n          }\n        );\n        assignments[assignment.id] = assignment;\n        position--;\n      }\n\n      //this case doesn't need preambleAssignments, obviously!\n      yield put(actions.assign(assignments));\n      break;\n\n    case \"IndexAccess\":\n      // to track `mapping` types known indices\n      // (and also *some* known indices for arrays)\n\n      //HACK: we use the alternate stack in this case\n\n      debug(\"Index access case\");\n\n      //we're going to start by doing the same thing as in the default case\n      //(see below) -- getting things ready for an assignment.  Then we're\n      //going to forget this for a bit while we handle the rest...\n      assignments = {\n        ...preambleAssignments,\n        ...literalAssignments(\n          compilationId,\n          node,\n          stack,\n          currentDepth,\n          modifierDepth,\n          inModifier\n        )\n      };\n\n      //we'll need this\n      baseExpression = node.baseExpression;\n\n      //but first, a diversion -- is this something that could not *possibly*\n      //lead to a mapping?  i.e., either a bytes, or an array of non-reference\n      //types, or a non-storage array?\n      //if so, we'll just do the assign and quit out early\n      //(note: we write it this way because mappings aren't caught by\n      //isReference)\n      if (\n        Codec.Ast.Utils.typeClass(baseExpression) === \"bytes\" ||\n        (Codec.Ast.Utils.typeClass(baseExpression) === \"array\" &&\n          (Codec.Ast.Utils.isReference(node)\n            ? Codec.Ast.Utils.referenceType(baseExpression) !== \"storage\"\n            : !Codec.Ast.Utils.isMapping(node)))\n      ) {\n        debug(\"Index case bailed out early\");\n        debug(\"typeClass %s\", Codec.Ast.Utils.typeClass(baseExpression));\n        debug(\n          \"referenceType %s\",\n          Codec.Ast.Utils.referenceType(baseExpression)\n        );\n        debug(\"isReference(node) %o\", Codec.Ast.Utils.isReference(node));\n        yield put(actions.assign(assignments));\n        break;\n      }\n\n      let keyDefinition = Codec.Ast.Utils.keyDefinition(baseExpression, scopes);\n      //if we're dealing with an array, this will just spoof up a uint\n      //definition :)\n\n      //now... the decoding! (this is messy)\n      let indexValue = yield* decodeMappingKeySaga(\n        node.indexExpression,\n        keyDefinition\n      );\n\n      debug(\"index value %O\", indexValue);\n      debug(\"keyDefinition %o\", keyDefinition);\n\n      //whew! But we're not done yet -- we need to turn this decoded key into\n      //an actual path (assuming we *did* decode it; we check both for null\n      //and for the result being a Value and not an Error)\n      //OK, not an actual path -- we're just going to use a simple offset for\n      //the path.  But that's OK, because the mappedPaths reducer will turn\n      //it into an actual path.\n      if (indexValue != null && indexValue.value) {\n        path = fetchBasePath(\n          compilationId,\n          baseExpression,\n          mappedPaths,\n          currentAssignments,\n          currentDepth,\n          modifierDepth,\n          inModifier\n        );\n\n        let slot = { path };\n\n        //we need to do things differently depending on whether we're dealing\n        //with an array or mapping\n        switch (Codec.Ast.Utils.typeClass(baseExpression)) {\n          case \"array\":\n            slot.hashPath = Codec.Ast.Utils.isDynamicArray(baseExpression);\n            slot.offset = indexValue.value.asBN.muln(\n              Codec.Storage.Allocate.storageSize(\n                Codec.Ast.Import.definitionToType(\n                  node,\n                  compilationId,\n                  compiler\n                ),\n                userDefinedTypes,\n                storageAllocations\n              ).words\n            );\n            break;\n          case \"mapping\":\n            slot.key = indexValue;\n            slot.offset = new BN(0);\n            break;\n          default:\n            debug(\"unrecognized index access!\");\n        }\n        debug(\"slot %O\", slot);\n\n        //now, map it! (and do the assign as well)\n        yield put(\n          actions.mapPathAndAssign(\n            address,\n            slot,\n            assignments,\n            Codec.Ast.Utils.typeIdentifier(node),\n            Codec.Ast.Utils.typeIdentifier(baseExpression)\n          )\n        );\n      } else {\n        //if we failed to decode, just do the assign from above\n        debug(\"failed to decode, just assigning\");\n        yield put(actions.assign(assignments));\n      }\n\n      break;\n\n    case \"MemberAccess\":\n      //HACK: we use the alternate stack in this case\n\n      //we're going to start by doing the same thing as in the default case\n      //(see below) -- getting things ready for an assignment.  Then we're\n      //going to forget this for a bit while we handle the rest...\n      assignments = {\n        ...preambleAssignments,\n        ...literalAssignments(\n          compilationId,\n          node,\n          stack,\n          currentDepth,\n          modifierDepth,\n          inModifier\n        )\n      };\n\n      debug(\"Member access case\");\n\n      //MemberAccess uses expression, not baseExpression\n      baseExpression = node.expression;\n\n      //if this isn't a storage struct, or the element isn't of reference type,\n      //we'll just do the assignment and quit out (again, note that mappings\n      //aren't caught by isReference)\n      if (\n        Codec.Ast.Utils.typeClass(baseExpression) !== \"struct\" ||\n        (Codec.Ast.Utils.isReference(node)\n          ? Codec.Ast.Utils.referenceType(baseExpression) !== \"storage\"\n          : !Codec.Ast.Utils.isMapping(node))\n      ) {\n        debug(\"Member case bailed out early\");\n        yield put(actions.assign(assignments));\n        break;\n      }\n\n      //but if it is a storage struct, we have to map the path as well\n      path = fetchBasePath(\n        compilationId,\n        baseExpression,\n        mappedPaths,\n        currentAssignments,\n        currentDepth,\n        modifierDepth,\n        inModifier\n      );\n\n      slot = { path };\n\n      let structType = Codec.Ast.Import.definitionToType(\n        baseExpression,\n        compilationId,\n        compiler\n      );\n      let memberAllocations = storageAllocations[structType.id].members;\n      //members of a given struct have unique names so it's safe to look up the member by name\n      let memberName = scopes[node.referencedDeclaration].definition.name;\n      let memberAllocation = memberAllocations.find(\n        member => member.name === memberName\n      );\n\n      slot.offset = memberAllocation.pointer.range.from.slot.offset.clone();\n\n      debug(\"slot %o\", slot);\n      yield put(\n        actions.mapPathAndAssign(\n          address,\n          slot,\n          assignments,\n          Codec.Ast.Utils.typeIdentifier(node),\n          Codec.Ast.Utils.typeIdentifier(baseExpression)\n        )\n      );\n      break;\n\n    default:\n      if (node.id === undefined || node.typeDescriptions == undefined) {\n        break;\n      }\n\n      debug(\"decoding expression value %O\", node.typeDescriptions);\n      debug(\"default case\");\n      debug(\"currentDepth %d node.id %d\", currentDepth, node.id);\n\n      assignments = {\n        ...preambleAssignments,\n        ...literalAssignments(\n          compilationId,\n          node,\n          stack,\n          currentDepth,\n          modifierDepth,\n          inModifier\n        )\n      };\n      yield put(actions.assign(assignments));\n      break;\n  }\n}\n\nfunction* decodeMappingKeySaga(indexDefinition, keyDefinition) {\n  //something of a HACK -- cleans any out-of-range booleans\n  //resulting from the main mapping key decoding loop\n  let indexValue = yield* decodeMappingKeyCore(indexDefinition, keyDefinition);\n  return indexValue ? Codec.Conversion.cleanBool(indexValue) : indexValue;\n}\n\nfunction* decodeMappingKeyCore(indexDefinition, keyDefinition) {\n  let scopes = yield select(data.current.scopes.inlined);\n  let compilationId = yield select(data.current.compilationId);\n  let currentAssignments = yield select(data.proc.assignments);\n  let currentDepth = yield select(data.current.functionDepth);\n  let modifierDepth = yield select(data.current.modifierDepth);\n  let inModifier = yield select(data.current.inModifier);\n\n  //why the loop? see the end of the block it heads for an explanatory\n  //comment\n  while (true) {\n    let indexId = indexDefinition.id;\n    //indices need to be identified by stackframe\n    let indexIdObj = inModifier\n      ? {\n          compilationId,\n          astRef: indexId,\n          stackframe: currentDepth,\n          modifierDepth\n        }\n      : { compilationId, astRef: indexId, stackframe: currentDepth };\n    let fullIndexId = stableKeccak256(indexIdObj);\n\n    const indexReference = (currentAssignments.byId[fullIndexId] || {}).ref;\n\n    if (Codec.Ast.Utils.isSimpleConstant(indexDefinition)) {\n      //while the main case is the next one, where we look for a prior\n      //assignment, we need this case (and need it first) for two reasons:\n      //1. some constant expressions (specifically, string and hex literals)\n      //aren't sourcemapped to and so won't have a prior assignment\n      //2. if the key type is bytesN but the expression is constant, the\n      //value will go on the stack *left*-padded instead of right-padded,\n      //so looking for a prior assignment will read the wrong value.\n      //so instead it's preferable to use the constant directly.\n      debug(\"about to decode simple literal\");\n      return yield* decode(\n        keyDefinition,\n        {\n          location: \"definition\",\n          definition: indexDefinition\n        },\n        compilationId\n      );\n    } else if (indexReference) {\n      //if a prior assignment is found\n      let splicedDefinition;\n      //in general, we want to decode using the key definition, not the index\n      //definition. however, the key definition may have the wrong location\n      //on it.  so, when applicable, we splice the index definition location\n      //onto the key definition location.\n      if (Codec.Ast.Utils.isReference(indexDefinition)) {\n        splicedDefinition = Codec.Ast.Utils.spliceLocation(\n          keyDefinition,\n          Codec.Ast.Utils.referenceType(indexDefinition)\n        );\n        //we could put code here to add on the \"_ptr\" ending when absent,\n        //but we presently ignore that ending, so we'll skip that\n      } else {\n        splicedDefinition = keyDefinition;\n      }\n      debug(\"about to decode\");\n      return yield* decode(splicedDefinition, indexReference, compilationId);\n    } else if (\n      indexDefinition.referencedDeclaration &&\n      scopes[indexDefinition.referencedDeclaration]\n    ) {\n      //there's one more reason we might have failed to decode it: it might be a\n      //constant state variable.  Unfortunately, we don't know how to decode all\n      //those at the moment, but we can handle the ones we do know how to decode.\n      //In the future hopefully we will decode all of them\n      debug(\"referencedDeclaration %d\", indexDefinition.referencedDeclaration);\n      let indexConstantDeclaration =\n        scopes[indexDefinition.referencedDeclaration].definition;\n      debug(\"indexConstantDeclaration %O\", indexConstantDeclaration);\n      if (indexConstantDeclaration.constant) {\n        let indexConstantDefinition = indexConstantDeclaration.value;\n        //next line filters out constants we don't know how to handle\n        if (Codec.Ast.Utils.isSimpleConstant(indexConstantDefinition)) {\n          debug(\"about to decode simple constant\");\n          return yield* decode(\n            keyDefinition,\n            {\n              location: \"definition\",\n              definition: indexConstantDeclaration.value\n            },\n            compilationId\n          );\n        } else {\n          return null; //can't decode; see below for more explanation\n        }\n      } else {\n        return null; //can't decode; see below for more explanation\n      }\n    }\n    //there's still one more reason we might have failed to decode it:\n    //certain (silent) type conversions aren't sourcemapped either.\n    //(thankfully, any type conversion that actually *does* something seems\n    //to be sourcemapped.)  So if we've failed to decode it, we try again\n    //with the argument of the type conversion, if it is one; we leave\n    //indexValue undefined so the loop will continue\n    //(note that this case is last for a reason; if this were earlier, it\n    //would catch *non*-silent type conversions, which we want to just read\n    //off the stack)\n    else if (indexDefinition.kind === \"typeConversion\") {\n      indexDefinition = indexDefinition.arguments[0];\n    }\n    //...also prior to 0.5.0, unary + was legal, which needs to be accounted\n    //for for the same reason\n    else if (\n      indexDefinition.nodeType === \"UnaryOperation\" &&\n      indexDefinition.operator === \"+\"\n    ) {\n      indexDefinition = indexDefinition.subExpression;\n    }\n    //otherwise, we've just totally failed to decode it, so we mark\n    //indexValue as null (as distinct from undefined) to indicate this.  In\n    //the future, we should be able to decode all mapping keys, but we're\n    //not quite there yet, sorry (because we can't yet handle all constant\n    //state variables)\n    else {\n      return null;\n    }\n    //now, as mentioned, retry in the typeConversion case\n    //(or unary + case)\n  }\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* recordAllocations() {\n  const contracts = yield select(data.views.contractAllocationInfo);\n  debug(\"contracts %O\", contracts);\n  const referenceDeclarations = yield select(data.views.referenceDeclarations);\n  const userDefinedTypes = yield select(data.views.userDefinedTypes);\n  debug(\"referenceDeclarations %O\", referenceDeclarations);\n  const storageAllocations = Codec.Storage.Allocate.getStorageAllocations(\n    userDefinedTypes\n  );\n  debug(\"storageAllocations %O\", storageAllocations);\n  const memoryAllocations = Codec.Memory.Allocate.getMemoryAllocations(\n    userDefinedTypes\n  );\n  const abiAllocations = Codec.AbiData.Allocate.getAbiAllocations(\n    userDefinedTypes\n  );\n  const calldataAllocations = Codec.AbiData.Allocate.getCalldataAllocations(\n    contracts,\n    referenceDeclarations,\n    userDefinedTypes,\n    abiAllocations\n  );\n  const stateAllocations = Codec.Storage.Allocate.getStateAllocations(\n    contracts,\n    referenceDeclarations,\n    userDefinedTypes,\n    storageAllocations\n  );\n  yield put(\n    actions.allocate(\n      storageAllocations,\n      memoryAllocations,\n      abiAllocations,\n      calldataAllocations,\n      stateAllocations\n    )\n  );\n}\n\nfunction literalAssignments(\n  compilationId,\n  node,\n  stack,\n  currentDepth,\n  modifierDepth,\n  inModifier\n) {\n  let top = stack.length - 1;\n\n  let literal;\n  try {\n    literal = Codec.Stack.Read.readStack(\n      {\n        location: \"stack\",\n        from: top - Codec.Ast.Utils.stackSize(node) + 1,\n        to: top\n      },\n      {\n        stack,\n        storage: {} //irrelevant, but let's respect the type signature :)\n      }\n    );\n  } catch (error) {\n    literal = undefined; //not sure if this is right, but this is what would\n    //happen before, so I figure it's safe?\n  }\n\n  let assignment = makeAssignment(\n    inModifier\n      ? {\n          compilationId,\n          astRef: node.id,\n          stackframe: currentDepth,\n          modifierDepth\n        }\n      : { compilationId, astRef: node.id, stackframe: currentDepth },\n    { location: \"stackliteral\", literal }\n  );\n\n  return { [assignment.id]: assignment };\n}\n\n//takes a parameter list as given in the AST\nfunction assignParameters(\n  compilationId,\n  parameters,\n  top,\n  functionDepth,\n  modifierDepth = 0,\n  forModifier = false\n) {\n  let reverseParameters = parameters.slice().reverse();\n  //reverse is in-place, so we use slice() to clone first\n  debug(\"reverseParameters %o\", parameters);\n\n  let currentPosition = top;\n  let assignments = {};\n\n  for (let parameter of reverseParameters) {\n    let words = Codec.Ast.Utils.stackSize(parameter);\n    let pointer = {\n      location: \"stack\",\n      from: currentPosition - words + 1,\n      to: currentPosition\n    };\n    let assignment = makeAssignment(\n      forModifier\n        ? {\n            compilationId,\n            astRef: parameter.id,\n            stackframe: functionDepth,\n            modifierDepth\n          }\n        : { compilationId, astRef: parameter.id, stackframe: functionDepth },\n      pointer\n    );\n    assignments[assignment.id] = assignment;\n    currentPosition -= words;\n  }\n  return assignments;\n}\n\nfunction fetchBasePath(\n  compilationId,\n  baseNode,\n  mappedPaths,\n  currentAssignments,\n  currentDepth,\n  modifierDepth,\n  inModifier\n) {\n  let fullId = stableKeccak256(\n    inModifier\n      ? {\n          compilationId,\n          astRef: baseNode.id,\n          stackframe: currentDepth,\n          modifierDepth\n        }\n      : {\n          compilationId,\n          astRef: baseNode.id,\n          stackframe: currentDepth\n        }\n  );\n  debug(\"astId: %d\", baseNode.id);\n  debug(\"stackframe: %d\", currentDepth);\n  debug(\"fullId: %s\", fullId);\n  debug(\"currentAssignments: %O\", currentAssignments);\n  //base expression is an expression, and so has a literal assigned to\n  //it\n  let offset = Codec.Conversion.toBN(\n    currentAssignments.byId[fullId].ref.literal\n  );\n  return { offset };\n}\n\nexport function* saga() {\n  yield takeEvery(TICK, tickSaga);\n}\n\nexport default prefixName(\"data\", saga);\n","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","export const ADVANCE = \"CONTROLLER_ADVANCE\";\nexport function advance(count) {\n  return { type: ADVANCE, count };\n}\n\nexport const STEP_NEXT = \"CONTROLLER_STEP_NEXT\";\nexport function stepNext() {\n  return { type: STEP_NEXT };\n}\n\nexport const STEP_OVER = \"CONTROLLER_STEP_OVER\";\nexport function stepOver() {\n  return { type: STEP_OVER };\n}\n\nexport const STEP_INTO = \"CONTROLLER_STEP_INTO\";\nexport function stepInto() {\n  return { type: STEP_INTO };\n}\n\nexport const STEP_OUT = \"CONTROLLER_STEP_OUT\";\nexport function stepOut() {\n  return { type: STEP_OUT };\n}\n\nexport const RESET = \"CONTROLLER_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n\nexport const INTERRUPT = \"CONTROLLER_INTERRUPT\";\nexport function interrupt() {\n  return { type: INTERRUPT };\n}\n\nexport const CONTINUE = \"CONTROLLER_CONTINUE\";\nexport function continueUntilBreakpoint(breakpoints) {\n  //\"continue\" is not a legal name\n  return {\n    type: CONTINUE,\n    breakpoints\n  };\n}\n\nexport const ADD_BREAKPOINT = \"CONTROLLER_ADD_BREAKPOINT\";\nexport function addBreakpoint(breakpoint) {\n  return {\n    type: ADD_BREAKPOINT,\n    breakpoint\n  };\n}\n\nexport const REMOVE_BREAKPOINT = \"CONTROLLER_REMOVE_BREAKPOINT\";\nexport function removeBreakpoint(breakpoint) {\n  return {\n    type: REMOVE_BREAKPOINT,\n    breakpoint\n  };\n}\n\nexport const REMOVE_ALL_BREAKPOINTS = \"CONTROLLER_REMOVE_ALL_BREAKPOINTS\";\nexport function removeAllBreakpoints() {\n  return {\n    type: REMOVE_ALL_BREAKPOINTS\n  };\n}\n\nexport const START_STEPPING = \"CONTROLLER_START_STEPPING\";\nexport function startStepping() {\n  return {\n    type: START_STEPPING\n  };\n}\n\nexport const DONE_STEPPING = \"CONTROLLER_DONE_STEPPING\";\nexport function doneStepping() {\n  return {\n    type: DONE_STEPPING\n  };\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\nimport flatten from \"lodash.flatten\";\nimport semver from \"semver\";\n\nimport { stableKeccak256, makePath } from \"lib/helpers\";\n\nimport trace from \"lib/trace/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport * as Codec from \"@truffle/codec\";\n\n/**\n * @private\n */\nconst identity = x => x;\n\nfunction findAncestorOfType(node, types, scopes, pointer = null, root = null) {\n  //note: you may want to include \"SourceUnit\" as a fallback type when using\n  //this function for convenience.\n  //you only need to pass pointer and root if you want this function to work\n  //from Yul.  Otherwise you can omit those and you'll get null if you happen\n  //to be in Yul.\n  while (node && !types.includes(node.nodeType)) {\n    if (node.id !== undefined) {\n      node = scopes[scopes[node.id].parentId].definition;\n    } else {\n      if (pointer === null || root === null) {\n        return null;\n      }\n      pointer = pointer.replace(/\\/[^/]*$/, \"\"); //chop off end\n      node = jsonpointer.get(root, pointer);\n    }\n  }\n  return node;\n}\n\n//given a modifier invocation (or inheritance specifier) node,\n//get the node for the actual modifier (or constructor)\nfunction modifierForInvocation(invocation, scopes) {\n  let rawId; //raw referencedDeclaration ID extracted from the AST.\n  //if it's a modifier this is what we want, but if it's base\n  //constructor, we'll get the contract instead, and need to find its\n  //constructor.\n  switch (invocation.nodeType) {\n    case \"ModifierInvocation\":\n      rawId = invocation.modifierName.referencedDeclaration;\n      break;\n    case \"InheritanceSpecifier\":\n      rawId = invocation.baseName.referencedDeclaration;\n      break;\n    default:\n      debug(\"bad invocation node\");\n  }\n  let rawNode = scopes[rawId].definition;\n  switch (rawNode.nodeType) {\n    case \"ModifierDefinition\":\n      return rawNode;\n    case \"ContractDefinition\":\n      return rawNode.nodes.find(\n        node =>\n          node.nodeType === \"FunctionDefinition\" &&\n          Codec.Ast.Utils.functionKind(node) === \"constructor\"\n      );\n    default:\n      //we should never hit this case\n      return undefined;\n  }\n}\n\n//see data.views.contexts for an explanation\nfunction debuggerContextToDecoderContext(context) {\n  let {\n    context: contextHash,\n    contractName,\n    binary,\n    contractId,\n    contractKind,\n    isConstructor,\n    abi,\n    payable,\n    compiler,\n    compilationId\n  } = context;\n  return {\n    context: contextHash,\n    contractName,\n    binary,\n    contractId,\n    contractKind,\n    isConstructor,\n    abi: Codec.AbiData.Utils.computeSelectors(abi),\n    payable,\n    compiler,\n    compilationId\n  };\n}\n\n//spoofed definitions we'll need\n//we'll give them id -1 to indicate that they're spoofed\n\nexport const NOW_DEFINITION = {\n  id: -1,\n  src: \"0:0:-1\",\n  name: \"now\",\n  nodeType: \"VariableDeclaration\",\n  typeDescriptions: {\n    typeIdentifier: \"t_uint256\",\n    typeString: \"uint256\"\n  }\n};\n\nexport const MSG_DEFINITION = {\n  id: -1,\n  src: \"0:0:-1\",\n  name: \"msg\",\n  nodeType: \"VariableDeclaration\",\n  typeDescriptions: {\n    typeIdentifier: \"t_magic_message\",\n    typeString: \"msg\"\n  }\n};\n\nexport const TX_DEFINITION = {\n  id: -1,\n  src: \"0:0:-1\",\n  name: \"tx\",\n  nodeType: \"VariableDeclaration\",\n  typeDescriptions: {\n    typeIdentifier: \"t_magic_transaction\",\n    typeString: \"tx\"\n  }\n};\n\nexport const BLOCK_DEFINITION = {\n  id: -1,\n  src: \"0:0:-1\",\n  name: \"block\",\n  nodeType: \"VariableDeclaration\",\n  typeDescriptions: {\n    typeIdentifier: \"t_magic_block\",\n    typeString: \"block\"\n  }\n};\n\nfunction spoofThisDefinition(contractName, contractId, contractKind) {\n  let formattedName = contractName.replace(/\\$/g, \"$$\".repeat(3));\n  //note that string.replace treats $'s specially in the replacement string;\n  //we want 3 $'s for each $ in the input, so we need to put *6* $'s in the\n  //replacement string\n  return {\n    id: -1,\n    src: \"0:0:-1\",\n    name: \"this\",\n    nodeType: \"VariableDeclaration\",\n    typeDescriptions: {\n      typeIdentifier: \"t_contract$_\" + formattedName + \"_$\" + contractId,\n      typeString: contractKind + \" \" + contractName\n    }\n  };\n}\n\nconst data = createSelectorTree({\n  state: state => state.data,\n\n  /**\n   * data.views\n   */\n  views: {\n    /*\n     * data.views.atLastInstructionForSourceRange\n     */\n    atLastInstructionForSourceRange: createLeaf(\n      [solidity.current.isSourceRangeFinal],\n      final => final\n    ),\n\n    /**\n     * data.views.scopes (namespace)\n     */\n    scopes: {\n      /**\n       * data.view.scopes (selector)\n       * the raw version is below; this version accounts for inheritance\n       * NOTE: grouped by compilation\n       */\n      _: createLeaf([\"./raw\", \"./inlined/raw\"], (scopes, inlined) =>\n        Object.assign(\n          {},\n          ...Object.entries(scopes).map(([compilationId, nodes]) => ({\n            [compilationId]: Object.assign(\n              {},\n              ...Object.entries(nodes).map(([id, scope]) => {\n                let definition = inlined[compilationId][id].definition;\n                if (definition.nodeType !== \"ContractDefinition\") {\n                  return { [id]: scope };\n                }\n                //if we've reached this point, we should be dealing with a\n                //contract, and specifically a contract -- not an interface or\n                //library (those don't get \"variables\" entries in their scopes)\n                debug(\"contract id %d\", id);\n                let newScope = { ...scope };\n                //note that Solidity gives us the linearization in order from most\n                //derived to most base, but we want most base to most derived;\n                //annoyingly, reverse() is in-place, so we clone with slice() first\n                let linearizedBaseContractsFromBase = definition.linearizedBaseContracts\n                  .slice()\n                  .reverse();\n                linearizedBaseContractsFromBase.pop(); //remove the last element, i.e.,\n                //the contract itself, because we want to treat that one specially\n                //now, we put it all together\n                newScope.variables = []\n                  .concat(\n                    //concatenate the variables lists from the base classes\n                    ...linearizedBaseContractsFromBase.map(\n                      contractId =>\n                        scopes[compilationId][contractId].variables || []\n                      //we need the || [] because contracts with no state variables\n                      //have variables undefined rather than empty like you'd expect\n                    )\n                  )\n                  .filter(\n                    variable =>\n                      inlined[compilationId][variable.astRef].definition\n                        .visibility !== \"private\"\n                    //filter out private variables from the base classes\n                  )\n                  //add in the variables for the contract itself -- note that here\n                  //private variables are not filtered out!\n                  .concat(scopes[compilationId][id].variables || [])\n                  .filter(variable => {\n                    //HACK: let's filter out those constants we don't know\n                    //how to read.  they'll just clutter things up.\n                    debug(\"variable %O\", variable);\n                    let definition =\n                      inlined[compilationId][variable.astRef].definition;\n                    return (\n                      !definition.constant ||\n                      Codec.Ast.Utils.isSimpleConstant(definition.value)\n                    );\n                  });\n\n                return { [id]: newScope };\n              })\n            )\n          }))\n        )\n      ),\n\n      /*\n       * data.views.scopes.raw\n       * NOTE: grouped by compilation\n       *\n       * the raw scopes data, just with intermediate\n       * layers cut out\n       */\n      raw: createLeaf([\"/info/scopes\"], scopes =>\n        Object.assign(\n          {},\n          ...Object.entries(scopes.byCompilationId).map(\n            ([compilationId, { byAstRef: nodes }]) => ({\n              [compilationId]: { ...nodes }\n            })\n          )\n        )\n      ),\n\n      /**\n       * data.views.scopes.inlined (namespace)\n       */\n      inlined: {\n        /**\n         * data.views.scopes.inlined (selector)\n         * see data.views.scopes for how this differs from the raw version\n         * NOTE: grouped by compilation\n         */\n        _: createLeaf([\"../_\", \"./raw\"], (scopes, inlined) =>\n          Object.assign(\n            {},\n            ...Object.entries(inlined).map(([compilationId, nodes]) => ({\n              [compilationId]: Object.assign(\n                {},\n                ...Object.entries(nodes).map(([id, info]) => ({\n                  [id]: {\n                    ...info,\n                    variables: scopes[compilationId][id].variables\n                  }\n                }))\n              )\n            }))\n          )\n        ),\n\n        /**\n         * data.views.scopes.inlined.raw\n         * NOTE: grouped by compilation\n         */\n        raw: createLeaf(\n          [\"../raw\", solidity.info.sources],\n\n          (scopes, sources) =>\n            Object.assign(\n              {},\n              ...Object.entries(scopes).map(([compilationId, nodes]) => ({\n                [compilationId]: Object.assign(\n                  {},\n                  ...Object.entries(nodes).map(([id, entry]) => ({\n                    [id]: {\n                      ...entry,\n\n                      definition: jsonpointer.get(\n                        sources[compilationId].byId[entry.sourceId].ast,\n                        entry.pointer\n                      )\n                    }\n                  }))\n                )\n              }))\n            )\n        )\n      }\n    },\n\n    /*\n     * data.views.userDefinedTypes\n     * user-defined types for passing to the decoder\n     * NOTE: *not* grouped by compilation\n     */\n    userDefinedTypes: createLeaf(\n      [\"./referenceDeclarations\", \"./scopes\", solidity.info.sources],\n      (referenceDeclarations, scopes, sources) => {\n        return Object.assign(\n          {},\n          ...flatten(\n            Object.entries(referenceDeclarations).map(\n              ([compilationId, nodes]) =>\n                Object.values(nodes)\n                  .map(node =>\n                    Codec.Ast.Import.definitionToStoredType(\n                      node,\n                      compilationId,\n                      sources[compilationId].byId[\n                        scopes[compilationId][node.id].sourceId\n                      ].compiler,\n                      referenceDeclarations[compilationId]\n                    )\n                  )\n                  .map(type => ({ [type.id]: type }))\n            )\n          )\n        );\n      }\n    ),\n\n    /*\n     * data.views.contractAllocationInfo\n     */\n    contractAllocationInfo: createLeaf(\n      [\n        \"/info/userDefinedTypes\",\n        \"/views/scopes/inlined\",\n        solidity.info.sources,\n        evm.info.contexts\n      ],\n      (userDefinedTypes, scopes, sources, contexts) =>\n        Object.values(userDefinedTypes)\n          .filter(\n            ({ compilationId, id }) =>\n              scopes[compilationId][id].definition.nodeType ===\n              \"ContractDefinition\"\n          )\n          .map(({ compilationId, id }) => {\n            debug(\"id: %O\", id);\n            debug(\"compilationId: %O\", compilationId);\n            let deployedContext = Object.values(contexts).find(\n              context =>\n                !context.isConstructor &&\n                context.compilationId === compilationId &&\n                context.contractId === id\n            );\n            let constructorContext = Object.values(contexts).find(\n              context =>\n                context.isConstructor &&\n                context.compilationId === compilationId &&\n                context.contractId === id\n            );\n            let immutableReferences = deployedContext\n              ? deployedContext.immutableReferences\n              : undefined;\n            return {\n              contractNode: scopes[compilationId][id].definition,\n              compilationId,\n              immutableReferences,\n              //we don't just use deployedContext to get compiler because it might not exist!\n              compiler:\n                sources[compilationId].byId[scopes[compilationId][id].sourceId]\n                  .compiler,\n              //the following three are only needed for decoding return values\n              abi: (deployedContext || {}).abi,\n              deployedContext,\n              constructorContext\n            };\n          })\n    ),\n\n    /*\n     * data.views.referenceDeclarations\n     * NOTE: grouped by compilation\n     */\n    referenceDeclarations: createLeaf(\n      [\"./scopes/inlined\", \"/info/userDefinedTypes\"],\n      (scopes, userDefinedTypes) =>\n        Object.assign(\n          {},\n          ...Object.entries(scopes).map(([compilationId, nodes]) => ({\n            [compilationId]: Object.assign(\n              {},\n              ...userDefinedTypes.map(\n                ({ compilationId: compilationIdForType, id }) =>\n                  compilationIdForType === compilationId\n                    ? { [id]: nodes[id].definition }\n                    : {}\n              )\n            )\n          }))\n        )\n    ),\n\n    /**\n     * data.views.mappingKeys\n     */\n    mappingKeys: createLeaf(\n      [\"/proc/mappedPaths\", \"/current/address\"],\n      (mappedPaths, address) =>\n        []\n          .concat(\n            ...Object.values(\n              (mappedPaths.byAddress[address] || { byType: {} }).byType\n            ).map(({ bySlotAddress }) => Object.values(bySlotAddress))\n          )\n          .filter(slot => slot.key !== undefined)\n    ),\n\n    /*\n     * data.views.blockNumber\n     * returns block number as string\n     */\n    blockNumber: createLeaf([evm.transaction.globals.block], block =>\n      block.number.toString()\n    ),\n\n    /*\n     * data.views.instances\n     * same as evm.current.codex.instances, but we just map address => binary,\n     * we don't bother with context, and also the code is a Uint8Array\n     */\n    instances: createLeaf([evm.current.codex.instances], instances =>\n      Object.assign(\n        {},\n        ...Object.entries(instances).map(([address, { binary }]) => ({\n          [address]: Codec.Conversion.toBytes(binary)\n        }))\n      )\n    ),\n\n    /*\n     * data.views.contexts\n     * same as evm.info.contexts, but:\n     * 0. we only include non-constructor contexts\n     * 1. we strip out sourceMap and primarySource\n     * 2. we alter abi in two ways:\n     * 2a. we strip out everything but functions\n     * 2b. abi is now an object, not an array, and indexed by these signatures\n     */\n    contexts: createLeaf([evm.info.contexts], contexts =>\n      Object.assign(\n        {},\n        ...Object.values(contexts)\n          .filter(context => !context.isConstructor)\n          .map(context => ({\n            [context.contractId]: debuggerContextToDecoderContext(context)\n          }))\n      )\n    )\n  },\n\n  /**\n   * data.info\n   */\n  info: {\n    /**\n     * data.info.scopes\n     */\n    scopes: createLeaf([\"/state\"], state => state.info.scopes),\n\n    /*\n     * data.info.allocations\n     */\n    allocations: {\n      /*\n       * data.info.allocations.storage\n       */\n      storage: createLeaf([\"/state\"], state => state.info.allocations.storage),\n\n      /**\n       * data.info.allocations.state\n       */\n      state: createLeaf([\"/state\"], state => state.info.allocations.state),\n\n      /*\n       * data.info.allocations.memory\n       */\n      memory: createLeaf([\"/state\"], state => state.info.allocations.memory),\n\n      /*\n       * data.info.allocations.abi\n       */\n      abi: createLeaf([\"/state\"], state => state.info.allocations.abi),\n\n      /*\n       * data.info.allocations.calldata\n       */\n      calldata: createLeaf([\"/state\"], state => state.info.allocations.calldata)\n    },\n\n    /**\n     * data.info.userDefinedTypes\n     */\n    userDefinedTypes: createLeaf(\n      [\"/state\"],\n      state => state.info.userDefinedTypes\n    )\n  },\n\n  /**\n   * data.proc\n   */\n  proc: {\n    /**\n     * data.proc.assignments\n     */\n    assignments: createLeaf(\n      [\"/state\"],\n      state => state.proc.assignments\n      //note: this no longer fetches just the byId, but rather the whole\n      //assignments object\n    ),\n\n    /*\n     * data.proc.mappedPaths\n     */\n    mappedPaths: createLeaf([\"/state\"], state => state.proc.mappedPaths),\n\n    /**\n     * data.proc.decodingKeys\n     *\n     * number of keys that are still decoding\n     */\n    decodingKeys: createLeaf(\n      [\"./mappedPaths\"],\n      mappedPaths => mappedPaths.decodingStarted\n    )\n  },\n\n  /**\n   * data.current\n   */\n  current: {\n    /**\n     * data.current.state\n     */\n    state: {\n      /**\n       * data.current.state.stack\n       */\n      stack: createLeaf(\n        [evm.current.state.stack],\n\n        words => (words || []).map(word => Codec.Conversion.toBytes(word))\n      ),\n\n      /**\n       * data.current.state.memory\n       */\n      memory: createLeaf(\n        [evm.current.state.memory],\n\n        words => Codec.Conversion.toBytes(words.join(\"\"))\n      ),\n\n      /**\n       * data.current.state.code\n       */\n      code: createLeaf([evm.current.context], ({ binary }) =>\n        Codec.Conversion.toBytes(binary)\n      ),\n\n      /**\n       * data.current.state.calldata\n       */\n      calldata: createLeaf(\n        [evm.current.call],\n\n        ({ data }) => Codec.Conversion.toBytes(data)\n      ),\n\n      /**\n       * data.current.state.storage\n       */\n      storage: createLeaf(\n        [evm.current.codex.storage],\n\n        mapping =>\n          Object.assign(\n            {},\n            ...Object.entries(mapping).map(([address, word]) => ({\n              [`0x${address}`]: Codec.Conversion.toBytes(word)\n            }))\n          )\n      ),\n\n      /*\n       * data.current.state.specials\n       * I've named these after the solidity variables they correspond to,\n       * which are *mostly* the same as the corresponding EVM opcodes\n       * (FWIW: this = ADDRESS, sender = CALLER, value = CALLVALUE)\n       */\n      specials: createLeaf(\n        [\"/current/address\", evm.current.call, evm.transaction.globals],\n        (address, { sender, value }, { tx, block }) => ({\n          this: Codec.Conversion.toBytes(address),\n\n          sender: Codec.Conversion.toBytes(sender),\n\n          value: Codec.Conversion.toBytes(value),\n\n          //let's crack open that tx and block!\n          ...Object.assign(\n            {},\n            ...Object.entries(tx).map(([variable, value]) => ({\n              [variable]: Codec.Conversion.toBytes(value)\n            }))\n          ),\n\n          ...Object.assign(\n            {},\n            ...Object.entries(block).map(([variable, value]) => ({\n              [variable]: Codec.Conversion.toBytes(value)\n            }))\n          )\n        })\n      )\n    },\n\n    /**\n     * data.current.compilationId\n     */\n    compilationId: createLeaf(\n      [evm.current.context],\n      ({ compilationId }) => compilationId\n    ),\n\n    /**\n     * data.current.sourceId\n     */\n    sourceId: createLeaf([solidity.current.source], ({ id }) => id),\n\n    /**\n     * data.current.root\n     */\n    root: createLeaf([solidity.current.source], ({ ast }) => ast),\n\n    /**\n     * data.current.scopes (namespace)\n     */\n    scopes: {\n      /**\n       * data.current.scopes (selector)\n       * Replacement for the old data.info.scopes;\n       * that one now contains multi-compilation info, this\n       * one contains only the current compilation\n       */\n      _: createLeaf(\n        [\"/views/scopes\", \"../compilationId\"],\n        (scopes, compilationId) => scopes[compilationId]\n      ),\n\n      /**\n       * data.current.scopes.inlined\n       * Replacement for the old data.views.scopes.inlined;\n       * that one now contains multi-compilation info, this\n       * one contains only the current compilation\n       */\n      inlined: createLeaf(\n        [\"/views/scopes/inlined\", \"../compilationId\"],\n        (scopes, compilationId) => scopes[compilationId]\n      )\n    },\n\n    /*\n     * data.current.referenceDeclarations\n     */\n    referenceDeclarations: createLeaf(\n      [\"/views/referenceDeclarations\", \"./compilationId\"],\n      (scopes, compilationId) => scopes[compilationId]\n    ),\n\n    /*\n     * data.current.allocations\n     */\n    allocations: {\n      /*\n       * data.current.allocations.state\n       * Same as data.info.allocations.state, but uses the old allocation\n       * format (more convenient for debugger) where members are stored by ID\n       * in an object instead of by index in an array; also only holds things\n       * from the current compilation\n       * ALSO: if we're in a constructor, replaces all code pointers by appropriate\n       * memory pointers :)\n       */\n      state: createLeaf(\n        [\n          \"/info/allocations/state\",\n          \"/views/userDefinedTypes\",\n          \"../compilationId\",\n          evm.current.context\n        ],\n        (\n          allAllocations,\n          userDefinedTypes,\n          compilationId,\n          { isConstructor }\n        ) => {\n          const allocations = compilationId\n            ? allAllocations[compilationId]\n            : {};\n          //several-deep clone\n          let transformedAllocations = Object.assign(\n            {},\n            ...Object.entries(allocations).map(([id, allocation]) => ({\n              [id]: {\n                members: allocation.members.map(member => ({ ...member }))\n              }\n            }))\n          );\n          //if we're not in a constructor, we don't need to actually transform it.\n          //if we are...\n          if (isConstructor) {\n            //...we must transform code pointers!\n            for (const id in transformedAllocations) {\n              const allocation = transformedAllocations[id];\n              //here, the magic number 4 is the number of reserved memory slots\n              //at the start of memory.  immutables go immediately afterward.\n              let start = 4 * Codec.Evm.Utils.WORD_SIZE;\n              for (const member of allocation.members) {\n                //if it's not a code pointer, leave it alone\n                if (\n                  member.pointer.location === \"code\" ||\n                  member.pointer.location === \"nowhere\"\n                ) {\n                  //if it is, transform it\n                  member.pointer = {\n                    location: \"memory\",\n                    start,\n                    length: Codec.Evm.Utils.WORD_SIZE\n                  };\n                  start += Codec.Evm.Utils.WORD_SIZE;\n                }\n              }\n            }\n          }\n          //having now transformed code pointers if needed,\n          //we now index by ID\n          return Object.assign(\n            {},\n            ...Object.entries(transformedAllocations).map(\n              ([id, allocation]) => ({\n                [id]: {\n                  members: Object.assign(\n                    {},\n                    ...allocation.members.map(memberAllocation => ({\n                      [memberAllocation.definition.id]: memberAllocation\n                    }))\n                  )\n                }\n              })\n            )\n          );\n        }\n      )\n    },\n\n    /**\n     * data.current.compiler\n     */\n    compiler: createLeaf([evm.current.context], ({ compiler }) => compiler),\n\n    /**\n     * data.current.bareLetsInYulAreHit\n     */\n    bareLetsInYulAreHit: createLeaf(\n      [\"./compiler\"],\n      compiler =>\n        compiler !== undefined && //if no compiler we'll assume the old way I guess??\n        semver.satisfies(compiler.version, \">=0.6.8\", {\n          includePrerelease: true\n        })\n    ),\n\n    /**\n     * data.current.node\n     */\n    node: createLeaf([solidity.current.node], identity),\n\n    /**\n     * data.current.pointer\n     */\n    pointer: createLeaf([solidity.current.pointer], identity),\n\n    /**\n     * data.current.scope\n     * old alias for data.current.node (deprecated)\n     */\n    scope: createLeaf([\"./node\"], identity),\n\n    /*\n     * data.current.contract\n     * warning: may return null or similar, even though SourceUnit is included\n     * as fallback\n     */\n    contract: createLeaf(\n      [\"./node\", \"./scopes/inlined\", \"./pointer\", \"./root\"],\n      (node, scopes, pointer, root) => {\n        const types = [\"ContractDefinition\", \"SourceUnit\"];\n        //SourceUnit included as fallback\n        return findAncestorOfType(node, types, scopes, pointer, root);\n      }\n    ),\n\n    /*\n     * data.current.function\n     * may be modifier rather than function!\n     */\n    function: createLeaf(\n      [\"./node\", \"./scopes/inlined\", \"./pointer\", \"./root\"],\n      (node, scopes, pointer, root) => {\n        const types = [\n          \"FunctionDefinition\",\n          \"ModifierDefinition\",\n          \"ContractDefinition\",\n          \"SourceUnit\"\n        ];\n        //SourceUnit included as fallback\n        return findAncestorOfType(node, types, scopes, pointer, root);\n      }\n    ),\n\n    /*\n     * data.current.inModifier\n     */\n    inModifier: createLeaf(\n      [\"./function\"],\n      node => node && node.nodeType === \"ModifierDefinition\"\n    ),\n\n    /*\n     * data.current.inFunctionOrModifier\n     */\n    inFunctionOrModifier: createLeaf(\n      [\"./function\"],\n      node =>\n        node &&\n        (node.nodeType === \"FunctionDefinition\" ||\n          node.nodeType === \"ModifierDefinition\")\n    ),\n\n    /**\n     * data.current.functionDepth\n     */\n\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * data.current.modifierDepth\n     */\n\n    modifierDepth: createLeaf([solidity.current.modifierDepth], identity),\n\n    /**\n     * data.current.address\n     * NOTE: this is the STORAGE address for the current call, not the CODE\n     * address\n     */\n\n    address: createLeaf([evm.current.call], call => call.storageAddress),\n\n    /**\n     * data.current.functionsByProgramCounter\n     */\n    functionsByProgramCounter: createLeaf(\n      [solidity.current.functionsByProgramCounter],\n      functions => functions\n    ),\n\n    /**\n     * data.current.context\n     */\n    context: createLeaf([evm.current.context], debuggerContextToDecoderContext),\n\n    /*\n     * data.current.aboutToModify\n     * HACK\n     * This selector is used to catch those times when we go straight from a\n     * modifier invocation into the modifier itself, skipping over the\n     * definition node (this includes base constructor calls).  So it should\n     * return true when:\n     * 1. we're on the node corresponding to an argument to a modifier\n     * invocation or base constructor call, or, if said argument is a type\n     * conversion, its argument (or nested argument)\n     * 2. the next node is not a FunctionDefinition, ModifierDefinition, or\n     * in the same modifier / base constructor invocation\n     */\n    aboutToModify: createLeaf(\n      [\n        \"./node\",\n        \"./modifierInvocation\",\n        \"./modifierArgumentIndex\",\n        \"/next/node\",\n        \"/next/modifierInvocation\",\n        evm.current.step.isContextChange\n      ],\n      (node, invocation, index, next, nextInvocation, isContextChange) => {\n        //ensure: current instruction is not a context change (because if it is\n        //we cannot rely on the data.next selectors, but also if it is we know\n        //we're not about to call a modifier or base constructor!)\n        //we also want to return false if we can't find things for whatever\n        //reason\n        if (\n          isContextChange ||\n          !node ||\n          node.id === undefined ||\n          !next ||\n          next.id === undefined ||\n          !invocation ||\n          invocation.id === undefined ||\n          !nextInvocation ||\n          nextInvocation.id === undefined\n        ) {\n          return false;\n        }\n\n        //ensure: current position is in a ModifierInvocation or\n        //InheritanceSpecifier (recall that SourceUnit was included as\n        //fallback)\n        if (invocation.nodeType === \"SourceUnit\") {\n          return false;\n        }\n\n        //ensure: next node is not a function definition or modifier definition\n        if (\n          next.nodeType === \"FunctionDefinition\" ||\n          next.nodeType === \"ModifierDefinition\"\n        ) {\n          return false;\n        }\n\n        //ensure: next node is not in the same invocation\n        if (\n          nextInvocation.nodeType !== \"SourceUnit\" &&\n          nextInvocation.id === invocation.id\n        ) {\n          return false;\n        }\n\n        //now: are we on the node corresponding to an argument, or, if\n        //it's a type conversion, its nested argument?\n        if (index === undefined) {\n          return false;\n        }\n        let argument = invocation.arguments[index];\n        while (argument.kind === \"typeConversion\") {\n          if (node.id === argument.id) {\n            return true;\n          }\n          argument = argument.arguments[0];\n        }\n        return node.id === argument.id;\n      }\n    ),\n\n    /*\n     * data.current.modifierInvocation\n     */\n    modifierInvocation: createLeaf(\n      [\"./node\", \"./scopes/inlined\"],\n      (node, scopes) => {\n        const types = [\n          \"ModifierInvocation\",\n          \"InheritanceSpecifier\",\n          \"SourceUnit\"\n        ];\n        //again, SourceUnit included as fallback\n        return findAncestorOfType(node, types, scopes);\n      }\n    ),\n\n    /**\n     * data.current.modifierArgumentIndex\n     * gets the index of the current modifier argument that you're in\n     * (undefined when not in a modifier argument)\n     */\n    modifierArgumentIndex: createLeaf(\n      [\"./scopes\", \"./node\", \"./modifierInvocation\"],\n      (scopes, node, invocation) => {\n        if (!invocation || invocation.nodeType === \"SourceUnit\") {\n          return undefined;\n        }\n\n        let pointer = scopes[node.id].pointer;\n        let invocationPointer = scopes[invocation.id].pointer;\n\n        //slice the invocation pointer off the beginning\n        let difference = pointer.slice(invocationPointer.length);\n        debug(\"difference %s\", difference);\n        let rawIndex = difference.match(/^\\/arguments\\/(\\d+)/);\n        //note that that \\d+ is greedy\n        debug(\"rawIndex %o\", rawIndex);\n        if (rawIndex === null) {\n          return undefined;\n        }\n        return parseInt(rawIndex[1]);\n      }\n    ),\n\n    /*\n     * data.current.modifierBeingInvoked\n     * gets the node corresponding to the modifier or base constructor\n     * being invoked\n     */\n    modifierBeingInvoked: createLeaf(\n      [\"./modifierInvocation\", \"./scopes/inlined\"],\n      (invocation, scopes) => {\n        if (!invocation || invocation.nodeType === \"SourceUnit\") {\n          return undefined;\n        }\n\n        return modifierForInvocation(invocation, scopes);\n      }\n    ),\n\n    /**\n     * data.current.identifiers (namespace)\n     */\n    identifiers: {\n      /**\n       * data.current.identifiers (selector)\n       *\n       * returns identifers and corresponding definition node ID or builtin name\n       * (object entries look like [name]: {astRef: astRef}, [name]: {builtin: name})\n       */\n      _: createLeaf(\n        [\n          \"/current/scopes/inlined\",\n          \"/current/node\",\n          \"/current/pointer\",\n          \"/current/sourceId\"\n        ],\n\n        (scopes, scope, pointer, sourceId) => {\n          let variables = {};\n          if (scope !== undefined) {\n            let cur =\n              scope.id !== undefined ? scope.id : makePath(sourceId, pointer);\n\n            while (cur !== null && scopes[cur]) {\n              variables = Object.assign(\n                variables,\n                ...(scopes[cur].variables || [])\n                  .filter(variable => variable.name !== \"\") //exclude anonymous output params\n                  .filter(variable => variables[variable.name] == undefined) //don't add shadowed vars\n                  .map(variable => ({\n                    [variable.name]: { astRef: variable.astRef }\n                  }))\n              );\n              //NOTE: because these assignments are processed in order, that means\n              //that if a base class and derived class have variables with the same\n              //name, the derived version will be processed later and therefore overwrite --\n              //which is exactly what we want, so yay\n\n              if (scopes[cur].definition.nodeType === \"YulFunctionDefinition\") {\n                //Yul functions make the outside invisible\n                break;\n              }\n\n              if (scopes[cur].parentId !== undefined) {\n                cur = scopes[cur].parentId; //may be null!\n                //(undefined means we don't know what's up,\n                //null means there's nothing)\n              } else {\n                //in this case, cur must be a source-and-pointer, so we'll step\n                //up that way (skipping over any arrays)\n                cur = cur.replace(/\\/[^/]*(\\/\\d+)?$/, \"\");\n              }\n            }\n          }\n\n          let builtins = {\n            msg: { builtin: \"msg\" },\n            tx: { builtin: \"tx\" },\n            block: { builtin: \"block\" },\n            this: { builtin: \"this\" },\n            now: { builtin: \"now\" }\n          };\n\n          if (\n            scope &&\n            (scope.nodeType.startsWith(\"Yul\") ||\n              scope.nodeType === \"InlineAssembly\")\n          ) {\n            //builtins aren't visible in Yul\n            return variables;\n          }\n\n          return { ...variables, ...builtins };\n        }\n      ),\n\n      /**\n       * data.current.identifiers.definitions (namespace)\n       */\n      definitions: {\n        /* data.current.identifiers.definitions (selector)\n         * definitions for current variables, by identifier\n         */\n        _: createLeaf(\n          [\"/current/scopes/inlined\", \"../_\", \"./this\"],\n\n          (scopes, identifiers, thisDefinition) => {\n            let variables = Object.assign(\n              {},\n              ...Object.entries(identifiers).map(([identifier, variable]) => {\n                if (variable.astRef !== undefined) {\n                  let { definition } = scopes[variable.astRef];\n                  return { [identifier]: definition };\n                  //there used to be separate code for Yul variables here,\n                  //but now that's handled in definitionToType\n                } else {\n                  return {}; //skip over builtins; we'll handle those separately\n                }\n              })\n            );\n            let builtins = {\n              msg: MSG_DEFINITION,\n              tx: TX_DEFINITION,\n              block: BLOCK_DEFINITION,\n              now: NOW_DEFINITION\n            };\n            //only include this when it has a proper definition\n            if (thisDefinition) {\n              builtins.this = thisDefinition;\n            }\n            return { ...variables, ...builtins };\n          }\n        ),\n\n        /*\n         * data.current.identifiers.definitions.this\n         *\n         * returns a spoofed definition for the this variable\n         */\n        this: createLeaf(\n          [\"/current/contract\"],\n          contractNode =>\n            contractNode && contractNode.nodeType === \"ContractDefinition\"\n              ? spoofThisDefinition(\n                  contractNode.name,\n                  contractNode.id,\n                  contractNode.contractKind\n                )\n              : null\n        )\n      },\n\n      /**\n       * data.current.identifiers.refs\n       *\n       * current variables' value refs\n       */\n      refs: createLeaf(\n        [\n          \"/proc/assignments\",\n          \"./_\",\n          \"/current/compilationId\",\n          \"/current/functionDepth\", //for pruning things too deep on stack\n          \"/current/modifierDepth\", //when it's useful\n          \"/current/inModifier\",\n          \"/current/address\" //for contract variables\n        ],\n\n        (\n          assignments,\n          identifiers,\n          compilationId,\n          currentDepth,\n          modifierDepth,\n          inModifier,\n          address\n        ) =>\n          Object.assign(\n            {},\n            ...Object.entries(identifiers).map(\n              ([identifier, { astRef, builtin }]) => {\n                let id;\n                debug(\"astRef: %o\", astRef);\n                debug(\"builtin: %s\", builtin);\n\n                //is this an ordinary variable or a builtin?\n                if (astRef !== undefined) {\n                  //if not a builtin, first check if it's a contract var\n                  let compilationAssignments =\n                    (assignments.byCompilationId[compilationId] || {})\n                      .byAstRef || {};\n                  id = (compilationAssignments[astRef] || []).find(\n                    idHash => assignments.byId[idHash].address === address\n                  );\n                  debug(\"id after global: %s\", id);\n\n                  //if not contract, it's local, so identify by stackframe\n                  if (id === undefined) {\n                    //if we're in a modifier, include modifierDepth\n                    if (inModifier) {\n                      id = stableKeccak256({\n                        astRef,\n                        compilationId,\n                        stackframe: currentDepth,\n                        modifierDepth\n                      });\n                    } else {\n                      id = stableKeccak256({\n                        astRef,\n                        compilationId,\n                        stackframe: currentDepth\n                      });\n                    }\n                  }\n                  debug(\"id after local: %s\", id);\n                } else {\n                  //otherwise, it's a builtin\n                  //NOTE: for now we assume there is only one assignment per\n                  //builtin, but this will change in the future\n                  debug(\"builtin: %s\", builtin);\n                  id = assignments.byBuiltin[builtin][0];\n                }\n\n                //if we still didn't find it, oh well\n                debug(\"id: %s\", id);\n\n                let { ref } = assignments.byId[id] || {};\n                if (!ref) {\n                  return undefined;\n                }\n\n                return {\n                  [identifier]: ref\n                };\n              }\n            )\n          )\n      )\n    },\n\n    /**\n     * data.current.returnStatus\n     */\n    returnStatus: createLeaf(\n      [evm.current.step.returnStatus],\n      status => (status === null ? undefined : status) //convert null to undefined to be safe\n    ),\n\n    /**\n     * data.current.returnAllocation\n     */\n    returnAllocation: createLeaf(\n      [evm.current.call, \"/current/context\", \"/info/allocations/calldata\"],\n      (\n        { data: calldata },\n        { context, isConstructor },\n        { constructorAllocations, functionAllocations }\n      ) => {\n        if (isConstructor) {\n          //we're in a constructor call\n          let allocation = constructorAllocations[context];\n          if (!allocation) {\n            return null;\n          }\n          return allocation.output;\n        } else {\n          //usual case\n          let selector = calldata.slice(0, 2 + 4 * 2); //extract first 4 bytes of hex string\n          debug(\"selector: %s\", selector);\n          debug(\"bySelector: %o\", functionAllocations[context]);\n          let allocation = (functionAllocations[context] || {})[selector];\n          if (!allocation) {\n            return null;\n          }\n          return allocation.output;\n        }\n      }\n    )\n  },\n\n  /**\n   * data.next\n   */\n  next: {\n    /**\n     * data.next.state\n     * Yes, I'm just repeating the code for data.current.state.stack here;\n     * not worth the trouble to factor out\n     */\n    state: {\n      /**\n       * data.next.state.stack\n       */\n      stack: createLeaf(\n        [evm.next.state.stack],\n\n        words => (words || []).map(word => Codec.Conversion.toBytes(word))\n      ),\n\n      /**\n       * data.next.state.returndata\n       * NOTE: this is only for use by returnValue(); this is *not*\n       * an accurate reflection of the current contents of returndata!\n       * we don't track that at the moment\n       */\n      returndata: createLeaf([evm.current.step.returnValue], data =>\n        Codec.Conversion.toBytes(data)\n      )\n    },\n\n    //HACK WARNING\n    //the following selectors depend on solidity.next\n    //do not use them when the current instruction is a context change!\n\n    /**\n     * data.next.node\n     */\n    node: createLeaf([solidity.next.node], identity),\n\n    /**\n     * data.next.pointer\n     */\n    pointer: createLeaf([solidity.next.pointer], identity),\n\n    /**\n     * data.next.modifierInvocation\n     * Note: yes, I'm just repeating the code from data.current here but with\n     * invalid added\n     */\n    modifierInvocation: createLeaf(\n      [\"./node\", \"/current/scopes/inlined\", evm.current.step.isContextChange],\n      (node, scopes, invalid) => {\n        //don't attempt this at a context change!\n        //(also don't attempt this if we can't find the node for whatever\n        //reason)\n        if (invalid) {\n          return undefined;\n        }\n        const types = [\n          \"ModifierInvocation\",\n          \"InheritanceSpecifier\",\n          \"SourceUnit\"\n        ];\n        //again, SourceUnit included as fallback\n        return findAncestorOfType(node, types, scopes);\n      }\n    ),\n\n    /*\n     * data.next.modifierBeingInvoked\n     */\n    modifierBeingInvoked: createLeaf(\n      [\n        \"./modifierInvocation\",\n        \"/current/scopes/inlined\",\n        evm.current.step.isContextChange\n      ],\n      (invocation, scopes, invalid) => {\n        if (invalid || !invocation || invocation.nodeType === \"SourceUnit\") {\n          return undefined;\n        }\n\n        return modifierForInvocation(invocation, scopes);\n      }\n    )\n    //END HACK WARNING\n  },\n\n  /**\n   * data.nextMapped\n   */\n  nextMapped: {\n    /**\n     * data.nextMapped.state\n     * Yes, I'm just repeating the code for data.current.state.stack here;\n     * not worth the trouble to factor out\n     * HACK: this assumes we're not about to change context! don't use this if we\n     * are!\n     */\n    state: {\n      /**\n       * data.nextMapped.state.stack\n       */\n      stack: createLeaf(\n        [solidity.current.nextMapped],\n\n        step =>\n          ((step || {}).stack || []).map(word => Codec.Conversion.toBytes(word))\n      )\n    }\n  },\n\n  /**\n   * data.nextOfSameDepth\n   */\n  nextOfSameDepth: {\n    /**\n     * data.nextOfSameDepth.state\n     * Yes, I'm just repeating the code for data.current.state.stack here but\n     * with an extra guard... *still* not worth the trouble to factor out\n     * HOWEVER, this one also returns null if there is no nextOfSameDepth\n     */\n    state: {\n      /**\n       * data.nextOfSameDepth.state.stack\n       */\n      stack: createLeaf(\n        [trace.nextOfSameDepth],\n\n        step =>\n          step\n            ? (step.stack || []).map(word => Codec.Conversion.toBytes(word))\n            : null\n      )\n    }\n  }\n});\n\nexport default data;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:stacktrace:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport jsonpointer from \"json-pointer\";\nimport zipWith from \"lodash.zipwith\";\nimport { popNWhere } from \"lib/helpers\";\nimport * as Codec from \"@truffle/codec\";\n\nconst identity = (x) => x;\n\nfunction generateReport(callstack, location, status, message) {\n  //step 1: shift everything over by 1 and recombine :)\n  let locations = callstack.map((frame) => frame.calledFromLocation);\n  //remove initial null, add final location on end\n  locations.shift();\n  locations.push(location);\n  debug(\"locations: %O\", locations);\n  const names = callstack.map(({ functionName, contractName, address }) => ({\n    functionName,\n    contractName,\n    address,\n  }));\n  debug(\"names: %O\", names);\n  let report = zipWith(locations, names, (location, nameInfo) => ({\n    ...nameInfo,\n    location,\n  }));\n  //finally: set the status in the top frame\n  //and the message in the bottom\n  if (status !== null) {\n    report[report.length - 1].status = status;\n  }\n  if (message !== undefined) {\n    report[0].message = message;\n  }\n  return report;\n}\n\nfunction createMultistepSelectors(stepSelector) {\n  return {\n    /**\n     * .location\n     */\n    location: {\n      /**\n       * .source\n       */\n      source: createLeaf([stepSelector.source], identity),\n      /**\n       * .sourceRange\n       */\n      sourceRange: createLeaf([stepSelector.sourceRange], identity),\n      /**\n       * .node\n       */\n      node: createLeaf([stepSelector.node], identity),\n      /**\n       * .pointer\n       */\n      pointer: createLeaf([stepSelector.pointer], identity),\n    },\n\n    /**\n     * .strippedLocation\n     */\n    strippedLocation: createLeaf(\n      [\"./location/source\", \"./location/sourceRange\"],\n      ({ id, compilationId, sourcePath }, sourceRange) => ({\n        source: { id, compilationId, sourcePath },\n        sourceRange,\n      })\n    ),\n\n    /**\n     * .contractNode\n     * WARNING: ad-hoc selector only meant to be used\n     * when you're on a function node!\n     * should probably be replaced by something better;\n     * the data submodule handles these things a better way\n     */\n    contractNode: createLeaf(\n      [\"./location/source\", \"./location/pointer\"],\n      ({ ast }, pointer) =>\n        pointer\n          ? jsonpointer.get(\n              ast,\n              pointer.replace(/\\/nodes\\/\\d+$/, \"\") //cut off end\n            )\n          : ast\n    ),\n  };\n}\n\nlet stacktrace = createSelectorTree({\n  /**\n   * stacktrace.state\n   */\n  state: (state) => state.stacktrace,\n\n  /**\n   * stacktrace.current\n   */\n  current: {\n    /**\n     * stacktrace.current.callstack\n     */\n    callstack: createLeaf([\"/state\"], (state) => state.proc.callstack),\n\n    /**\n     * stacktrace.current.returnCounter\n     */\n    returnCounter: createLeaf([\"/state\"], (state) => state.proc.returnCounter),\n\n    /**\n     * stacktrace.current.lastPosition\n     */\n    lastPosition: createLeaf([\"/state\"], (state) => state.proc.lastPosition),\n\n    /**\n     * stacktrace.current.innerReturnPosition\n     */\n    innerReturnPosition: createLeaf(\n      [\"/state\"],\n      (state) => state.proc.innerReturnPosition\n    ),\n\n    /**\n     * stacktrace.current.innerReturnStatus\n     */\n    innerReturnStatus: createLeaf(\n      [\"/state\"],\n      (state) => state.proc.innerReturnStatus\n    ),\n\n    ...createMultistepSelectors(solidity.current),\n\n    /**\n     * stacktrace.current.willJumpIn\n     */\n    willJumpIn: createLeaf(\n      [solidity.current.willJump, solidity.current.jumpDirection],\n      (willJump, jumpDirection) => willJump && jumpDirection === \"i\"\n    ),\n\n    /**\n     * stacktrace.current.willJumpOut\n     */\n    willJumpOut: createLeaf(\n      [solidity.current.willJump, solidity.current.jumpDirection],\n      (willJump, jumpDirection) => willJump && jumpDirection === \"o\"\n    ),\n\n    /**\n     * stacktrace.current.willCall\n     * note: includes creations!\n     */\n    willCall: createLeaf([solidity.current.willCall], identity),\n\n    /**\n     * stacktrace.current.context\n     */\n    context: createLeaf([evm.current.context], identity),\n\n    /**\n     * stacktrace.current.callContext\n     */\n    callContext: createLeaf([evm.current.step.callContext], identity),\n\n    /**\n     * stacktrace.current.willReturn\n     */\n    willReturn: createLeaf([solidity.current.willReturn], identity),\n\n    /**\n     * stacktrace.current.returnStatus\n     */\n    returnStatus: createLeaf([evm.current.step.returnStatus], identity),\n\n    /**\n     * stacktrace.current.address\n     * Initial call can't be a delegate, so we just use the storage address\n     * (thus allowing us to handle both calls & creates in one)\n     */\n    address: createLeaf([evm.current.call], (call) => call.storageAddress),\n\n    /**\n     * stacktrace.current.callAddress\n     *\n     * Covers both calls and creates\n     * NOTE: for this selector, we treat delegates just like any other call!\n     * we want to report the *code* address here, not the storage address\n     * (exception: for creates we report the storage address, as that's where\n     * the code *will* live)\n     */\n    callAddress: createLeaf(\n      [\n        evm.current.step.isCall,\n        evm.current.step.isCreate,\n        evm.current.step.callAddress,\n        evm.current.step.createdAddress,\n      ],\n      (isCall, isCreate, callAddress, createdAddress) => {\n        if (isCall) {\n          return callAddress;\n        } else if (isCreate) {\n          if (createdAddress !== Codec.Evm.Utils.ZERO_ADDRESS) {\n            return createdAddress;\n          } else {\n            return undefined; //if created address appears to be 0, omit it\n          }\n        } else {\n          return null; //I guess??\n        }\n      }\n    ),\n\n    /**\n     * stacktrace.current.revertString\n     * Crudely decodes the current revert string.\n     * Not meant to account for crazy things, just there to produce\n     * a simple string.\n     */\n    revertString: createLeaf(\n      [evm.current.step.returnValue],\n      (rawRevertMessage) => {\n        let revertDecodings = Codec.decodeRevert(\n          Codec.Conversion.toBytes(rawRevertMessage)\n        );\n        if (\n          revertDecodings.length === 1 &&\n          revertDecodings[0].kind === \"revert\"\n        ) {\n          let revertStringInfo = revertDecodings[0].arguments[0].value.value;\n          switch (revertStringInfo.kind) {\n            case \"valid\":\n              return revertStringInfo.asString;\n            case \"malformed\":\n              //turn into a JS string while smoothing over invalid UTF-8\n              //slice 2 to remove 0x prefix\n              return Buffer.from(\n                revertStringInfo.asHex.slice(2),\n                \"hex\"\n              ).toString();\n          }\n        } else {\n          return undefined;\n        }\n      }\n    ),\n\n    /**\n     * stacktrace.current.positionWillChange\n     */\n    positionWillChange: createLeaf(\n      [\"/next/location\", \"/current/location\", \"./lastPosition\"],\n      (nextLocation, currentLocation, lastLocation) => {\n        let oldLocation =\n          currentLocation.source.id !== undefined\n            ? currentLocation\n            : lastLocation;\n        return (\n          Boolean(oldLocation) && //if there's no current or last position, we don't need this check\n          Boolean(nextLocation.source) &&\n          nextLocation.source.id !== undefined && //if next location is unmapped, we consider ourselves to have not moved\n          (nextLocation.source.compilationId !==\n            oldLocation.source.compilationId ||\n            nextLocation.source.id !== oldLocation.source.id ||\n            nextLocation.sourceRange.start !== oldLocation.sourceRange.start ||\n            nextLocation.sourceRange.length !== oldLocation.sourceRange.length)\n        );\n      }\n    ),\n\n    /**\n     * stacktrace.current.finalReport\n     * Contains the report object for outside consumption.\n     * Still needs to be processed into a string, mind you.\n     */\n    finalReport: createLeaf(\n      [\n        \"./callstack\",\n        \"./innerReturnPosition\",\n        \"./innerReturnStatus\",\n        \"./revertString\",\n      ],\n      generateReport\n    ),\n\n    /**\n     * stacktrace.current.report\n     * Similar to stacktrace.current.report, but meant for use as at\n     * an intermediate point instead of at the end (it reflects how things\n     * actually currently are rather than taking into account exited\n     * stackframes that caused the revert)\n     */\n    report: createLeaf(\n      [\n        \"./callstack\",\n        \"./returnCounter\",\n        \"./lastPosition\",\n        \"/current/strippedLocation\",\n      ],\n      (callstack, returnCounter, lastPosition, currentLocation) =>\n        generateReport(\n          popNWhere(\n            callstack,\n            returnCounter,\n            (frame) => frame.type === \"external\"\n          ),\n          currentLocation || lastPosition,\n          null,\n          undefined\n        )\n    ),\n  },\n\n  /**\n   * stacktrace.next\n   */\n  next: {\n    ...createMultistepSelectors(solidity.next),\n  },\n});\n\nexport default stacktrace;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport trace from \"lib/trace/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nconst session = createSelectorTree({\n  /*\n   * session.state\n   */\n  state: state => state.session,\n\n  /**\n   * session.info\n   */\n  info: {\n    /**\n     * session.info.affectedInstances\n     */\n    affectedInstances: createLeaf(\n      [evm.current.codex.instances, evm.info.contexts, solidity.info.sources],\n\n      (instances, contexts, sources) =>\n        Object.assign(\n          {},\n          ...Object.entries(instances).map(\n            ([address, { context: contextId, binary }]) => {\n              debug(\"instances %O\", instances);\n              debug(\"contexts %O\", contexts);\n              let context = contexts[contextId];\n              if (!context) {\n                return { [address]: { binary } };\n              }\n              let { contractName, compilationId, primarySource } = context;\n\n              debug(\"primarySource: %o\", primarySource);\n              debug(\"compilationId: %s\", compilationId);\n              debug(\"sources: %o\", sources);\n\n              let source =\n                primarySource !== undefined\n                  ? sources[compilationId].byId[primarySource]\n                  : undefined;\n\n              return {\n                [address]: {\n                  contractName,\n                  source,\n                  binary\n                }\n              };\n            }\n          )\n        )\n    )\n  },\n\n  /**\n   * session.transaction (namespace)\n   */\n  transaction: {\n    /**\n     * session.transaction (selector)\n     * contains the web3 transaction object\n     */\n    _: createLeaf([\"/state\"], state => state.transaction),\n\n    /**\n     * session.transaction.receipt\n     * contains the web3 receipt object\n     */\n    receipt: createLeaf([\"/state\"], state => state.receipt),\n\n    /**\n     * session.transaction.block\n     * contains the web3 block object\n     */\n    block: createLeaf([\"/state\"], state => state.block)\n  },\n\n  /*\n   * session.status (namespace)\n   */\n  status: {\n    /*\n     * session.status.readyOrError\n     */\n    readyOrError: createLeaf([\"/state\"], state => state.ready),\n\n    /*\n     * session.status.ready\n     */\n    ready: createLeaf(\n      [\"./readyOrError\", \"./isError\"],\n      (readyOrError, error) => readyOrError && !error\n    ),\n\n    /*\n     * session.status.waiting\n     */\n    waiting: createLeaf([\"/state\"], state => !state.ready),\n\n    /*\n     * session.status.error\n     */\n    error: createLeaf([\"/state\"], state => state.lastLoadingError),\n\n    /*\n     * session.status.isError\n     */\n    isError: createLeaf([\"./error\"], error => error !== null),\n\n    /*\n     * session.status.success\n     */\n    success: createLeaf([\"./error\"], error => error === null),\n\n    /*\n     * session.status.errored\n     */\n    errored: createLeaf(\n      [\"./readyOrError\", \"./isError\"],\n      (readyOrError, error) => readyOrError && error\n    ),\n\n    /*\n     * session.status.loaded\n     */\n    loaded: createLeaf([trace.loaded], loaded => loaded),\n\n    /**\n     * session.status.lightMode\n     */\n    lightMode: createLeaf([\"/state\"], state => state.lightMode)\n  }\n});\n\nexport default session;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport { prefixName, keccak256 } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport evm from \"../selectors\";\n\nimport * as trace from \"lib/trace/sagas\";\n\n/**\n * Adds EVM bytecode context\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function* addContext(context) {\n  //get context hash if context doesn't already have it\n  const contextHash =\n    context.context || keccak256({ type: \"string\", value: context.binary });\n  //NOTE: we take hash as *string*, not as bytes, because the binary may\n  //contain link references!\n\n  debug(\"context %O\", context);\n  yield put(actions.addContext({ ...context, context: contextHash }));\n\n  return contextHash;\n}\n\n/**\n * Adds known deployed instance of binary at address\n *\n * @param {string} binary - may be undefined (e.g. precompiles)\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function* addInstance(address, binary) {\n  const search = yield select(evm.info.binaries.search);\n  const context = search(binary);\n\n  //now, whether we needed a new context or not, add the instance\n  yield put(actions.addInstance(address, context, binary));\n\n  return context;\n}\n\n//goes through all instances and re-adds them with their new\n//context (used if new contexts have been added -- something\n//that currently only happens when adding external compilations)\nexport function* refreshInstances() {\n  const instances = yield select(evm.current.codex.instances);\n  for (let [address, { binary }] of Object.entries(instances)) {\n    const search = yield select(evm.info.binaries.search);\n    const context = search(binary);\n    yield put(actions.addInstance(address, context, binary));\n  }\n}\n\nexport function* begin({\n  address,\n  binary,\n  data,\n  storageAddress,\n  status,\n  sender,\n  value,\n  gasprice,\n  block\n}) {\n  yield put(actions.saveGlobals(sender, gasprice, block));\n  yield put(actions.saveStatus(status));\n  debug(\"codex: %O\", yield select(evm.current.codex));\n  if (address) {\n    yield put(actions.call(address, data, storageAddress, sender, value));\n  } else {\n    yield put(actions.create(binary, storageAddress, sender, value));\n  }\n}\n\nfunction* tickSaga() {\n  debug(\"got TICK\");\n\n  yield* callstackAndCodexSaga();\n  yield* trace.signalTickSagaCompletion();\n}\n\n//NOTE: We don't account here for multiple simultaneous returns.\n//Such a case is *vanishingly* unlikely to come up in real code\n//so it's simply not worth the trouble.  Such a case will screw\n//up the debugger pretty good as a result.\n//(...but I might go back and do it later. :P )\n\nexport function* callstackAndCodexSaga() {\n  if (yield select(evm.current.step.isExceptionalHalting)) {\n    //let's handle this case first so we can be sure everything else is *not*\n    //an exceptional halt\n    debug(\"exceptional halt!\");\n\n    yield put(actions.fail());\n  } else if (yield select(evm.current.step.isInstantCallOrCreate)) {\n    // if there is no binary (e.g. for precompiles or externally owned\n    // accounts), or if the call fails instantly (callstack overflow or not\n    // enough ether), there will be no trace steps for the called code, and so\n    // we shouldn't tell the debugger that we're entering another execution\n    // context\n    // (so we do nothing)\n  } else if (yield select(evm.current.step.isCall)) {\n    debug(\"got call\");\n\n    let address = yield select(evm.current.step.callAddress);\n    let data = yield select(evm.current.step.callData);\n\n    debug(\"calling address %s\", address);\n\n    if (yield select(evm.current.step.isDelegateCallStrict)) {\n      //if delegating, leave storageAddress, sender, and value the same\n      let { storageAddress, sender, value } = yield select(evm.current.call);\n      yield put(actions.call(address, data, storageAddress, sender, value));\n    } else {\n      //this branch covers CALL, CALLCODE, and STATICCALL\n      let currentCall = yield select(evm.current.call);\n      let storageAddress = (yield select(evm.current.step.isDelegateCallBroad))\n        ? currentCall.storageAddress //for CALLCODE\n        : address;\n      let sender = currentCall.storageAddress; //not the code address!\n      let value = yield select(evm.current.step.callValue); //0 if static\n      yield put(actions.call(address, data, storageAddress, sender, value));\n    }\n  } else if (yield select(evm.current.step.isCreate)) {\n    debug(\"got create\");\n    let binary = yield select(evm.current.step.createBinary);\n    let createdAddress = yield select(evm.current.step.createdAddress);\n    let value = yield select(evm.current.step.createValue);\n    let sender = (yield select(evm.current.call)).storageAddress;\n    //not the code address!\n\n    yield put(actions.create(binary, createdAddress, sender, value));\n    //as above, storageAddress handles when calling from a creation call\n  } else if (yield select(evm.current.step.isNormalHalting)) {\n    debug(\"got return\");\n\n    let { binary, storageAddress } = yield select(evm.current.call);\n\n    if (binary) {\n      //if we're returning from a successful creation call, let's log the\n      //result\n      let returnedBinary = yield select(evm.current.step.returnValue);\n      let search = yield select(evm.info.binaries.search);\n      let returnedContext = search(returnedBinary);\n      yield put(\n        actions.returnCreate(storageAddress, returnedBinary, returnedContext)\n      );\n    } else {\n      yield put(actions.returnCall());\n    }\n  } else if (yield select(evm.current.step.isStore)) {\n    let storageAddress = (yield select(evm.current.call)).storageAddress;\n    let slot = yield select(evm.current.step.storageAffected);\n    let storedValue = yield select(evm.current.step.valueStored);\n    yield put(actions.store(storageAddress, slot, storedValue));\n  } else if (yield select(evm.current.step.isLoad)) {\n    let storageAddress = (yield select(evm.current.call)).storageAddress;\n    let slot = yield select(evm.current.step.storageAffected);\n    let loadedValue = yield select(evm.current.step.valueLoaded);\n    yield put(actions.load(storageAddress, slot, loadedValue));\n  }\n}\n\nexport function* reset() {\n  let initialCall = yield select(evm.transaction.initialCall);\n  yield put(actions.reset());\n  yield put(initialCall);\n}\n\nexport function* unload() {\n  yield put(actions.unloadTransaction());\n}\n\nexport function* saga() {\n  yield takeEvery(TICK, tickSaga);\n}\n\nexport default prefixName(\"evm\", saga);\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:selectors\"); //eslint-disable-line no-unused-vars\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport { isSkippedNodeType } from \"lib/helpers\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport trace from \"lib/trace/selectors\";\n\n/**\n * @private\n */\nconst identity = x => x;\n\nfunction anyNonSkippedInRange(\n  findOverlappingRange,\n  node,\n  sourceStart,\n  sourceLength\n) {\n  let sourceEnd = sourceStart + sourceLength;\n  return findOverlappingRange(sourceStart, sourceLength).some(\n    ({ range, node }) =>\n      isOldStyleAssembly(node) ||\n      (sourceStart <= range[0] && //we want to go by starting line\n        range[0] < sourceEnd &&\n        !isSkippedNodeType(node))\n    //NOTE: this doesn't actually catch everything skipped!  But doing better\n    //is hard\n  );\n}\n\n//catches InlineAssembly nodes from before 0.6.0.\n//We want to be able to place breakpoints if something merely *overlaps*\n//one of these, because, well, we can't really look inside and do better.\nfunction isOldStyleAssembly(node) {\n  return node.nodeType === \"InlineAssembly\" && !node.AST;\n}\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n  /**\n   * controller.state\n   */\n  state: state => state.controller,\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity),\n\n    /**\n     * controller.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], identity),\n\n    /**\n     * controller.current.location\n     */\n    location: {\n      /**\n       * controller.current.location.sourceRange\n       */\n      sourceRange: createLeaf(\n        [solidity.current.sourceRange, \"/current/trace/loaded\"],\n        (range, loaded) => (loaded ? range : null)\n      ),\n\n      /**\n       * controller.current.location.source\n       */\n      source: createLeaf(\n        [solidity.current.source, \"/current/trace/loaded\"],\n        (source, loaded) => (loaded ? source : null)\n      ),\n\n      /**\n       * controller.current.location.node\n       */\n      node: createLeaf(\n        [solidity.current.node, \"/current/trace/loaded\"],\n        (node, loaded) => (loaded ? node : null)\n      ),\n\n      /**\n       * controller.current.location.isMultiline\n       */\n      isMultiline: createLeaf(\n        [solidity.current.isMultiline, \"/current/trace/loaded\"],\n        (raw, loaded) => (loaded ? raw : false)\n      )\n    },\n\n    /*\n     * controller.current.trace\n     */\n    trace: {\n      /**\n       * controller.current.trace.finished\n       */\n      finished: createLeaf([trace.finished], identity),\n\n      /**\n       * controller.current.trace.loaded\n       */\n      loaded: createLeaf([trace.loaded], identity)\n    }\n  },\n\n  /**\n   * controller.breakpoints (namespace)\n   */\n  breakpoints: {\n    /**\n     * controller.breakpoints (selector)\n     */\n    _: createLeaf([\"/state\"], state => state.breakpoints),\n\n    /**\n     * controller.breakpoints.resolver (selector)\n     * this selector returns a function that adjusts a given line-based\n     * breakpoint (on node-based breakpoints it simply returns the input) by\n     * repeatedly moving it down a line until it lands on a line where there's\n     * actually somewhere to break.  if no such line exists beyond that point, it\n     * returns null instead.\n     */\n    resolver: createLeaf(\n      [solidity.info.sources, solidity.views.findOverlappingRange],\n      (sources, functions) => breakpoint => {\n        let adjustedBreakpoint;\n        if (breakpoint.node === undefined) {\n          let line = breakpoint.line;\n          debug(\"breakpoint: %O\", breakpoint);\n          debug(\"sources: %o\", sources);\n          let { source, ast } = sources[breakpoint.compilationId].byId[\n            breakpoint.sourceId\n          ];\n          let findOverlappingRange =\n            functions[breakpoint.compilationId][breakpoint.sourceId];\n          let lineLengths = source.split(\"\\n\").map(line => line.length);\n          //why does neither JS nor lodash have a scan function like Haskell??\n          //guess we'll have to do our scan manually\n          let lineStarts = [0];\n          for (let length of lineLengths) {\n            lineStarts.push(lineStarts[lineStarts.length - 1] + length + 1);\n            //+1 for the /n itself\n          }\n          debug(\n            \"line: %s\",\n            source.slice(lineStarts[line], lineStarts[line] + lineLengths[line])\n          );\n          while (\n            line < lineLengths.length &&\n            !anyNonSkippedInRange(\n              findOverlappingRange,\n              ast,\n              lineStarts[line],\n              lineLengths[line]\n            )\n          ) {\n            debug(\"incrementing\");\n            line++;\n          }\n          if (line >= lineLengths.length) {\n            adjustedBreakpoint = null;\n          } else {\n            adjustedBreakpoint = { ...breakpoint, line };\n          }\n        } else {\n          debug(\"node-based breakpoint\");\n          adjustedBreakpoint = breakpoint;\n        }\n        return adjustedBreakpoint;\n      }\n    )\n  },\n\n  /**\n   * controller.finished\n   * deprecated alias for controller.current.trace.finished\n   */\n  finished: createLeaf([\"/current/trace/finished\"], finished => finished),\n\n  /**\n   * controller.isStepping\n   */\n  isStepping: createLeaf([\"./state\"], state => state.isStepping)\n});\n\nexport default controller;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport solidity from \"lib/solidity/selectors\";\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.sources\n     */\n    sources: createLeaf([solidity.info.sources], sources => sources)\n  }\n});\n\nexport default ast;\n","module.exports = require(\"lodash.flatten\");","module.exports = require(\"semver\");","export const SCOPE = \"DATA_SCOPE\";\nexport function scope(id, pointer, parentId, sourceId, compilationId) {\n  return {\n    type: SCOPE,\n    id,\n    pointer,\n    parentId,\n    sourceId,\n    compilationId\n  };\n}\n\nexport const DECLARE = \"DATA_DECLARE_VARIABLE\";\nexport function declare(name, astRef, scopeAstRef, compilationId) {\n  return {\n    type: DECLARE,\n    name,\n    astRef,\n    scopeAstRef,\n    compilationId\n  };\n}\n\nexport const ASSIGN = \"DATA_ASSIGN\";\nexport function assign(assignments) {\n  return {\n    type: ASSIGN,\n    assignments\n  };\n}\n\nexport const MAP_PATH_AND_ASSIGN = \"DATA_MAP_PATH_AND_ASSIGN\";\nexport function mapPathAndAssign(\n  address,\n  slot,\n  assignments,\n  typeIdentifier,\n  parentType\n) {\n  return {\n    type: MAP_PATH_AND_ASSIGN,\n    address,\n    slot,\n    assignments,\n    typeIdentifier,\n    parentType\n  };\n}\n\nexport const RESET = \"DATA_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n\nexport const DEFINE_TYPE = \"DATA_DEFINE_TYPE\";\nexport function defineType(node, compilationId) {\n  return {\n    type: DEFINE_TYPE,\n    node,\n    compilationId\n  };\n}\n\nexport const ALLOCATE = \"DATA_ALLOCATE\";\nexport function allocate(storage, memory, abi, calldata, state) {\n  return {\n    type: ALLOCATE,\n    storage,\n    memory,\n    abi,\n    calldata,\n    state\n  };\n}\n","module.exports = require(\"babel-runtime/core-js/set\");","export const ADD_CONTEXT = \"EVM_ADD_CONTEXT\";\nexport function addContext({\n  context,\n  contractName,\n  binary,\n  sourceMap,\n  primarySource,\n  immutableReferences,\n  compiler,\n  compilationId,\n  abi,\n  contractId,\n  contractKind,\n  isConstructor,\n  externalSolidity\n}) {\n  return {\n    type: ADD_CONTEXT,\n    context,\n    contractName,\n    binary,\n    sourceMap,\n    primarySource,\n    immutableReferences,\n    compiler,\n    compilationId,\n    abi,\n    contractId,\n    contractKind,\n    isConstructor,\n    externalSolidity\n  };\n}\n\nexport const ADD_INSTANCE = \"EVM_ADD_INSTANCE\";\nexport function addInstance(address, context, binary) {\n  return {\n    type: ADD_INSTANCE,\n    address,\n    context,\n    binary\n  };\n}\n\nexport const REFRESH_INSTANCE = \"EVM_REFRESH_INSTANCE\";\nexport function refreshInstances(address, context) {\n  return {\n    type: REFRESH_INSTANCE,\n    address,\n    context\n  };\n}\n\nexport const SAVE_GLOBALS = \"EVM_SAVE_GLOBALS\";\nexport function saveGlobals(origin, gasprice, block) {\n  return {\n    type: SAVE_GLOBALS,\n    origin,\n    gasprice,\n    block\n  };\n}\n\nexport const SAVE_STATUS = \"EVM_SAVE_STATUS\";\nexport function saveStatus(status) {\n  return {\n    type: SAVE_STATUS,\n    status\n  };\n}\n\nexport const CALL = \"EVM_CALL\";\nexport function call(address, data, storageAddress, sender, value) {\n  return {\n    type: CALL,\n    address,\n    data,\n    storageAddress,\n    sender,\n    value\n  };\n}\n\nexport const CREATE = \"EVM_CREATE\";\nexport function create(binary, storageAddress, sender, value) {\n  return {\n    type: CREATE,\n    binary,\n    storageAddress,\n    sender,\n    value\n  };\n}\n\nexport const RETURN_CALL = \"EVM_RETURN_CALL\";\nexport function returnCall() {\n  return {\n    type: RETURN_CALL\n  };\n}\n\nexport const RETURN_CREATE = \"EVM_RETURN_CREATE\";\nexport function returnCreate(address, code, context) {\n  return {\n    type: RETURN_CREATE,\n    address,\n    code,\n    context\n  };\n}\n\nexport const FAIL = \"EVM_FAIL\";\nexport function fail() {\n  return {\n    type: FAIL\n  };\n}\n\nexport const STORE = \"EVM_STORE\";\nexport function store(address, slot, value) {\n  return {\n    type: STORE,\n    address,\n    slot,\n    value\n  };\n}\n\nexport const LOAD = \"EVM_LOAD\";\nexport function load(address, slot, value) {\n  return {\n    type: LOAD,\n    address,\n    slot,\n    value\n  };\n}\n\nexport const RESET = \"EVM_RESET\";\nexport function reset(storageAddress) {\n  return {\n    type: RESET,\n    storageAddress\n  };\n}\n\nexport const UNLOAD_TRANSACTION = \"EVM_UNLOAD_TRANSACTION\";\nexport function unloadTransaction() {\n  return {\n    type: UNLOAD_TRANSACTION\n  };\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:sagas\");\n\nimport {\n  all,\n  takeEvery,\n  apply,\n  fork,\n  join,\n  take,\n  put\n} from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport * as session from \"lib/session/actions\";\n\nimport BN from \"bn.js\";\nimport Web3 from \"web3\"; //just for utils!\nimport * as Codec from \"@truffle/codec\";\n\nimport Web3Adapter from \"../adapter\";\n\n//the following two functions are for Besu compatibility\nfunction padStackAndMemory(steps) {\n  return steps.map(step => ({\n    ...step,\n    stack: step.stack.map(padHexString),\n    memory: step.memory.map(padHexString)\n  }));\n}\n\n//turns Besu-style (begins with 0x, may be shorter than 64 hexdigits)\n//to Geth/Ganache-style (no 0x, always 64 hexdigits)\n//(I say 64 hexdigits rather than 32 bytes because Besu-style will use\n//non-whole numbers of bytes!)\nfunction padHexString(hexString) {\n  return hexString.startsWith(\"0x\") //Besu-style or Geth/Ganache-style?\n    ? hexString.slice(2).padStart(2 * Codec.Evm.Utils.WORD_SIZE, \"0\") //convert Besu to Geth/Ganache\n    : hexString; //leave Geth/Ganache style alone\n}\n\nfunction* fetchTransactionInfo(adapter, { txHash }) {\n  debug(\"inspecting transaction\");\n  var trace;\n  try {\n    trace = yield apply(adapter, adapter.getTrace, [txHash]);\n  } catch (e) {\n    debug(\"putting error\");\n    yield put(actions.error(e));\n    return;\n  }\n\n  debug(\"got trace\");\n  trace = padStackAndMemory(trace); //for Besu compatibility\n  yield put(actions.receiveTrace(trace));\n\n  let tx = yield apply(adapter, adapter.getTransaction, [txHash]);\n  debug(\"tx %O\", tx);\n  let receipt = yield apply(adapter, adapter.getReceipt, [txHash]);\n  debug(\"receipt %O\", receipt);\n  let block = yield apply(adapter, adapter.getBlock, [tx.blockNumber]);\n  debug(\"block %O\", block);\n\n  yield put(session.saveTransaction(tx));\n  yield put(session.saveReceipt(receipt));\n  yield put(session.saveBlock(block));\n\n  //these ones get grouped together for convenience\n  let solidityBlock = {\n    coinbase: block.miner,\n    difficulty: new BN(block.difficulty),\n    gaslimit: new BN(block.gasLimit),\n    number: new BN(block.number),\n    timestamp: new BN(block.timestamp)\n  };\n\n  if (tx.to != null) {\n    yield put(\n      actions.receiveCall({\n        address: tx.to,\n        data: tx.input,\n        storageAddress: tx.to,\n        status: receipt.status,\n        sender: tx.from,\n        value: new BN(tx.value),\n        gasprice: new BN(tx.gasPrice),\n        block: solidityBlock\n      })\n    );\n  } else {\n    let storageAddress = Web3.utils.isAddress(receipt.contractAddress)\n      ? receipt.contractAddress\n      : Codec.Evm.Utils.ZERO_ADDRESS;\n    yield put(\n      actions.receiveCall({\n        binary: tx.input,\n        storageAddress,\n        status: receipt.status,\n        sender: tx.from,\n        value: new BN(tx.value),\n        gasprice: new BN(tx.gasPrice),\n        block: solidityBlock\n      })\n    );\n  }\n}\n\nfunction* fetchBinary(adapter, { address, block }) {\n  debug(\"fetching binary for %s\", address);\n  let binary = yield apply(adapter, adapter.getDeployedCode, [address, block]);\n\n  debug(\"received binary for %s\", address);\n  yield put(actions.receiveBinary(address, binary));\n}\n\nexport function* inspectTransaction(txHash) {\n  yield put(actions.inspect(txHash));\n\n  let action = yield take([actions.RECEIVE_TRACE, actions.ERROR_WEB3]);\n  debug(\"action %o\", action);\n\n  var trace;\n  if (action.type == actions.RECEIVE_TRACE) {\n    trace = action.trace;\n    debug(\"received trace\");\n  } else {\n    return { error: action.error };\n  }\n\n  let {\n    address,\n    binary,\n    data,\n    storageAddress,\n    status,\n    sender,\n    value,\n    gasprice,\n    block\n  } = yield take(actions.RECEIVE_CALL);\n  debug(\"received call\");\n\n  return {\n    trace,\n    address,\n    binary,\n    data,\n    storageAddress,\n    status,\n    sender,\n    value,\n    gasprice,\n    block\n  };\n}\n\n//NOTE: the block argument is optional\nexport function* obtainBinaries(addresses, block) {\n  let tasks = yield all(addresses.map(address => fork(receiveBinary, address)));\n\n  debug(\"requesting binaries\");\n  yield all(addresses.map(address => put(actions.fetchBinary(address, block))));\n\n  let binaries = [];\n  binaries = yield join(tasks);\n\n  debug(\"binaries %o\", binaries);\n\n  return binaries;\n}\n\nfunction* receiveBinary(address) {\n  let { binary } = yield take(\n    action => action.type == actions.RECEIVE_BINARY && action.address == address\n  );\n  debug(\"got binary for %s\", address);\n\n  return binary;\n}\n\nexport function* init(provider) {\n  yield put(actions.init(provider));\n}\n\nexport function* saga() {\n  // wait for web3 init signal\n  let { provider } = yield take(actions.INIT_WEB3);\n  let adapter = new Web3Adapter(provider);\n\n  yield takeEvery(actions.INSPECT, fetchTransactionInfo, adapter);\n  yield takeEvery(actions.FETCH_BINARY, fetchBinary, adapter);\n}\n\nexport default prefixName(\"web3\", saga);\n","module.exports = require(\"web3\");","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { put, call, race, take, select } from \"redux-saga/effects\";\n\nimport { prefixName, isDeliberatelySkippedNodeType } from \"lib/helpers\";\n\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as stacktrace from \"lib/stacktrace/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport controller from \"../selectors\";\n\nconst STEP_SAGAS = {\n  [actions.ADVANCE]: advance,\n  [actions.STEP_NEXT]: stepNext,\n  [actions.STEP_OVER]: stepOver,\n  [actions.STEP_INTO]: stepInto,\n  [actions.STEP_OUT]: stepOut,\n  [actions.CONTINUE]: continueUntilBreakpoint\n};\n\nexport function* saga() {\n  while (true) {\n    debug(\"waiting for control action\");\n    let action = yield take(Object.keys(STEP_SAGAS));\n    if (!(yield select(controller.current.trace.loaded))) {\n      continue; //while no trace is loaded, step actions are ignored\n    }\n    debug(\"got control action\");\n    let saga = STEP_SAGAS[action.type];\n\n    yield put(actions.startStepping());\n    yield race({\n      exec: call(saga, action), //not all will use this\n      interrupt: take(actions.INTERRUPT)\n    });\n    yield put(actions.doneStepping());\n  }\n}\n\nexport default prefixName(\"controller\", saga);\n\n/*\n * Advance the state by the given number of instructions (but not past the end)\n * (if no count given, advance 1)\n */\nfunction* advance(action) {\n  let count =\n    action !== undefined && action.count !== undefined ? action.count : 1;\n  //default is, as mentioned, to advance 1\n  for (\n    let i = 0;\n    i < count && !(yield select(controller.current.trace.finished));\n    i++\n  ) {\n    yield* trace.advance();\n  }\n}\n\n/**\n * stepNext - step to the next logical code segment\n *\n * Note: It might take multiple instructions to express the same section of code.\n * \"Stepping\", then, is stepping to the next logical item, not stepping to the next\n * instruction. See advance() if you'd like to advance by one instruction.\n */\nfunction* stepNext() {\n  const starting = yield select(controller.current.location);\n\n  var upcoming, finished;\n\n  do {\n    // advance at least once step\n    yield* advance();\n\n    // and check the next source range\n    upcoming = yield select(controller.current.location);\n\n    finished = yield select(controller.current.trace.finished);\n\n    // if the next step's source range is still the same, keep going\n  } while (\n    !finished &&\n    (!upcoming ||\n      !upcoming.node ||\n      isDeliberatelySkippedNodeType(upcoming.node) ||\n      (upcoming.sourceRange.start === starting.sourceRange.start &&\n        upcoming.sourceRange.length === starting.sourceRange.length &&\n        upcoming.source.id === starting.source.id &&\n        upcoming.source.compilationId === starting.source.compilationId))\n  );\n}\n\n/**\n * stepInto - step into the current function\n *\n * Conceptually this is easy, but from a programming standpoint it's hard.\n * Code like `getBalance(msg.sender)` might be highlighted, but there could\n * be a number of different intermediate steps (like evaluating `msg.sender`)\n * before `getBalance` is stepped into. This function will step into the first\n * function available (where instruction.jump == \"i\"), ignoring any intermediate\n * steps that fall within the same code range. If there's a step encountered\n * that exists outside of the range, then stepInto will only execute until that\n * step.\n */\nfunction* stepInto() {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingLocation = yield select(controller.current.location);\n  debug(\"startingDepth: %d\", startingDepth);\n  debug(\"starting source range: %O\", (startingLocation || {}).sourceRange);\n  let currentDepth;\n  let currentLocation;\n  let finished;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentLocation = yield select(controller.current.location);\n    finished = yield select(controller.current.trace.finished);\n    debug(\"currentDepth: %d\", currentDepth);\n    debug(\"current source range: %O\", (currentLocation || {}).sourceRange);\n    debug(\"finished: %o\", finished);\n  } while (\n    //we aren't finished,\n    !finished &&\n    // the function stack has not increased,\n    currentDepth <= startingDepth &&\n    // we haven't changed files,\n    currentLocation.source.compilationId ===\n      startingLocation.source.compilationId &&\n    currentLocation.source.id === startingLocation.source.id &&\n    //and we haven't changed lines\n    currentLocation.sourceRange.lines.start.line ===\n      startingLocation.sourceRange.lines.start.line\n  );\n}\n\n/**\n * Step out of the current function\n *\n * This will run until the debugger encounters a decrease in function depth\n * (or finishes)\n */\nfunction* stepOut() {\n  if (yield select(controller.current.location.isMultiline)) {\n    yield* stepOver();\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  var currentDepth;\n  var finished;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    finished = yield select(controller.current.trace.finished);\n  } while (!finished && currentDepth >= startingDepth);\n}\n\n/**\n * stepOver - step over the current line\n *\n * Step over the current line. This will step to the next instruction that\n * exists on a different line of code within the same function depth.\n */\nfunction* stepOver() {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingLocation = yield select(controller.current.location);\n  var currentDepth;\n  var currentLocation;\n  var finished;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentLocation = yield select(controller.current.location);\n    finished = yield select(controller.current.trace.finished);\n  } while (\n    // keep stepping provided:\n    //\n    // we haven't finished\n    !finished &&\n    // we haven't jumped out\n    currentDepth >= startingDepth &&\n    // either: function depth is greater than starting (ignore function calls)\n    // or, if we're at the same depth, keep stepping until we're on a new\n    // line (which may be in a new file)\n    (currentDepth > startingDepth ||\n      (currentLocation.source.id === startingLocation.source.id &&\n        currentLocation.source.compilationId ===\n          startingLocation.source.compilationId &&\n        currentLocation.sourceRange.lines.start.line ===\n          startingLocation.sourceRange.lines.start.line))\n  );\n}\n\n/**\n * continueUntilBreakpoint - step through execution until a breakpoint\n */\nfunction* continueUntilBreakpoint(action) {\n  //if breakpoints was not specified, use the stored list from the state.\n  //if it was, override that with the specified list.\n  //note that explicitly specifying an empty list will advance to the end.\n  let breakpoints =\n    action !== undefined && action.breakpoints !== undefined\n      ? action.breakpoints\n      : yield select(controller.breakpoints);\n\n  let breakpointHit = false;\n\n  let currentLocation = yield select(controller.current.location);\n  let currentLine = currentLocation.sourceRange.lines.start.line;\n  let currentSourceId = currentLocation.source.id;\n  let currentCompilationId = currentLocation.source.compilationId;\n\n  do {\n    yield* stepNext();\n\n    //note these two have not been updated yet; they'll be updated a\n    //few lines down.  but at this point these are still the previous\n    //values.\n    let previousLine = currentLine;\n    let previousSourceId = currentSourceId;\n\n    currentLocation = yield select(controller.current.location);\n    debug(\"currentLocation: %O\", currentLocation);\n    let finished = yield select(controller.current.trace.finished);\n    if (finished) {\n      break; //can break immediately if finished\n    }\n\n    currentSourceId = currentLocation.source.id;\n    if (currentSourceId === undefined) {\n      continue; //never stop on an unmapped instruction\n    }\n    currentCompilationId = currentLocation.source.compilationId;\n    let currentNode = currentLocation.node.id;\n    currentLine = currentLocation.sourceRange.lines.start.line;\n\n    breakpointHit =\n      breakpoints.filter(({ sourceId, compilationId, line, node }) => {\n        if (node !== undefined) {\n          return (\n            compilationId === currentCompilationId &&\n            sourceId === currentSourceId &&\n            node === currentNode\n          );\n        }\n        //otherwise, we have a line-style breakpoint; we want to stop at the\n        //*first* point on the line\n        return (\n          compilationId === currentCompilationId &&\n          sourceId === currentSourceId &&\n          line === currentLine &&\n          (currentSourceId !== previousSourceId || currentLine !== previousLine)\n        );\n      }).length > 0;\n  } while (!breakpointHit);\n}\n\n/**\n * reset -- reset the state of the debugger\n * (we'll just reset all submodules regardless of which are in use)\n */\nexport function* reset() {\n  yield* data.reset();\n  yield* evm.reset();\n  yield* solidity.reset();\n  yield* trace.reset();\n  yield* stacktrace.reset();\n}\n","module.exports = require(\"babel-runtime/core-js/object/keys\");","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\nimport * as trace from \"lib/trace/sagas\";\n\nimport solidity from \"../selectors\";\n\nexport function* addSources(compilations) {\n  yield put(actions.addSources(compilations));\n}\n\nfunction* tickSaga() {\n  debug(\"got TICK\");\n\n  yield* functionDepthSaga();\n  debug(\"instruction: %O\", yield select(solidity.current.instruction));\n  yield* trace.signalTickSagaCompletion();\n}\n\nfunction* functionDepthSaga() {\n  if (yield select(solidity.current.willReturn)) {\n    //we do this case first so we can be sure we're not failing in any of the\n    //other cases below!\n    yield put(actions.externalReturn());\n  } else if (yield select(solidity.current.willJump)) {\n    let jumpDirection = yield select(solidity.current.jumpDirection);\n    debug(\"checking guard\");\n    let guard = yield select(solidity.current.nextFrameIsPhantom);\n    let nextSource = yield select(solidity.next.source);\n    if (jumpDirection === \"i\" && guard && nextSource.id !== undefined) {\n      //note: currently unmapped source will have id undefined, rather than\n      //id -1, in our internal representation.  Might want to change this\n      //later.\n      yield put(actions.clearPhantomGuard());\n    } else {\n      yield put(actions.jump(jumpDirection));\n    }\n  } else if (yield select(solidity.current.willCall)) {\n    //note: includes creations; does not include insta-returns\n    debug(\"checking if guard needed\");\n    let guard = yield select(solidity.current.callRequiresPhantomFrame);\n    yield put(actions.externalCall(guard));\n  }\n}\n\nexport function* reset() {\n  let guard = yield select(\n    solidity.transaction.bottomStackframeRequiresPhantomFrame\n  );\n  yield put(actions.reset(guard));\n}\n\nexport function* unload() {\n  yield put(actions.unloadTransaction());\n}\n\nexport function* begin() {\n  let guard = yield select(\n    solidity.transaction.bottomStackframeRequiresPhantomFrame\n  );\n  yield put(actions.externalCall(guard));\n}\n\nexport function* saga() {\n  yield takeEvery(TICK, tickSaga);\n}\n\nexport default prefixName(\"solidity\", saga);\n","export const ADD_SOURCES = \"SOLIDITY_ADD_SOURCES\";\nexport function addSources(compilations) {\n  return {\n    type: ADD_SOURCES,\n    compilations\n  };\n}\n\nexport const JUMP = \"SOLIDITY_JUMP\";\nexport function jump(jumpDirection) {\n  return {\n    type: JUMP,\n    jumpDirection\n  };\n}\n\nexport const EXTERNAL_CALL = \"SOLIDITY_EXTERNAL_CALL\";\nexport function externalCall(guard) {\n  return { type: EXTERNAL_CALL, guard };\n}\n\nexport const EXTERNAL_RETURN = \"SOLIDITY_EXTERNAL_RETURN\";\nexport function externalReturn() {\n  return { type: EXTERNAL_RETURN };\n}\n\nexport const CLEAR_PHANTOM_GUARD = \"SOLIDITY_CLEAR_PHANTOM_GUARD\";\nexport function clearPhantomGuard() {\n  return { type: CLEAR_PHANTOM_GUARD };\n}\n\nexport const RESET = \"SOLIDITY_RESET\";\nexport function reset(guard) {\n  return { type: RESET, guard };\n}\n\nexport const UNLOAD_TRANSACTION = \"SOLIDITY_UNLOAD_TRANSACTION\";\nexport function unloadTransaction() {\n  return { type: UNLOAD_TRANSACTION };\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:stacktrace:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\nimport * as trace from \"lib/trace/sagas\";\n\nimport stacktrace from \"../selectors\";\n\nfunction* tickSaga() {\n  yield* stacktraceSaga();\n  yield* trace.signalTickSagaCompletion();\n}\n\n//NOTE: we deliberately *don't* do any phantom-checking in this\n//submodule.  yes, it will result in some junk stackframes, but\n//I really don't want a fallback or constructor frame skipped over\n//due to phantom checking\n\nfunction* stacktraceSaga() {\n  const currentLocation = yield select(stacktrace.current.strippedLocation);\n  const lastLocation = yield select(stacktrace.current.lastPosition);\n  const returnCounter = yield select(stacktrace.current.returnCounter);\n  let positionUpdated = false;\n  //different possible outcomes:\n  //first: are we returning?\n  if (yield select(stacktrace.current.willReturn)) {\n    const status = yield select(stacktrace.current.returnStatus);\n    debug(\"returning!\");\n    yield put(actions.externalReturn(lastLocation, status, currentLocation));\n    positionUpdated = true;\n  } else if (\n    //next: are we *executing* a return?\n    //note this needs to be an else if or else this could execute\n    //in an inconsistent state\n    returnCounter > 0 &&\n    (yield select(stacktrace.current.positionWillChange))\n  ) {\n    debug(\"executing!\");\n    debug(\"location: %o\", yield select(stacktrace.next.location));\n    debug(\"marked: %o\", lastLocation);\n    yield put(actions.executeReturn(returnCounter, currentLocation));\n    positionUpdated = true;\n  }\n  //we now process the other possibilities.\n  //technically, an EXECUTE_RETURN could happen as well as those below,\n  //resulting in 2 actions instead of just one, but it's pretty unlikely.\n  //(an EXTERNAL_RETURN, OTOH, is obviously exclusive of the possibilities below)\n  if (yield select(stacktrace.current.willJumpIn)) {\n    const nextLocation = yield select(stacktrace.next.location);\n    const nextParent = yield select(stacktrace.next.contractNode);\n    yield put(actions.jumpIn(currentLocation, nextLocation.node, nextParent));\n    positionUpdated = true;\n  } else if (yield select(stacktrace.current.willJumpOut)) {\n    yield put(actions.jumpOut(currentLocation));\n    positionUpdated = true;\n  } else if (yield select(stacktrace.current.willCall)) {\n    //note: includes creations\n    //note: does *not* include calls that insta-return.  logically speaking,\n    //such calls should be a call + a return in one, right? and we could do that,\n    //making a call while also incrementing the return counter.  but the stacktraces\n    //this would generate would, I think, be more confusing than helpful, so I'm\n    //deliberately not doing that.\n    //NOTE: we can't use stacktrace.next.location here as that\n    //doesn't work across call contexts!\n    const nextContext = yield select(stacktrace.current.callContext);\n    const nextAddress = yield select(stacktrace.current.callAddress);\n    yield put(actions.externalCall(currentLocation, nextContext, nextAddress));\n    positionUpdated = true;\n  }\n  //finally, if no other action updated the position, do so here\n  if (!positionUpdated) {\n    yield put(actions.updatePosition(currentLocation));\n  }\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* unload() {\n  yield put(actions.unloadTransaction());\n}\n\nexport function* begin() {\n  const context = yield select(stacktrace.current.context);\n  const address = yield select(stacktrace.current.address);\n  yield put(actions.externalCall(null, context, address));\n}\n\nexport function* saga() {\n  yield takeEvery(TICK, tickSaga);\n}\n\nexport default prefixName(\"stacktrace\", saga);\n","export const JUMP_IN = \"STACKTRACE_JUMP_IN\";\nexport function jumpIn(location, functionNode, contractNode) {\n  return {\n    type: JUMP_IN,\n    location,\n    functionNode,\n    contractNode,\n  };\n}\n\nexport const JUMP_OUT = \"STACKTRACE_JUMP_OUT\";\nexport function jumpOut(location) {\n  return {\n    type: JUMP_OUT,\n    location,\n  };\n}\n\nexport const EXTERNAL_CALL = \"STACKTRACE_EXTERNAL_CALL\";\nexport function externalCall(location, context, address) {\n  return {\n    type: EXTERNAL_CALL,\n    location,\n    context,\n    address,\n  };\n}\n\nexport const EXTERNAL_RETURN = \"STACKTRACE_EXTERNAL_RETURN\";\nexport function externalReturn(from, status, location) {\n  return {\n    type: EXTERNAL_RETURN,\n    from,\n    status,\n    location,\n  };\n}\n\nexport const EXECUTE_RETURN = \"STACKTRACE_EXECUTE_RETURN\";\nexport function executeReturn(counter, location) {\n  return {\n    type: EXECUTE_RETURN,\n    counter,\n    location,\n  };\n}\n\nexport const UPDATE_POSITION = \"STACKTRACE_UPDATE_POSITION\";\nexport function updatePosition(location) {\n  return {\n    type: UPDATE_POSITION,\n    location,\n  };\n}\n\nexport const RESET = \"STACKTRACE_RESET\";\nexport function reset() {\n  return {\n    type: RESET,\n  };\n}\n\nexport const UNLOAD_TRANSACTION = \"STACKTRACE_UNLOAD_TRANSACTION\";\nexport function unloadTransaction() {\n  return {\n    type: UNLOAD_TRANSACTION,\n  };\n}\n","require(\"source-map-support/register\");\nvar Debugger = require(\"./lib/debugger\").default;\n\nmodule.exports = Debugger;\n","module.exports = require(\"source-map-support/register\");","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger\");\n\nimport Session from \"./session\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport dataSelector from \"./data/selectors\";\nimport astSelector from \"./ast/selectors\";\nimport traceSelector from \"./trace/selectors\";\nimport evmSelector from \"./evm/selectors\";\nimport soliditySelector from \"./solidity/selectors\";\nimport sessionSelector from \"./session/selectors\";\nimport stacktraceSelector from \"./stacktrace/selectors\";\nimport controllerSelector from \"./controller/selectors\";\n\nimport { Compilations } from \"@truffle/codec\";\n\nconst Debugger = {\n  /**\n   * Instantiates a Debugger for a given transaction hash.\n   *\n   * @param {String} txHash - transaction hash with leading \"0x\"\n   * @param {{contracts: Array<Artifact>, files: Array<String>, provider: Web3Provider, compilations: Array<Compilation>}} options -\n   * @return {Debugger} instance\n   */\n  forTx: async function(txHash, options = {}) {\n    let { contracts, files, provider, compilations, lightMode } = options;\n    if (!compilations) {\n      compilations = Compilations.Utils.shimArtifacts(contracts, files);\n    }\n    let session = new Session(compilations, provider, { lightMode }, txHash);\n\n    try {\n      await session.ready();\n      debug(\"session ready\");\n    } catch (e) {\n      debug(\"error occurred, unloaded\");\n      session.unload();\n    }\n\n    return session;\n  },\n\n  /*\n   * Instantiates a Debugger for a given project (with no transaction loaded)\n   *\n   * @param {{contracts: Array<Artifact>, files: Array<String>, provider: Web3Provider, compilations: Array<Compilation>}} options -\n   * @return {Debugger} instance\n   */\n  forProject: async function(options = {}) {\n    let { contracts, files, provider, compilations, lightMode } = options;\n    if (!compilations) {\n      compilations = Compilations.Utils.shimArtifacts(contracts, files);\n    }\n    let session = new Session(compilations, provider, { lightMode });\n\n    await session.ready();\n\n    return session;\n  },\n\n  /**\n   * Exported selectors\n   *\n   * See individual selector docs for full listing\n   *\n   * @example\n   * Debugger.selectors.ast.current.tree\n   *\n   * @example\n   * Debugger.selectors.solidity.current.instruction\n   *\n   * @example\n   * Debugger.selectors.trace.steps\n   */\n  get selectors() {\n    return createNestedSelector({\n      ast: astSelector,\n      data: dataSelector,\n      trace: traceSelector,\n      evm: evmSelector,\n      solidity: soliditySelector,\n      stacktrace: stacktraceSelector,\n      session: sessionSelector,\n      controller: controllerSelector\n    });\n  }\n};\n\nexport default Debugger;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session\");\n\nimport * as Codec from \"@truffle/codec\";\nimport { keccak256 } from \"lib/helpers\";\n\nimport configureStore from \"lib/store\";\n\nimport * as controller from \"lib/controller/actions\";\nimport * as actions from \"./actions\";\nimport data from \"lib/data/selectors\";\nimport stacktrace from \"lib/stacktrace/selectors\";\nimport session from \"lib/session/selectors\";\nimport * as dataSagas from \"lib/data/sagas\";\nimport * as controllerSagas from \"lib/controller/sagas\";\nimport * as sagas from \"./sagas\";\nimport controllerSelector from \"lib/controller/selectors\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport ast from \"lib/ast/selectors\";\nimport trace from \"lib/trace/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport rootSaga from \"./sagas\";\nimport reducer from \"./reducers\";\n\nimport { shimBytecode } from \"@truffle/compile-solidity/legacy/shims\";\n\n/**\n * Debugger Session\n */\nexport default class Session {\n  /**\n   * @param {Array<Compilations>} compilations\n   * @param {Web3Provider} provider - web3 provider\n   * txHash parameter is now optional!\n   * @private\n   */\n  constructor(compilations, provider, moduleOptions, txHash) {\n    /**\n     * @private\n     */\n    let { store, sagaMiddleware } = configureStore(reducer, rootSaga, [\n      moduleOptions\n    ]);\n    this._store = store;\n    this._sagaMiddleware = sagaMiddleware;\n\n    let { contexts, sources } = Session.normalize(compilations);\n\n    // record contracts\n    this._store.dispatch(actions.recordContracts(contexts, sources));\n\n    //set up the ready listener\n    this._ready = new Promise((accept, reject) => {\n      const unsubscribe = this._store.subscribe(() => {\n        if (this.view(session.status.ready)) {\n          debug(\"ready!\");\n          unsubscribe();\n          accept();\n        } else if (this.view(session.status.errored)) {\n          debug(\"error!\");\n          unsubscribe();\n          reject(this.view(session.status.error));\n        }\n      });\n    });\n\n    //note that txHash is now optional\n    this._store.dispatch(actions.start(provider, txHash));\n  }\n\n  async ready() {\n    await this._ready;\n  }\n\n  async readyAgainAfterLoading(sessionAction) {\n    return new Promise((accept, reject) => {\n      let hasStartedWaiting = false;\n      debug(\"reready listener set up\");\n      const unsubscribe = this._store.subscribe(() => {\n        debug(\"reready?\");\n        if (hasStartedWaiting) {\n          if (this.view(session.status.ready)) {\n            debug(\"reready!\");\n            unsubscribe();\n            accept(true);\n          } else if (this.view(session.status.errored)) {\n            unsubscribe();\n            debug(\"error!\");\n            reject(this.view(session.status.error));\n          }\n        } else {\n          if (this.view(session.status.waiting)) {\n            debug(\"started waiting\");\n            hasStartedWaiting = true;\n          }\n          return;\n        }\n      });\n      this.dispatch(sessionAction);\n    });\n  }\n\n  /**\n   * Split up artifacts into \"contexts\" and \"sources\", dividing artifact\n   * data into appropriate buckets.\n   *\n   * Multiple contracts can be defined in the same source file, but have\n   * different bytecodes.\n   *\n   * (NOTE: now that this takes compilations, the splitting is largely already\n   * done.  However, there's still remaining work to do.)\n   *\n   * @private\n   */\n  static normalize(compilations) {\n    let contexts = [];\n    let sources = {}; //by compilation, then index\n\n    for (let compilation of compilations) {\n      if (compilation.unreliableSourceOrder) {\n        throw new Error(\n          `Error: Compilation ${compilation.id} has unreliable source order.`\n        );\n      }\n      let compiler = compilation.compiler; //note: we'll prefer one listed on contract or source\n      sources[compilation.id] = [];\n      for (let index in compilation.sources) {\n        //not the recommended way to iterate over an array,\n        //but the order doesn't matter here so it's safe\n        let source = compilation.sources[index];\n        if (!source) {\n          continue; //just for safety (in case there are gaps)\n        }\n        sources[compilation.id][index] = {\n          ...source,\n          compiler: source.compiler || compiler,\n          compilationId: compilation.id,\n          id: index\n        };\n      }\n\n      for (let contract of compilation.contracts) {\n        let {\n          contractName,\n          bytecode: binary,\n          sourceMap,\n          deployedBytecode: deployedBinary,\n          deployedSourceMap,\n          immutableReferences,\n          abi,\n          compiler,\n          primarySourceId\n        } = contract;\n\n        //hopefully we can get rid of this step eventually, but not yet\n        if (typeof binary === \"object\") {\n          binary = shimBytecode(binary);\n        }\n        if (typeof deployedBinary === \"object\") {\n          deployedBinary = shimBytecode(deployedBinary);\n        }\n\n        let primarySourceIndex;\n        if (primarySourceId !== undefined) {\n          //I'm assuming this finds it! it had better!\n          primarySourceIndex = compilation.sources.findIndex(\n            source => source && source.id === primarySourceId\n          );\n        }\n        //otherwise leave it undefined\n\n        //now: we need to find the contract node.\n        //note: ideally we'd hold this off till later, but that would break the\n        //direction of the evm/solidity dependence, so we do it now\n        let contractNode = Codec.Compilations.Utils.getContractNode(\n          contract,\n          compilation\n        );\n\n        let contractId = contractNode ? contractNode.id : undefined;\n        let contractKind = contractNode ? contractNode.contractKind : undefined;\n        abi = Codec.AbiData.Utils.schemaAbiToAbi(abi); //let's handle this up front\n\n        debug(\"contractName %s\", contractName);\n        debug(\"sourceMap %o\", sourceMap);\n        debug(\"compiler %o\", compiler);\n        debug(\"abi %O\", abi);\n\n        if (binary && binary != \"0x\") {\n          contexts.push({\n            contractName,\n            binary,\n            sourceMap,\n            primarySource: primarySourceIndex,\n            abi,\n            compiler,\n            compilationId: compilation.id,\n            contractId,\n            contractKind,\n            externalSolidity: compilation.externalSolidity,\n            isConstructor: true\n          });\n        }\n\n        if (deployedBinary && deployedBinary != \"0x\") {\n          contexts.push({\n            contractName,\n            binary: deployedBinary,\n            sourceMap: deployedSourceMap,\n            primarySource: primarySourceIndex,\n            immutableReferences,\n            abi,\n            compiler,\n            compilationId: compilation.id,\n            contractId,\n            contractKind,\n            externalSolidity: compilation.externalSolidity,\n            isConstructor: false\n          });\n        }\n      }\n    }\n\n    //now: turn contexts from array into object\n    contexts = Object.assign(\n      {},\n      ...contexts.map(context => {\n        const contextHash = keccak256({\n          type: \"string\",\n          value: context.binary\n        });\n        //NOTE: we take hash as *string*, not as bytes, because the binary may\n        //contain link references!\n        return {\n          [contextHash]: {\n            ...context,\n            context: contextHash\n          }\n        };\n      })\n    );\n\n    //normalize contexts\n    contexts = Codec.Contexts.Utils.normalizeContexts(contexts);\n\n    return { contexts, sources };\n  }\n\n  get state() {\n    return this._store.getState();\n  }\n\n  view(selector) {\n    return selector(this.state);\n  }\n\n  async dispatch(action) {\n    this._store.dispatch(action);\n\n    return true;\n  }\n\n  /**\n   * @private\n   * Allows running any saga -- for internal use only!\n   * Using this could seriously screw up the debugger state if you\n   * don't know what you're doing!\n   */\n  async _runSaga(saga, ...args) {\n    return await this._sagaMiddleware.run(saga, ...args).toPromise();\n  }\n\n  async interrupt() {\n    await this.dispatch(actions.interrupt());\n    await this.dispatch(controller.interrupt());\n  }\n\n  async doneStepping(stepperAction) {\n    return new Promise(resolve => {\n      let hasStarted = false;\n      const unsubscribe = this._store.subscribe(() => {\n        const isStepping = this.view(controllerSelector.isStepping);\n\n        if (isStepping && !hasStarted) {\n          hasStarted = true;\n          debug(\"heard step start\");\n          return;\n        }\n\n        if (!isStepping && hasStarted) {\n          debug(\"heard step stop\");\n          unsubscribe();\n          resolve(true);\n        }\n      });\n      this.dispatch(stepperAction);\n    });\n  }\n\n  //returns true on success, false on already loaded, error object on failure\n  async load(txHash) {\n    if (this.view(session.status.loaded)) {\n      return false;\n    }\n    try {\n      return await this.readyAgainAfterLoading(actions.loadTransaction(txHash));\n    } catch (e) {\n      this._runSaga(sagas.unload);\n      return e;\n    }\n  }\n\n  //returns true on success, false on already unloaded\n  async unload() {\n    if (!this.view(session.status.loaded)) {\n      return false;\n    }\n    debug(\"unloading\");\n    await this._runSaga(sagas.unload);\n    return true;\n  }\n\n  //Note: count is an optional argument; default behavior is to advance 1\n  async advance(count) {\n    return await this.doneStepping(controller.advance(count));\n  }\n\n  async stepNext() {\n    return await this.doneStepping(controller.stepNext());\n  }\n\n  async stepOver() {\n    return await this.doneStepping(controller.stepOver());\n  }\n\n  async stepInto() {\n    return await this.doneStepping(controller.stepInto());\n  }\n\n  async stepOut() {\n    return await this.doneStepping(controller.stepOut());\n  }\n\n  async reset() {\n    let loaded = this.view(session.status.loaded);\n    if (!loaded) {\n      return;\n    }\n    return await this._runSaga(controllerSagas.reset);\n  }\n\n  //NOTE: breakpoints is an OPTIONAL argument for if you want to supply your\n  //own list of breakpoints; leave it out to use the internal one (as\n  //controlled by the functions below)\n  async continueUntilBreakpoint(breakpoints) {\n    return await this.doneStepping(\n      controller.continueUntilBreakpoint(breakpoints)\n    );\n  }\n\n  async addBreakpoint(breakpoint) {\n    return await this.dispatch(controller.addBreakpoint(breakpoint));\n  }\n\n  async removeBreakpoint(breakpoint) {\n    return await this.dispatch(controller.removeBreakpoint(breakpoint));\n  }\n\n  async removeAllBreakpoints() {\n    return await this.dispatch(controller.removeAllBreakpoints());\n  }\n\n  //deprecated -- decode is now *always* ready!\n  async decodeReady() {\n    return true;\n  }\n\n  async variable(name) {\n    const definitions = this.view(data.current.identifiers.definitions);\n    const refs = this.view(data.current.identifiers.refs);\n    const compilationId = this.view(data.current.compilationId);\n\n    return await this._runSaga(\n      dataSagas.decode,\n      definitions[name],\n      refs[name],\n      compilationId\n    );\n  }\n\n  async variables() {\n    if (!this.view(session.status.loaded)) {\n      return {};\n    }\n    let definitions = this.view(data.current.identifiers.definitions);\n    let refs = this.view(data.current.identifiers.refs);\n    let compilationId = this.view(data.current.compilationId);\n    let decoded = {};\n    for (let [identifier, ref] of Object.entries(refs)) {\n      if (identifier in definitions) {\n        decoded[identifier] = await this._runSaga(\n          dataSagas.decode,\n          definitions[identifier],\n          ref,\n          compilationId\n        );\n      }\n    }\n    return decoded;\n  }\n\n  async returnValue() {\n    if (\n      !this.view(session.status.loaded) ||\n      !this.view(evm.current.step.isHalting)\n    ) {\n      return null;\n    }\n    return await this._runSaga(dataSagas.decodeReturnValue);\n  }\n\n  callstack() {\n    if (!this.view(session.status.loaded)) {\n      return null;\n    }\n    return this.view(stacktrace.current.report);\n  }\n\n  stacktrace() {\n    if (!this.view(session.status.loaded)) {\n      return null;\n    }\n    return this.view(stacktrace.current.finalReport);\n  }\n\n  connect() {\n    return this; //for compatibility\n  }\n\n  async addExternalCompilations(compilations) {\n    let { contexts, sources } = Session.normalize(compilations);\n    return await this.dispatch(actions.addCompilations(sources, contexts));\n  }\n\n  async startFullMode() {\n    return await this.dispatch(actions.startFullMode());\n  }\n\n  get selectors() {\n    return createNestedSelector({\n      ast,\n      data,\n      trace,\n      evm,\n      solidity,\n      stacktrace,\n      session,\n      controller: controllerSelector\n    });\n  }\n}\n","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"json-stable-stringify\");","if (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./production\");\n} else if (process.env.NODE_ENV === \"test\") {\n  module.exports = require(\"./test\");\n} else {\n  module.exports = require(\"./development\");\n}\n","import configureStore from \"./common\";\nexport default configureStore;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:common\");\n\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nexport default function configureStore(\n  reducer,\n  saga,\n  sagaArgs,\n  initialState,\n  composeEnhancers\n) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  if (!composeEnhancers) {\n    composeEnhancers = compose;\n  }\n\n  let store = createStore(\n    reducer,\n    initialState,\n\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n\n  sagaMiddleware.run(saga, ...sagaArgs);\n\n  return { store, sagaMiddleware };\n}\n","module.exports = require(\"redux-saga\");","module.exports = require(\"@truffle/solidity-utils\");","module.exports = require(\"lodash.zipwith\");","export const INIT_WEB3 = \"INIT_WEB3\";\nexport function init(provider) {\n  return {\n    type: INIT_WEB3,\n    provider\n  };\n}\n\nexport const INSPECT = \"INSPECT_TRANSACTION\";\nexport function inspect(txHash) {\n  return {\n    type: INSPECT,\n    txHash\n  };\n}\n\nexport const FETCH_BINARY = \"FETCH_BINARY\";\nexport function fetchBinary(address, block) {\n  return {\n    type: FETCH_BINARY,\n    address,\n    block //optional\n  };\n}\n\nexport const RECEIVE_BINARY = \"RECEIVE_BINARY\";\nexport function receiveBinary(address, binary) {\n  return {\n    type: RECEIVE_BINARY,\n    address,\n    binary\n  };\n}\n\nexport const RECEIVE_TRACE = \"RECEIVE_TRACE\";\nexport function receiveTrace(trace) {\n  return {\n    type: RECEIVE_TRACE,\n    trace\n  };\n}\n\nexport const RECEIVE_CALL = \"RECEIVE_CALL\";\nexport function receiveCall({\n  address,\n  binary,\n  data,\n  storageAddress,\n  status,\n  sender,\n  value,\n  gasprice,\n  block\n}) {\n  return {\n    type: RECEIVE_CALL,\n    address,\n    binary,\n    data,\n    storageAddress,\n    status, //only used for creation calls at present!\n    sender,\n    value,\n    gasprice,\n    block\n  };\n}\n\nexport const ERROR_WEB3 = \"ERROR_WEB3\";\nexport function error(error) {\n  return {\n    type: ERROR_WEB3,\n    error\n  };\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:adapter\");\n\nimport Web3 from \"web3\";\nimport { promisify } from \"util\";\n\nexport default class Web3Adapter {\n  constructor(provider) {\n    this.web3 = new Web3(provider);\n  }\n\n  async getTrace(txHash) {\n    let result = await promisify(this.web3.currentProvider.send)(\n      //send *only* uses callbacks, so we use promsifiy to make things more\n      //readable\n      {\n        jsonrpc: \"2.0\",\n        method: \"debug_traceTransaction\",\n        params: [txHash, {}],\n        id: new Date().getTime()\n      }\n    );\n    if (result.error) {\n      throw new Error(result.error.message);\n    } else {\n      return result.result.structLogs;\n    }\n  }\n\n  async getTransaction(txHash) {\n    return await this.web3.eth.getTransaction(txHash);\n  }\n\n  async getReceipt(txHash) {\n    return await this.web3.eth.getTransactionReceipt(txHash);\n  }\n\n  async getBlock(blockNumberOrHash) {\n    return await this.web3.eth.getBlock(blockNumberOrHash);\n  }\n\n  /**\n   * getDeployedCode - get the deployed code for an address from the client\n   * NOTE: the block argument is optional\n   * @param  {String} address\n   * @return {String}         deployedBinary\n   */\n  async getDeployedCode(address, block) {\n    debug(\"getting deployed code for %s\", address);\n    let code = await this.web3.eth.getCode(address, block);\n    return code === \"0x0\" ? \"0x\" : code;\n  }\n}\n","module.exports = require(\"util\");","module.exports = require(\"lodash.sum\");","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:sagas\");\n\nimport { call, all, fork, take, put, race, select } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as ast from \"lib/ast/sagas\";\nimport * as controller from \"lib/controller/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as stacktrace from \"lib/stacktrace/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport session from \"../selectors\";\n\nconst LOAD_SAGAS = {\n  [actions.LOAD_TRANSACTION]: load,\n  //will also add reconstruct action/saga once it exists\n  //the following ones don't really relate to loading, but, oh well\n  [actions.ADD_COMPILATIONS]: addCompilations,\n  [actions.START_FULL_MODE]: startFullMode\n};\n\nfunction* listenerSaga() {\n  while (true) {\n    let action = yield take(Object.keys(LOAD_SAGAS));\n    let saga = LOAD_SAGAS[action.type];\n\n    yield put(actions.wait());\n    yield race({\n      exec: call(saga, action), //not all will use this\n      interrupt: take(actions.INTERRUPT)\n    });\n    yield put(actions.ready());\n  }\n}\n\nexport function* saga(moduleOptions) {\n  debug(\"starting listeners\");\n  yield* forkListeners(moduleOptions);\n\n  // receiving & saving contracts into state\n  debug(\"waiting for contract information\");\n  let { contexts, sources } = yield take(actions.RECORD_CONTRACTS);\n\n  debug(\"recording contract binaries\");\n  yield* recordContexts(contexts);\n\n  debug(\"recording contract sources\");\n  yield* recordSources(sources);\n\n  debug(\"waiting for start\");\n  // wait for start signal\n  let { txHash, provider } = yield take(actions.START);\n  debug(\"starting\");\n\n  if (!moduleOptions.lightMode) {\n    debug(\"visiting ASTs\");\n    // visit asts\n    yield* ast.visitAll();\n\n    //save allocation table\n    debug(\"saving allocation table\");\n    yield* data.recordAllocations();\n    //note: we don't need to explicitly set full mode, it's the default\n  } else {\n    debug(\"setting light mode\");\n    yield put(actions.setLightMode());\n  }\n\n  //initialize web3 adapter\n  debug(\"initializing adapter\");\n  yield* web3.init(provider);\n\n  //process transaction (if there is one)\n  //(note: this part may also set the error state)\n  if (txHash !== undefined) {\n    yield* processTransaction(txHash);\n  }\n\n  debug(\"readying\");\n  // signal that commands can begin\n  yield* ready();\n}\n\n//please only use in light mode!\nfunction* addCompilations({ sources, contexts }) {\n  debug(\"recording contract binaries\");\n  yield* recordContexts(contexts);\n\n  debug(\"recording contract sources\");\n  yield* recordSources(sources);\n\n  debug(\"refreshing instances\");\n  yield* evm.refreshInstances();\n}\n\nfunction* startFullMode() {\n  debug(\"session: %O\", session);\n  let lightMode = yield select(session.status.lightMode);\n  if (!lightMode) {\n    //better not start this twice!\n    return;\n  }\n  debug(\"turning on data listener\");\n  yield fork(data.saga);\n\n  debug(\"visiting ASTs\");\n  // visit asts\n  yield* ast.visitAll();\n\n  //save allocation table\n  debug(\"saving allocation table\");\n  yield* data.recordAllocations();\n\n  yield* trace.addSubmoduleToCount();\n\n  yield put(actions.setFullMode());\n}\n\nexport function* processTransaction(txHash) {\n  // process transaction\n  debug(\"fetching transaction info\");\n  let err = yield* fetchTx(txHash);\n  if (err) {\n    debug(\"error %o\", err);\n    yield* error(err);\n  }\n}\n\nexport default prefixName(\"session\", saga);\n\nfunction* forkListeners(moduleOptions) {\n  yield fork(listenerSaga); //session listener; this one is separate, sorry\n  //(I didn't want to mess w/ the existing structure of defaults)\n  let mainApps = [evm, solidity, stacktrace];\n  if (!moduleOptions.lightMode) {\n    mainApps.push(data);\n  }\n  let otherApps = [trace, controller, web3];\n  const submoduleCount = mainApps.length;\n  const apps = mainApps.concat(otherApps);\n  yield* trace.setSubmoduleCount(submoduleCount);\n  return yield all(apps.map(app => fork(app.saga)));\n}\n\nfunction* fetchTx(txHash) {\n  let result = yield* web3.inspectTransaction(txHash);\n  debug(\"result %o\", result);\n\n  if (result.error) {\n    return result.error;\n  }\n\n  //get addresses created/called during transaction\n  debug(\"processing trace for addresses\");\n  let addresses = yield* trace.processTrace(result.trace);\n  //add in the address of the call itself (if a call)\n  if (result.address && !addresses.includes(result.address)) {\n    addresses.push(result.address);\n  }\n  //if a create, only add in address if it was successful\n  if (\n    result.binary &&\n    result.status &&\n    !addresses.includes(result.storageAddress)\n  ) {\n    addresses.push(result.storageAddress);\n  }\n\n  let blockNumber = result.block.number.toString(); //a BN is not accepted\n  debug(\"obtaining binaries\");\n  let binaries = yield* web3.obtainBinaries(addresses, blockNumber);\n\n  debug(\"recording instances\");\n  yield all(\n    addresses.map((address, i) => call(recordInstance, address, binaries[i]))\n  );\n\n  debug(\"sending initial call\");\n  yield* evm.begin(result); //note: this must occur *before* the other two\n  yield* solidity.begin();\n  yield* stacktrace.begin();\n}\n\nfunction* recordContexts(contexts) {\n  for (let context of Object.values(contexts)) {\n    yield* evm.addContext(context);\n  }\n}\n\nfunction* recordSources(sources) {\n  yield* solidity.addSources(sources);\n}\n\nfunction* recordInstance(address, binary) {\n  yield* evm.addInstance(address, binary);\n}\n\nfunction* ready() {\n  yield put(actions.ready());\n}\n\nfunction* error(err) {\n  yield put(actions.error(err));\n}\n\n//we'll just unload all modules regardless of which ones are currently present...\nexport function* unload() {\n  debug(\"unloading\");\n  yield* data.reset();\n  yield* solidity.unload();\n  yield* evm.unload();\n  yield* trace.unload();\n  yield* stacktrace.unload();\n  yield put(actions.unloadTransaction());\n}\n\n//note that load takes an action as its argument, which is why it's separate\n//from processTransaction\nfunction* load({ txHash }) {\n  yield* processTransaction(txHash);\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:sagas\");\n\nimport { all, call, select } from \"redux-saga/effects\";\n\nimport * as data from \"lib/data/sagas\";\n\nimport ast from \"../selectors\";\n\nimport flatten from \"lodash.flatten\";\nimport jsonpointer from \"json-pointer\";\n\nfunction* walk(compilationId, sourceId, node, pointer = \"\", parentId = null) {\n  debug(\"walking %d %o %o\", sourceId, pointer, node);\n\n  yield* handleEnter(compilationId, sourceId, node, pointer, parentId);\n\n  if (Array.isArray(node)) {\n    for (let [i, child] of node.entries()) {\n      yield* walk(compilationId, sourceId, child, `${pointer}/${i}`, parentId);\n    }\n  } else if (node && node.nodeType === \"YulBlock\") {\n    //defer to yul handler!\n    yield* handleYul(compilationId, sourceId, node, pointer, parentId);\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield* walk(compilationId, sourceId, child, `${pointer}/${key}`, node.id);\n    }\n  }\n\n  yield* handleExit(compilationId, sourceId, node, pointer);\n}\n\nfunction* handleEnter(compilationId, sourceId, node, pointer, parentId) {\n  debug(\"entering %d %s\", sourceId, pointer);\n\n  if (!(node instanceof Object)) {\n    return;\n  }\n\n  if (node.id !== undefined) {\n    debug(\"%s recording scope %s\", pointer, node.id);\n    yield* data.scope(node.id, pointer, parentId, sourceId, compilationId);\n  }\n\n  switch (node.nodeType) {\n    case \"VariableDeclaration\":\n      debug(\"%s recording variable %o\", pointer, node);\n      yield* data.declare(node, compilationId);\n      break;\n    case \"ContractDefinition\":\n    case \"StructDefinition\":\n    case \"EnumDefinition\":\n      debug(\"%s recording type %o\", pointer, node);\n      yield* data.defineType(node, compilationId);\n      break;\n  }\n}\n\nfunction* handleExit(compilationId, sourceId, node, pointer) {\n  debug(\"exiting %d %s\", sourceId, pointer);\n\n  // no-op right now\n}\n\nexport function* visitAll() {\n  let compilations = yield select(ast.views.sources);\n\n  let sources = flatten(\n    Object.values(compilations).map(({ byId }) => byId)\n  ).filter(x => x);\n\n  yield all(\n    sources\n      .filter(({ ast }) => ast)\n      .map(({ ast, id, compilationId }) => call(walk, compilationId, id, ast))\n  );\n\n  debug(\"done visiting\");\n}\n\nfunction* handleYul(compilationId, sourceId, node, pointer, parentId) {\n  yield* yulWalk(\n    compilationId,\n    sourceId,\n    node,\n    pointer,\n    node,\n    pointer,\n    parentId\n  );\n}\n\nfunction* yulWalk(\n  compilationId,\n  sourceId,\n  node,\n  pointer,\n  base,\n  basePointer,\n  parentId = undefined\n) {\n  yield* handleYulEnter(\n    compilationId,\n    sourceId,\n    node,\n    pointer,\n    base,\n    basePointer,\n    parentId\n  );\n\n  if (Array.isArray(node)) {\n    for (let [i, child] of node.entries()) {\n      yield* yulWalk(\n        compilationId,\n        sourceId,\n        child,\n        `${pointer}/${i}`,\n        base,\n        basePointer\n      ); //no parent ID for subnodes\n    }\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield* yulWalk(\n        compilationId,\n        sourceId,\n        child,\n        `${pointer}/${key}`,\n        base,\n        basePointer\n      ); //no parent ID for subnodes\n    }\n  }\n\n  yield* handleYulExit(\n    compilationId,\n    sourceId,\n    node,\n    pointer,\n    base,\n    basePointer,\n    parentId\n  );\n}\n\nfunction* handleYulExit(\n  compilationId,\n  sourceId,\n  node,\n  pointer,\n  base,\n  basePointer,\n  _parentId = undefined\n) {\n  debug(\"exiting %d %s\", sourceId, pointer);\n\n  // no-op right now\n}\n\nfunction* handleYulEnter(\n  compilationId,\n  sourceId,\n  node,\n  pointer,\n  base,\n  basePointer,\n  parentId = undefined\n) {\n  debug(\"entering %d %s\", sourceId, pointer);\n\n  if (!node) {\n    return;\n  }\n\n  if (node.src !== undefined) {\n    debug(\"scoping!\");\n    yield* data.yulScope(pointer, sourceId, compilationId, parentId);\n  }\n\n  if (node.nodeType === \"YulTypedName\") {\n    let scopePointer = findYulScopePointer(node, pointer, base, basePointer);\n    yield* data.yulDeclare(\n      node,\n      pointer,\n      scopePointer,\n      sourceId,\n      compilationId\n    );\n  }\n}\n\nfunction findYulScopePointer(node, pointer, base, basePointer) {\n  //walk upward until we find a YulBlock or YulFunctionDefinition,\n  //with a special case for YulForLoop\n  debug(\"pointer: %s\", pointer);\n  debug(\"basePointer: %s\", basePointer);\n  let relativePointer = pointer.slice(basePointer.length);\n  debug(\"relativePointer: %s\", relativePointer);\n  let relativeParentPointer = relativePointer.replace(/\\/[^/]*$/, \"\"); //chop off last element\n  let parentPointer = basePointer + relativeParentPointer; //make it absolute again\n  debug(\"parentPointer: %s\", parentPointer);\n  let parent = jsonpointer.get(base, relativeParentPointer);\n  //NOTE: if node === base, then we'll just get parent = node,\n  //but that's fine, since we necessarily have base.nodeType === \"YulBlock\"\n  //(and the real parent of base is certainly not a for loop!)\n  if (node.nodeType === \"YulBlock\") {\n    if (parent.nodeType === \"YulForLoop\") {\n      if (pointer === `${parentPointer}/pre`) {\n        //variables declared in the pre block of a for loop\n        //are visible across the entire for loop\n        return parentPointer;\n      } else {\n        return pointer;\n      }\n    } else {\n      return pointer;\n    }\n  } else if (node.nodeType === \"YulFunctionDefinition\") {\n    return pointer;\n  } else {\n    return findYulScopePointer(parent, parentPointer, base, basePointer);\n  }\n}\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport data from \"lib/data/reducers\";\nimport evm from \"lib/evm/reducers\";\nimport solidity from \"lib/solidity/reducers\";\nimport trace from \"lib/trace/reducers\";\nimport controller from \"lib/controller/reducers\";\nimport stacktrace from \"lib/stacktrace/reducers\";\n\nimport * as actions from \"./actions\";\n\nfunction ready(state = false, action) {\n  switch (action.type) {\n    case actions.READY:\n      debug(\"readying\");\n      return true;\n\n    case actions.WAIT:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction lastLoadingError(state = null, action) {\n  switch (action.type) {\n    case actions.ERROR:\n      debug(\"error: %o\", action.error);\n      return action.error;\n\n    case actions.WAIT:\n      return null;\n\n    default:\n      return state;\n  }\n}\n\nfunction transaction(state = {}, action) {\n  switch (action.type) {\n    case actions.SAVE_TRANSACTION:\n      return action.transaction;\n    case actions.UNLOAD_TRANSACTION:\n      return {};\n    default:\n      return state;\n  }\n}\n\nfunction receipt(state = {}, action) {\n  switch (action.type) {\n    case actions.SAVE_RECEIPT:\n      return action.receipt;\n    case actions.UNLOAD_TRANSACTION:\n      return {};\n    default:\n      return state;\n  }\n}\n\nfunction block(state = {}, action) {\n  switch (action.type) {\n    case actions.SAVE_BLOCK:\n      return action.block;\n    case actions.UNLOAD_TRANSACTION:\n      return {};\n    default:\n      return state;\n  }\n}\n\nfunction lightMode(state = false, action) {\n  switch (action.type) {\n    case actions.SET_LIGHT_MODE:\n      return true;\n    case actions.SET_FULL_MODE:\n      return false;\n    default:\n      return state;\n  }\n}\n\nconst session = combineReducers({\n  ready,\n  lastLoadingError,\n  transaction,\n  receipt,\n  block,\n  lightMode\n});\n\nconst reduceState = combineReducers({\n  session,\n  data,\n  evm,\n  solidity,\n  stacktrace,\n  trace,\n  controller\n});\n\nexport default reduceState;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nimport * as Codec from \"@truffle/codec\";\nimport { makeAssignment, makePath } from \"lib/helpers\";\n\nconst DEFAULT_SCOPES = {\n  byCompilationId: {}\n};\n\nfunction scopes(state = DEFAULT_SCOPES, action) {\n  let scope;\n  let newState;\n  let variables;\n\n  switch (action.type) {\n    case actions.SCOPE: {\n      const { compilationId, id, sourceId, parentId, pointer } = action;\n      const astRef = id !== undefined ? id : makePath(sourceId, pointer);\n      //astRef is used throughout the data saga.\n      //it identifies an AST node within a given compilation either by:\n      //1. its ast ID, if it has one, or\n      //2. a combination of its source index and its JSON pointer if not\n\n      newState = {\n        byCompilationId: {\n          ...state.byCompilationId,\n          [compilationId]: {\n            ...state.byCompilationId[compilationId] //just setting this up to avoid errors later\n          }\n        }\n      };\n\n      //apologies for this multi-stage setup, but JS is like that...\n\n      newState.byCompilationId[compilationId] = {\n        ...newState.byCompilationId[compilationId],\n        byAstRef: {\n          ...newState.byCompilationId[compilationId].byAstRef\n        }\n      };\n\n      scope = newState.byCompilationId[compilationId].byAstRef[astRef];\n\n      newState.byCompilationId[compilationId].byAstRef[astRef] = {\n        ...scope,\n        id,\n        sourceId,\n        parentId, //may be null or undefined\n        pointer,\n        compilationId\n      };\n\n      return newState;\n    }\n\n    case actions.DECLARE: {\n      let { compilationId, name, astRef, scopeAstRef } = action;\n\n      //note: we can assume the compilation already exists!\n      scope = state.byCompilationId[compilationId].byAstRef[scopeAstRef] || {};\n      variables = scope.variables || [];\n\n      return {\n        byCompilationId: {\n          ...state.byCompilationId,\n          [compilationId]: {\n            ...state.byCompilationId[compilationId],\n            byAstRef: {\n              ...state.byCompilationId[compilationId].byAstRef,\n\n              [scopeAstRef]: {\n                ...scope,\n\n                variables: [\n                  ...variables,\n\n                  {\n                    name,\n                    astRef,\n                    compilationId\n                  }\n                ]\n              }\n            }\n          }\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\n//a note on the following reducer: solidity assigns a unique AST ID to every\n//AST node among all the files being compiled together.  thus, it is, for now,\n//safe to identify user-defined types solely by their AST ID.  In the future,\n//once we eventually support having some files compiled separately from others,\n//this will become a bug you'll have to fix, and you'll have to fix it in the\n//decoder, too.  Sorry, future me! (or whoever's stuck doing this)\n\nfunction userDefinedTypes(state = [], action) {\n  switch (action.type) {\n    case actions.DEFINE_TYPE:\n      return [\n        ...state,\n        { id: action.node.id, compilationId: action.compilationId }\n      ];\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_ALLOCATIONS = {\n  storage: {},\n  memory: {},\n  abi: {},\n  state: {}\n};\n\nfunction allocations(state = DEFAULT_ALLOCATIONS, action) {\n  if (action.type === actions.ALLOCATE) {\n    return {\n      storage: action.storage,\n      memory: action.memory,\n      abi: action.abi,\n      calldata: action.calldata,\n      state: action.state\n    };\n  } else {\n    return state; //not to be confused with action.state!\n  }\n}\n\nconst info = combineReducers({\n  scopes,\n  userDefinedTypes,\n  allocations\n});\n\nconst GLOBAL_ASSIGNMENTS = [\n  [{ builtin: \"msg\" }, { location: \"special\", special: \"msg\" }],\n  [{ builtin: \"tx\" }, { location: \"special\", special: \"tx\" }],\n  [{ builtin: \"block\" }, { location: \"special\", special: \"block\" }],\n  [{ builtin: \"this\" }, { location: \"special\", special: \"this\" }],\n  [{ builtin: \"now\" }, { location: \"special\", special: \"timestamp\" }] //we don't have an alias \"now\"\n].map(([idObj, ref]) => makeAssignment(idObj, ref));\n\nconst DEFAULT_ASSIGNMENTS = {\n  byId: Object.assign(\n    {}, //we start out with all globals assigned\n    ...GLOBAL_ASSIGNMENTS.map(assignment => ({ [assignment.id]: assignment }))\n  ),\n  byCompilationId: {}, //no regular variables assigned at start\n  byBuiltin: Object.assign(\n    {}, //again, all globals start assigned\n    ...GLOBAL_ASSIGNMENTS.map(assignment => ({\n      [assignment.builtin]: [assignment.id] //yes, that's a 1-element array\n    }))\n  )\n};\n\nfunction assignments(state = DEFAULT_ASSIGNMENTS, action) {\n  switch (action.type) {\n    case actions.ASSIGN:\n    case actions.MAP_PATH_AND_ASSIGN:\n      debug(\"action.type %O\", action.type);\n      debug(\"action.assignments %O\", action.assignments);\n      return Object.values(action.assignments).reduce((acc, assignment) => {\n        let { id, astRef, compilationId } = assignment;\n        //we assume for now that only ordinary variables will be assigned this\n        //way, and not globals; globals are handled in DEFAULT_ASSIGNMENTS\n        return {\n          ...acc,\n          byId: {\n            ...acc.byId,\n            [id]: assignment\n          },\n          byCompilationId: {\n            ...acc.byCompilationId,\n            [compilationId]: {\n              ...acc.byCompilationId[compilationId],\n              byAstRef: {\n                ...(acc.byCompilationId[compilationId] || {}).byAstRef,\n                [astRef]: [\n                  ...new Set([\n                    ...(((acc.byCompilationId[compilationId] || {}).byAstRef ||\n                      {})[astRef] || []),\n                    id\n                  ])\n                ]\n              }\n            }\n          }\n        };\n      }, state);\n\n    case actions.RESET:\n      return DEFAULT_ASSIGNMENTS;\n\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_PATHS = {\n  byAddress: {}\n};\n\n//WARNING: do *not* rely on mappedPaths to keep track of paths that do not\n//involve mapping keys!  Yes, many will get mapped, but there is no guarantee.\n//Only when mapping keys are involved does it necessarily work reliably --\n//which is fine, as that's all we need it for.\nfunction mappedPaths(state = DEFAULT_PATHS, action) {\n  switch (action.type) {\n    case actions.MAP_PATH_AND_ASSIGN:\n      let { address, slot, typeIdentifier, parentType } = action;\n      //how this case works: first, we find the spot in our table (based on\n      //address, type identifier, and slot address) where the new entry should\n      //be added; if needed we set up all the objects needed along the way.  If\n      //there's already something there, we do nothing.  If there's nothing\n      //there, we record our given slot in that spot in that table -- however,\n      //we alter it in one key way.  Before entry, we check if the slot's\n      //*parent* has a spot in the table, based on address (same for both child\n      //and parent), parentType, and the parent's slot address (which can be\n      //found as the slotAddress of the slot's path object, if it exists -- if\n      //it doesn't then we conclude that no the parent does not have a spot in\n      //the table).  If the parent has a slot in the table already, then we\n      //alter the child slot by replacing its path with the parent slot.  This\n      //will keep the slotAddress the same, but since the versions kept in the\n      //table here are supposed to preserve path information, we'll be\n      //replacing a fairly bare-bones Slot object with one with a full path.\n\n      //we do NOT want to distinguish between types with and without \"_ptr\" on\n      //the end here! (or _slice)\n      debug(\"typeIdentifier %s\", typeIdentifier);\n      typeIdentifier = Codec.Ast.Utils.regularizeTypeIdentifier(typeIdentifier);\n      parentType = Codec.Ast.Utils.regularizeTypeIdentifier(parentType);\n\n      debug(\"slot %o\", slot);\n      let hexSlotAddress = Codec.Conversion.toHexString(\n        Codec.Storage.Utils.slotAddress(slot),\n        Codec.Evm.Utils.WORD_SIZE\n      );\n      let parentAddress = slot.path\n        ? Codec.Conversion.toHexString(\n            Codec.Storage.Utils.slotAddress(slot.path),\n            Codec.Evm.Utils.WORD_SIZE\n          )\n        : undefined;\n\n      //this is going to be messy and procedural, sorry.  but let's start with\n      //the easy stuff: create the new address if needed, clone if not\n      let newState = {\n        ...state,\n        byAddress: {\n          ...state.byAddress,\n          [address]: {\n            byType: {\n              ...(state.byAddress[address] || { byType: {} }).byType\n            }\n          }\n        }\n      };\n\n      //now, let's add in the new type, if needed\n      newState.byAddress[address].byType = {\n        ...newState.byAddress[address].byType,\n        [typeIdentifier]: {\n          bySlotAddress: {\n            ...(\n              newState.byAddress[address].byType[typeIdentifier] || {\n                bySlotAddress: {}\n              }\n            ).bySlotAddress\n          }\n        }\n      };\n\n      let oldSlot =\n        newState.byAddress[address].byType[typeIdentifier].bySlotAddress[\n          hexSlotAddress\n        ];\n      //yes, this looks strange, but we haven't changed it yet except to\n      //clone or create empty (and we don't want undefined!)\n      //now: is there something already there or no?  if no, we must add\n      if (oldSlot === undefined) {\n        let newSlot;\n        debug(\"parentAddress %o\", parentAddress);\n        if (\n          parentAddress !== undefined &&\n          newState.byAddress[address].byType[parentType] &&\n          newState.byAddress[address].byType[parentType].bySlotAddress[\n            parentAddress\n          ]\n        ) {\n          //if the parent is already present, use that instead of the given\n          //parent!\n          newSlot = {\n            ...slot,\n            path:\n              newState.byAddress[address].byType[parentType].bySlotAddress[\n                parentAddress\n              ]\n          };\n        } else {\n          newSlot = slot;\n        }\n        newState.byAddress[address].byType[typeIdentifier].bySlotAddress[\n          hexSlotAddress\n        ] = newSlot;\n      }\n      //if there's already something there, we don't need to do anything\n\n      return newState;\n\n    case actions.RESET:\n      return DEFAULT_PATHS;\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  assignments,\n  mappedPaths\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\nimport * as Codec from \"@truffle/codec\";\n\nimport BN from \"bn.js\";\n\nconst DEFAULT_CONTEXTS = {\n  byContext: {}\n};\n\nfunction contexts(state = DEFAULT_CONTEXTS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new context\n     */\n    case actions.ADD_CONTEXT:\n      const {\n        context,\n        contractName,\n        binary,\n        sourceMap,\n        primarySource,\n        immutableReferences,\n        compiler,\n        compilationId,\n        abi,\n        contractId,\n        contractKind,\n        isConstructor,\n        externalSolidity\n      } = action;\n      debug(\"action %O\", action);\n\n      return {\n        ...state,\n        byContext: {\n          ...state.byContext,\n          [context]: {\n            context,\n            contractName,\n            context,\n            binary,\n            sourceMap,\n            primarySource,\n            immutableReferences,\n            compiler,\n            compilationId,\n            abi,\n            contractId,\n            contractKind,\n            isConstructor,\n            externalSolidity,\n            payable: Codec.AbiData.Utils.abiHasPayableFallback(abi)\n          }\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  contexts\n});\n\nconst DEFAULT_TX = {\n  gasprice: new BN(0),\n  origin: Codec.Evm.Utils.ZERO_ADDRESS\n};\n\nfunction tx(state = DEFAULT_TX, action) {\n  switch (action.type) {\n    case actions.SAVE_GLOBALS:\n      let { gasprice, origin } = action;\n      return { gasprice, origin };\n    case actions.UNLOAD_TRANSACTION:\n      return DEFAULT_TX;\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_BLOCK = {\n  coinbase: Codec.Evm.Utils.ZERO_ADDRESS,\n  difficulty: new BN(0),\n  gaslimit: new BN(0),\n  number: new BN(0),\n  timestamp: new BN(0)\n};\n\nfunction block(state = DEFAULT_BLOCK, action) {\n  switch (action.type) {\n    case actions.SAVE_GLOBALS:\n      return action.block;\n    case actions.UNLOAD_TRANSACTION:\n      return DEFAULT_BLOCK;\n    default:\n      return state;\n  }\n}\n\nconst globals = combineReducers({\n  tx,\n  block\n});\n\nfunction status(state = null, action) {\n  switch (action.type) {\n    case actions.SAVE_STATUS:\n      return action.status;\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nfunction initialCall(state = null, action) {\n  switch (action.type) {\n    case actions.CALL:\n    case actions.CREATE:\n      //we only want to save the initial call, so return\n      //the current state if it's not null\n      if (state !== null) {\n        return state;\n      } else {\n        //we'll just store the action itself in the state\n        return action;\n      }\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nconst transaction = combineReducers({\n  globals,\n  status,\n  initialCall\n});\n\nfunction callstack(state = [], action) {\n  switch (action.type) {\n    case actions.CALL: {\n      const { address, data, storageAddress, sender, value } = action;\n      return state.concat([{ address, data, storageAddress, sender, value }]);\n    }\n\n    case actions.CREATE: {\n      const { binary, storageAddress, sender, value } = action;\n      return state.concat(\n        [{ binary, data: \"0x\", storageAddress, sender, value }]\n        //the empty data field is to make msg.data and msg.sig come out right\n      );\n    }\n\n    case actions.RETURN_CALL:\n    case actions.RETURN_CREATE:\n    case actions.FAIL:\n      //pop the stack... unless (HACK) that would leave it empty (this will\n      //only happen at the end when we want to keep the last one around)\n      return state.length > 1 ? state.slice(0, -1) : state;\n\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_CODEX = [\n  {\n    accounts: {}\n    //will be more here in the future!\n  }\n];\n\nfunction codex(state = DEFAULT_CODEX, action) {\n  let newState, topCodex;\n\n  const updateFrameStorage = (frame, address, slot, value) => ({\n    ...frame,\n    accounts: {\n      ...frame.accounts,\n      [address]: {\n        code: \"0x\", //this will get overridden if it already exists!\n        context: null, //similarly!\n        ...frame.accounts[address], //may be undefined\n        storage: {\n          ...(frame.accounts[address] || {}).storage, //may be undefined\n          [slot]: value\n        }\n      }\n    }\n  });\n  //(note that {...undefined} just expands to {} and is OK)\n\n  const updateFrameCode = (frame, address, code, context) => {\n    let existingPage = frame.accounts[address] || { storage: {} };\n    return {\n      ...frame,\n      accounts: {\n        ...frame.accounts,\n        [address]: {\n          ...existingPage,\n          code: code,\n          context: context\n        }\n      }\n    };\n  };\n\n  //later: will add \"force\" parameter\n  const safePop = array => (array.length > 2 ? array.slice(0, -1) : array);\n\n  //later: will add \"force\" parameter\n  const safeSave = array =>\n    array.length > 2\n      ? array.slice(0, -2).concat([array[array.length - 1]])\n      : array;\n\n  switch (action.type) {\n    case actions.CALL:\n      debug(\"call action\");\n      debug(\"codex: %O\", state);\n      //on a call, we can just make a new stackframe by cloning the top\n      //stackframe; there should already be an account for the address we're\n      //calling into, so we don't need to make one\n      return [...state, state[state.length - 1]];\n\n    case actions.CREATE:\n      debug(\"create action\");\n      //on a create, make a new stackframe, then add a new pages to the\n      //codex if necessary; don't add a zero page though (or pages that already\n      //exist)\n\n      //first, add a new stackframe by cloning the top one\n      newState = [...state, state[state.length - 1]];\n      topCodex = newState[newState.length - 1];\n      //now, do we need to add a new address to this stackframe?\n      if (\n        topCodex.accounts[action.storageAddress] !== undefined ||\n        action.storageAddress === Codec.Evm.Utils.ZERO_ADDRESS\n      ) {\n        //if we don't\n        return newState;\n      }\n      //if we do\n      newState[newState.length - 1] = {\n        ...topCodex,\n        accounts: {\n          ...topCodex.accounts,\n          [action.storageAddress]: {\n            storage: {},\n            code: \"0x\",\n            context: null\n            //there will be more here in the future!\n          }\n        }\n      };\n      return newState;\n\n    case actions.STORE: {\n      debug(\"store action\");\n      //on a store, the relevant page should already exist, so we can just\n      //add or update the needed slot\n      const { address, slot, value } = action;\n      if (address === Codec.Evm.Utils.ZERO_ADDRESS) {\n        //as always, we do not maintain a zero page\n        return state;\n      }\n      newState = state.slice(); //clone the state\n      topCodex = newState[newState.length - 1];\n      newState[newState.length - 1] = updateFrameStorage(\n        topCodex,\n        address,\n        slot,\n        value\n      );\n      return newState;\n    }\n\n    case actions.LOAD: {\n      debug(\"load action\");\n      //loads are a little more complicated -- usually we do nothing, but if\n      //it's an external load (there was nothing already there), then we want\n      //to update *every* stackframe\n      const { address, slot, value } = action;\n      if (address === Codec.Evm.Utils.ZERO_ADDRESS) {\n        //as always, we do not maintain a zero page\n        return state;\n      }\n      topCodex = state[state.length - 1];\n      if (topCodex.accounts[address].storage[slot] !== undefined) {\n        //if we already have a value in the *top* stackframe, update *no*\n        //stackframes; don't update the top (no need, it's just a load, not a\n        //store), don't update the rest (that would be wrong, you might be\n        //loading a value that will get reverted later)\n        return state;\n      } else {\n        //if we *don't* already have a value in the top stackframe, that means\n        //we're loading a value from a previous transaction!  That's not a\n        //value that will get reverted if this call fails, so update *every*\n        //stackframe\n        return state.map(frame =>\n          updateFrameStorage(frame, address, slot, value)\n        );\n      }\n    }\n\n    case actions.RETURN_CALL:\n      debug(\"return from call\");\n      //we want to pop the top while making the new top a copy of the old top;\n      //that is to say, we want to drop just the element *second* from the top\n      //NOTE: we don't ever go down to 1 element!\n      return safeSave(state);\n\n    case actions.RETURN_CREATE: {\n      debug(\"return from create\");\n      //we're going to do the same things in this case as in the usual return\n      //case, but first we need to record the code that was returned\n      const { address, code, context } = action;\n      newState = state.slice(); //clone the state\n      //NOTE: since this is only for RETURN_CREATE, and not FAIL, we shouldn't\n      //have to worry about accidentally getting a zero address here\n      newState[newState.length - 1] = updateFrameCode(\n        newState[newState.length - 1],\n        address,\n        code,\n        context\n      );\n      debug(\"newState: %O\", newState);\n      return safeSave(newState);\n    }\n\n    case actions.FAIL:\n      debug(\"fail action\");\n      //pop the stack\n      //NOTE: we don't ever go down to 1 element!\n      return safePop(state);\n\n    case actions.RESET:\n      debug(\"reset action\");\n      return [state[0]]; //leave the -1 frame on the stack\n\n    case actions.UNLOAD_TRANSACTION:\n      debug(\"unload action\");\n      return DEFAULT_CODEX;\n\n    case actions.ADD_INSTANCE: {\n      //add the instance to every frame\n      //(this is a little HACKy, but it *should* be fine)\n      debug(\"adding instance\");\n      const { address, binary, context } = action;\n      return state.map(frame =>\n        updateFrameCode(frame, address, binary, context)\n      );\n    }\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  callstack,\n  codex\n});\n\nconst reducer = combineReducers({\n  info,\n  transaction,\n  proc\n});\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SOURCES = {\n  byCompilationId: {} //by compilation, then in an array\n};\n\nfunction sources(state = DEFAULT_SOURCES, action) {\n  switch (action.type) {\n    /*\n     * Adding new sources\n     */\n    case actions.ADD_SOURCES:\n      //NOTE: this code assumes that we are only ever adding compilations\n      //wholesale, and never adding to existing ones!\n      return {\n        byCompilationId: {\n          ...state.byCompilationId,\n          ...Object.assign(\n            {},\n            ...Object.entries(action.compilations).map(([id, compilation]) => ({\n              [id]: {\n                byId: compilation\n              }\n            }))\n          )\n        }\n      };\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  sources\n});\n\nfunction functionDepthStack(state = [], action) {\n  switch (action.type) {\n    case actions.JUMP:\n      let newState = state.slice(); //clone the state\n      const delta = spelunk(action.jumpDirection);\n      let top = newState[newState.length - 1];\n      let belowTop = newState.length > 1 ? newState[newState.length - 2] : -1;\n      newState[newState.length - 1] = Math.max(top + delta, belowTop + 1);\n      return newState;\n\n    case actions.RESET:\n      return [0];\n\n    case actions.UNLOAD_TRANSACTION:\n      return [];\n\n    case actions.EXTERNAL_CALL:\n      if (state.length === 0) {\n        return [0];\n      }\n      return [...state, state[state.length - 1] + 1];\n\n    case actions.EXTERNAL_RETURN:\n      //just pop the stack! unless, HACK, that would leave it empty\n      return state.length > 1 ? state.slice(0, -1) : state;\n\n    default:\n      return state;\n  }\n}\n\nfunction nextFrameIsPhantom(state = null, action) {\n  switch (action.type) {\n    case actions.CLEAR_PHANTOM_GUARD:\n      return false;\n    case actions.EXTERNAL_RETURN:\n      return false;\n    case actions.EXTERNAL_CALL:\n      return action.guard;\n    case actions.RESET:\n      return action.guard;\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nfunction spelunk(jump) {\n  if (jump === \"i\") {\n    return 1;\n  } else if (jump === \"o\") {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst proc = combineReducers({\n  functionDepthStack,\n  nextFrameIsPhantom\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nfunction index(state = 0, action) {\n  switch (action.type) {\n    case actions.TOCK:\n      return state + 1;\n\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return 0;\n\n    default:\n      return state;\n  }\n}\n\nfunction finished(state = false, action) {\n  switch (action.type) {\n    case actions.END_OF_TRACE:\n      return true;\n\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction steps(state = null, action) {\n  switch (action.type) {\n    case actions.SAVE_STEPS:\n      return action.steps;\n    case actions.UNLOAD_TRANSACTION:\n      debug(\"unloading\");\n      return null;\n    default:\n      return state;\n  }\n}\n\nfunction submoduleCount(state = 0, action) {\n  switch (action.type) {\n    case actions.SET_SUBMODULE_COUNT:\n      return action.count;\n    default:\n      return state;\n  }\n}\n\nconst transaction = combineReducers({\n  steps\n});\n\nconst proc = combineReducers({\n  index,\n  finished\n});\n\nconst application = combineReducers({\n  submoduleCount\n});\n\nconst reducer = combineReducers({\n  transaction,\n  proc,\n  application\n});\n\nexport default reducer;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nfunction breakpoints(state = [], action) {\n  switch (action.type) {\n    case actions.ADD_BREAKPOINT:\n      //check for any existing identical breakpoints to avoid redundancy\n      if (\n        state.filter(\n          breakpoint =>\n            breakpoint.compilationId === action.breakpoint.compilationId &&\n            breakpoint.sourceId === action.breakpoint.sourceId &&\n            breakpoint.line === action.breakpoint.line &&\n            breakpoint.node === action.breakpoint.node //may be undefined\n        ).length > 0\n      ) {\n        //if it's already there, do nothing\n        return state;\n      } else {\n        //otherwise add it\n        return state.concat([action.breakpoint]);\n      }\n      break;\n\n    case actions.REMOVE_BREAKPOINT:\n      return state.filter(\n        breakpoint =>\n          breakpoint.compilationId !== action.breakpoint.compilationId ||\n          breakpoint.sourceId !== action.breakpoint.sourceId ||\n          breakpoint.line !== action.breakpoint.line ||\n          breakpoint.node !== action.breakpoint.node //may be undefined\n      );\n      break;\n\n    case actions.REMOVE_ALL_BREAKPOINTS:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nfunction isStepping(state = false, action) {\n  switch (action.type) {\n    case actions.START_STEPPING:\n      debug(\"got step start action\");\n      return true;\n    case actions.DONE_STEPPING:\n      debug(\"got step stop action\");\n      return false;\n    default:\n      return state;\n  }\n}\n\nconst reducer = combineReducers({\n  breakpoints,\n  isStepping\n});\n\nexport default reducer;\n","import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:stacktrace:reducers\");\n\nimport { combineReducers } from \"redux\";\nimport { popNWhere } from \"lib/helpers\";\n\nimport * as actions from \"./actions\";\n\nfunction callstack(state = [], action) {\n  let newFrame;\n  switch (action.type) {\n    case actions.JUMP_IN:\n      let { location, functionNode, contractNode } = action;\n      newFrame = {\n        type: \"internal\",\n        calledFromLocation: location,\n        address: state[state.length - 1].address,\n        functionName:\n          functionNode &&\n          (functionNode.nodeType === \"FunctionDefinition\" ||\n            functionNode.nodeType === \"YulFunctionDefinition\")\n            ? functionNode.name\n            : undefined,\n        contractName:\n          contractNode && contractNode.nodeType === \"ContractDefinition\"\n            ? contractNode.name\n            : undefined,\n        //note we don't currently account for getters because currently\n        //we can't; fallback, receive, constructors, & modifiers also remain\n        //unaccounted for at present\n        //(none of these things have associated jump-in markings!)\n      };\n      return [...state, newFrame];\n    case actions.JUMP_OUT:\n      let top = state[state.length - 1];\n      if (top && top.type === \"internal\") {\n        return state.slice(0, -1);\n      } else {\n        return state;\n      }\n    case actions.EXTERNAL_CALL:\n      newFrame = {\n        type: \"external\",\n        address: action.address,\n        calledFromLocation: action.location,\n        functionName: undefined,\n        contractName: action.context.contractName,\n      };\n      return [...state, newFrame];\n    case actions.EXECUTE_RETURN:\n      return popNWhere(\n        state,\n        action.counter,\n        (frame) => frame.type === \"external\"\n      );\n    case actions.RESET:\n      return [state[0]];\n    case actions.UNLOAD_TRANSACTION:\n      return [];\n    default:\n      //note that we don't do anything on EXTERNAL_RETURN!\n      //the callstack only changes on EXECUTE_RETURN!\n      return state;\n  }\n}\n\nfunction returnCounter(state = 0, action) {\n  switch (action.type) {\n    case actions.EXTERNAL_RETURN:\n      return state + 1;\n    case actions.EXECUTE_RETURN:\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return 0;\n    default:\n      return state;\n  }\n}\n\nfunction lastPosition(state = null, action) {\n  switch (action.type) {\n    case actions.JUMP_IN:\n    case actions.JUMP_OUT:\n    case actions.ETERNAL_CALL:\n    case actions.EXTERNAL_RETURN:\n    case actions.UPDATE_POSITION:\n    case actions.EXECUTE_RETURN:\n      const { location } = action;\n      if (location.source.id === undefined) {\n        //don't update for unmapped!\n        return state;\n      }\n      return location;\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nfunction innerReturnPosition(state = null, action) {\n  switch (action.type) {\n    case actions.EXTERNAL_RETURN:\n      //we want the innermost return, so don't update\n      //this if it's not presently null\n      return state || action.from;\n    case actions.EXECUTE_RETURN:\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nfunction innerReturnStatus(state = null, action) {\n  switch (action.type) {\n    case actions.EXTERNAL_RETURN:\n      //we want the innermost return, so don't update\n      //this if it's not presently null\n      return state === null ? action.status : state;\n    case actions.EXECUTE_RETURN:\n    case actions.RESET:\n    case actions.UNLOAD_TRANSACTION:\n      return null;\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  callstack,\n  returnCounter,\n  lastPosition,\n  innerReturnPosition,\n  innerReturnStatus,\n});\n\nconst reducer = combineReducers({\n  proc,\n});\n\nexport default reducer;\n","module.exports = require(\"@truffle/compile-solidity/legacy/shims\");"],"sourceRoot":""},"metadata":{},"sourceType":"script"}