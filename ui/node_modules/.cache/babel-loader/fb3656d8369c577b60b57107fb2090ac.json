{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readDefinition = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:ast:read\");\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nvar Ast = __importStar(require(\"../../ast\"));\n\nvar errors_1 = require(\"../../errors\");\n\nfunction readDefinition(pointer) {\n  var definition = pointer.definition;\n  debug(\"definition %o\", definition);\n\n  switch (Ast.Utils.typeClass(definition)) {\n    case \"rational\":\n      var numericalValue = Ast.Utils.rationalValue(definition);\n      return Conversion.toBytes(numericalValue, Evm.Utils.WORD_SIZE);\n    //you may be wondering, why do we not just use definition.value here,\n    //like we do below? answer: because if this isn't a literal, that may not\n    //exist\n\n    case \"stringliteral\":\n      return Conversion.toBytes(definition.hexValue);\n\n    default:\n      //unfortunately, other types of constants are just too complicated to\n      //handle right now.  sorry.\n      debug(\"unsupported constant definition type\");\n      throw new errors_1.DecodingError({\n        kind: \"UnsupportedConstantError\",\n        definition: definition\n      });\n  }\n}\n\nexports.readDefinition = readDefinition;","map":{"version":3,"sources":["../../../../lib/ast-constant/read/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,gBAAZ,CAAd;;AAEA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAGA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,SAAgB,cAAhB,CACE,OADF,EAC4C;AAE1C,MAAM,UAAU,GAAG,OAAO,CAAC,UAA3B;AACA,EAAA,KAAK,CAAC,eAAD,EAAkB,UAAlB,CAAL;;AAEA,UAAQ,GAAG,CAAC,KAAJ,CAAU,SAAV,CAAoB,UAApB,CAAR;AACE,SAAK,UAAL;AACE,UAAI,cAAc,GAAO,GAAG,CAAC,KAAJ,CAAU,aAAV,CAAwB,UAAxB,CAAzB;AACA,aAAO,UAAU,CAAC,OAAX,CAAmB,cAAnB,EAAmC,GAAG,CAAC,KAAJ,CAAU,SAA7C,CAAP;AACF;AACA;AACA;;AACA,SAAK,eAAL;AACE,aAAO,UAAU,CAAC,OAAX,CAAmB,UAAU,CAAC,QAA9B,CAAP;;AACF;AACE;AACA;AACA,MAAA,KAAK,CAAC,sCAAD,CAAL;AACA,YAAM,IAAI,QAAA,CAAA,aAAJ,CAAkB;AACtB,QAAA,IAAI,EAAE,0BADgB;AAEtB,QAAA,UAAU,EAAV;AAFsB,OAAlB,CAAN;AAbJ;AAkBD;;AAxBD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readDefinition = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:ast:read\");\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst Evm = __importStar(require(\"../../evm\"));\nconst Ast = __importStar(require(\"../../ast\"));\nconst errors_1 = require(\"../../errors\");\nfunction readDefinition(pointer) {\n    const definition = pointer.definition;\n    debug(\"definition %o\", definition);\n    switch (Ast.Utils.typeClass(definition)) {\n        case \"rational\":\n            let numericalValue = Ast.Utils.rationalValue(definition);\n            return Conversion.toBytes(numericalValue, Evm.Utils.WORD_SIZE);\n        //you may be wondering, why do we not just use definition.value here,\n        //like we do below? answer: because if this isn't a literal, that may not\n        //exist\n        case \"stringliteral\":\n            return Conversion.toBytes(definition.hexValue);\n        default:\n            //unfortunately, other types of constants are just too complicated to\n            //handle right now.  sorry.\n            debug(\"unsupported constant definition type\");\n            throw new errors_1.DecodingError({\n                kind: \"UnsupportedConstantError\",\n                definition\n            });\n    }\n}\nexports.readDefinition = readDefinition;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}