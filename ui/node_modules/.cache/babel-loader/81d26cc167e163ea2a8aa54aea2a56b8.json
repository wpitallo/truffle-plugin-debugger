{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byteLength = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:basic:allocate\");\n\nvar Common = __importStar(require(\"../../common\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nvar Format = __importStar(require(\"../../format\")); //only for direct types!\n\n\nfunction byteLength(dataType, userDefinedTypes) {\n  switch (dataType.typeClass) {\n    case \"bool\":\n      return 1;\n\n    case \"address\":\n    case \"contract\":\n      return Evm.Utils.ADDRESS_SIZE;\n\n    case \"int\":\n    case \"uint\":\n    case \"fixed\":\n    case \"ufixed\":\n      return dataType.bits / 8;\n\n    case \"function\":\n      switch (dataType.visibility) {\n        case \"internal\":\n          return Evm.Utils.PC_SIZE * 2;\n\n        case \"external\":\n          return Evm.Utils.ADDRESS_SIZE + Evm.Utils.SELECTOR_SIZE;\n      }\n\n    case \"bytes\":\n      //we assume we're in the static case\n      return dataType.length;\n\n    case \"enum\":\n      //the only complex case!\n      var storedType = userDefinedTypes[dataType.id];\n\n      if (!storedType.options) {\n        throw new Common.UnknownUserDefinedTypeError(dataType.id, Format.Types.typeString(dataType));\n      }\n\n      var numValues = storedType.options.length;\n      return Math.ceil(Math.log2(numValues) / 8);\n  }\n}\n\nexports.byteLength = byteLength;","map":{"version":3,"sources":["../../../../lib/basic/allocate/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,sBAAZ,CAAd;;AAEA,IAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,C,CAEA;;;AACA,SAAgB,UAAhB,CACE,QADF,EAEE,gBAFF,EAE2C;AAEzC,UAAQ,QAAQ,CAAC,SAAjB;AACE,SAAK,MAAL;AACE,aAAO,CAAP;;AACF,SAAK,SAAL;AACA,SAAK,UAAL;AACE,aAAO,GAAG,CAAC,KAAJ,CAAU,YAAjB;;AACF,SAAK,KAAL;AACA,SAAK,MAAL;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACE,aAAO,QAAQ,CAAC,IAAT,GAAgB,CAAvB;;AACF,SAAK,UAAL;AACE,cAAQ,QAAQ,CAAC,UAAjB;AACE,aAAK,UAAL;AACE,iBAAO,GAAG,CAAC,KAAJ,CAAU,OAAV,GAAoB,CAA3B;;AACF,aAAK,UAAL;AACE,iBAAO,GAAG,CAAC,KAAJ,CAAU,YAAV,GAAyB,GAAG,CAAC,KAAJ,CAAU,aAA1C;AAJJ;;AAMF,SAAK,OAAL;AAAc;AACZ,aAAsC,QAAS,CAAC,MAAhD;;AACF,SAAK,MAAL;AAAa;AACX,UAAM,UAAU,GAA0B,gBAAgB,CAAC,QAAQ,CAAC,EAAV,CAA1D;;AACA,UAAI,CAAC,UAAU,CAAC,OAAhB,EAAyB;AACvB,cAAM,IAAI,MAAM,CAAC,2BAAX,CACJ,QAAQ,CAAC,EADL,EAEJ,MAAM,CAAC,KAAP,CAAa,UAAb,CAAwB,QAAxB,CAFI,CAAN;AAID;;AACD,UAAM,SAAS,GAAG,UAAU,CAAC,OAAX,CAAmB,MAArC;AACA,aAAO,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,CAAU,SAAV,IAAuB,CAAjC,CAAP;AA7BJ;AA+BD;;AAnCD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.byteLength = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:basic:allocate\");\nconst Common = __importStar(require(\"../../common\"));\nconst Evm = __importStar(require(\"../../evm\"));\nconst Format = __importStar(require(\"../../format\"));\n//only for direct types!\nfunction byteLength(dataType, userDefinedTypes) {\n    switch (dataType.typeClass) {\n        case \"bool\":\n            return 1;\n        case \"address\":\n        case \"contract\":\n            return Evm.Utils.ADDRESS_SIZE;\n        case \"int\":\n        case \"uint\":\n        case \"fixed\":\n        case \"ufixed\":\n            return dataType.bits / 8;\n        case \"function\":\n            switch (dataType.visibility) {\n                case \"internal\":\n                    return Evm.Utils.PC_SIZE * 2;\n                case \"external\":\n                    return Evm.Utils.ADDRESS_SIZE + Evm.Utils.SELECTOR_SIZE;\n            }\n        case \"bytes\": //we assume we're in the static case\n            return dataType.length;\n        case \"enum\": //the only complex case!\n            const storedType = userDefinedTypes[dataType.id];\n            if (!storedType.options) {\n                throw new Common.UnknownUserDefinedTypeError(dataType.id, Format.Types.typeString(dataType));\n            }\n            const numValues = storedType.options.length;\n            return Math.ceil(Math.log2(numValues) / 8);\n    }\n}\nexports.byteLength = byteLength;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}