{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBytes = void 0;\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar utf8_1 = __importDefault(require(\"utf8\")); //UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeBytes(input) {\n  switch (input.type.typeClass) {\n    case \"bytes\":\n      return Conversion.toBytes(input.value.asHex);\n\n    case \"string\":\n      {\n        var coercedInput = input;\n\n        switch (coercedInput.value.kind) {\n          case \"valid\":\n            return stringToBytes(coercedInput.value.asString);\n\n          case \"malformed\":\n            return Conversion.toBytes(coercedInput.value.asHex);\n        }\n      }\n  }\n}\n\nexports.encodeBytes = encodeBytes;\n/**\n * @Category Encoding (low-level)\n */\n\nfunction stringToBytes(input) {\n  input = utf8_1.default.encode(input);\n  var bytes = new Uint8Array(input.length);\n\n  for (var i = 0; i < input.length; i++) {\n    bytes[i] = input.charCodeAt(i);\n  }\n\n  return bytes; //NOTE: this will throw an error if the string contained malformed UTF-16!\n  //but, well, it shouldn't contain that...\n}","map":{"version":3,"sources":["../../../../lib/bytes/encode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,C,CAEA;AACA;AACA;;AAEA;;;;AAIG;;;AACH,SAAgB,WAAhB,CACE,KADF,EACoE;AAElE,UAAQ,KAAK,CAAC,IAAN,CAAW,SAAnB;AACE,SAAK,OAAL;AACE,aAAO,UAAU,CAAC,OAAX,CAA8C,KAAM,CAAC,KAAP,CAAa,KAA3D,CAAP;;AACF,SAAK,QAAL;AAAe;AACb,YAAI,YAAY,GACd,KADF;;AAGA,gBAAQ,YAAY,CAAC,KAAb,CAAmB,IAA3B;AACE,eAAK,OAAL;AACE,mBAAO,aAAa,CAAC,YAAY,CAAC,KAAb,CAAmB,QAApB,CAApB;;AACF,eAAK,WAAL;AACE,mBAAO,UAAU,CAAC,OAAX,CAAmB,YAAY,CAAC,KAAb,CAAmB,KAAtC,CAAP;AAJJ;AAMD;AAbH;AAeD;;AAlBD,OAAA,CAAA,WAAA,GAAA,WAAA;AAoBA;;AAEG;;AACH,SAAS,aAAT,CAAuB,KAAvB,EAAoC;AAClC,EAAA,KAAK,GAAG,MAAA,CAAA,OAAA,CAAK,MAAL,CAAY,KAAZ,CAAR;AACA,MAAI,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAK,CAAC,MAArB,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAX;AACD;;AACD,SAAO,KAAP,CANkC,CAOlC;AACA;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBytes = void 0;\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst utf8_1 = __importDefault(require(\"utf8\"));\n//UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\nfunction encodeBytes(input) {\n    switch (input.type.typeClass) {\n        case \"bytes\":\n            return Conversion.toBytes(input.value.asHex);\n        case \"string\": {\n            let coercedInput = (input);\n            switch (coercedInput.value.kind) {\n                case \"valid\":\n                    return stringToBytes(coercedInput.value.asString);\n                case \"malformed\":\n                    return Conversion.toBytes(coercedInput.value.asHex);\n            }\n        }\n    }\n}\nexports.encodeBytes = encodeBytes;\n/**\n * @Category Encoding (low-level)\n */\nfunction stringToBytes(input) {\n    input = utf8_1.default.encode(input);\n    let bytes = new Uint8Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n        bytes[i] = input.charCodeAt(i);\n    }\n    return bytes;\n    //NOTE: this will throw an error if the string contained malformed UTF-16!\n    //but, well, it shouldn't contain that...\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}