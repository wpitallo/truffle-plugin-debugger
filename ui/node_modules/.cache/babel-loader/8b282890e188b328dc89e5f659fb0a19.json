{"ast":null,"code":"import _defineProperty from\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var getDecodedValue=function getDecodedValue(inputObj){var typeClass=inputObj.type.typeClass;if(inputObj.error){return\"NA\";}if(typeClass===\"magic\"){var variable=inputObj.type.variable;if(variable===\"block\"||variable===\"message\"||variable===\"transaction\"){return inputObj.value;}}if(typeClass===\"contract\"){return inputObj.value.address;}if(typeClass===\"int\"||typeClass===\"uint\"){return inputObj.value.asBN.toString();// temporarily converting to string to handle big numbers\n}if(typeClass===\"bool\"){return inputObj.value.asBoolean;}if(typeClass===\"string\"){return inputObj.value.asString;}if(typeClass===\"bytes\"){return inputObj.value.asHex;}if(typeClass===\"address\"){return inputObj.value.asAddress;}if(typeClass===\"struct\"){var data=inputObj.value;var arrayOfObjects=data.map(function(_ref){var name=_ref.name,value=_ref.value;return _defineProperty({},name,getDecodedValue(value));});var mergedObject=arrayOfObjects.reduce(function(acc,curr){return Object.assign(acc,curr);},{});return mergedObject;}if(typeClass===\"array\"){var array=inputObj.value;var strArray=array.map(getDecodedValue);return strArray;}return\"\".concat(typeClass,\" is currently not supported\");};export default getDecodedValue;","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/src/utils/getDecodedValue.ts"],"names":["getDecodedValue","inputObj","typeClass","type","error","variable","value","address","asBN","toString","asBoolean","asString","asHex","asAddress","data","arrayOfObjects","map","name","mergedObject","reduce","acc","curr","Object","assign","array","strArray"],"mappings":"4NAAA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,QAAD,CAAmB,CACzC,GAAMC,CAAAA,SAAS,CAAGD,QAAQ,CAACE,IAAT,CAAcD,SAAhC,CAEA,GAAID,QAAQ,CAACG,KAAb,CAAoB,CAClB,MAAO,IAAP,CACD,CAED,GAAIF,SAAS,GAAK,OAAlB,CAA2B,CACzB,GAAMG,CAAAA,QAAgB,CAAGJ,QAAQ,CAACE,IAAT,CAAcE,QAAvC,CACA,GACEA,QAAQ,GAAK,OAAb,EACAA,QAAQ,GAAK,SADb,EAEAA,QAAQ,GAAK,aAHf,CAIE,CACA,MAAOJ,CAAAA,QAAQ,CAACK,KAAhB,CACD,CACF,CAED,GAAIJ,SAAS,GAAK,UAAlB,CAA8B,CAC5B,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeC,OAAtB,CACD,CAED,GAAIL,SAAS,GAAK,KAAd,EAAuBA,SAAS,GAAK,MAAzC,CAAiD,CAC/C,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeE,IAAf,CAAoBC,QAApB,EAAP,CAAuC;AACxC,CAED,GAAIP,SAAS,GAAK,MAAlB,CAA0B,CACxB,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeI,SAAtB,CACD,CAED,GAAIR,SAAS,GAAK,QAAlB,CAA4B,CAC1B,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeK,QAAtB,CACD,CAED,GAAIT,SAAS,GAAK,OAAlB,CAA2B,CACzB,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeM,KAAtB,CACD,CAED,GAAIV,SAAS,GAAK,SAAlB,CAA6B,CAC3B,MAAOD,CAAAA,QAAQ,CAACK,KAAT,CAAeO,SAAtB,CACD,CAED,GAAIX,SAAS,GAAK,QAAlB,CAA4B,CAC1B,GAAMY,CAAAA,IAAI,CAAGb,QAAQ,CAACK,KAAtB,CACA,GAAMS,CAAAA,cAAc,CAAGD,IAAI,CAACE,GAAL,CAAS,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASX,KAAT,MAASA,KAAT,2BAC7BW,IAD6B,CACtBjB,eAAe,CAACM,KAAD,CADO,GAAT,CAAvB,CAGA,GAAMY,CAAAA,YAAY,CAAGH,cAAc,CAACI,MAAf,CACnB,SAACC,GAAD,CAAWC,IAAX,QAAyBC,CAAAA,MAAM,CAACC,MAAP,CAAcH,GAAd,CAAmBC,IAAnB,CAAzB,EADmB,CAEnB,EAFmB,CAArB,CAIA,MAAOH,CAAAA,YAAP,CACD,CAED,GAAIhB,SAAS,GAAK,OAAlB,CAA2B,CACzB,GAAMsB,CAAAA,KAAK,CAAGvB,QAAQ,CAACK,KAAvB,CACA,GAAMmB,CAAAA,QAAQ,CAAGD,KAAK,CAACR,GAAN,CAAUhB,eAAV,CAAjB,CACA,MAAOyB,CAAAA,QAAP,CACD,CAED,gBAAUvB,SAAV,gCACD,CA7DD,CA+DA,cAAeF,CAAAA,eAAf","sourcesContent":["const getDecodedValue = (inputObj: any) => {\n  const typeClass = inputObj.type.typeClass;\n\n  if (inputObj.error) {\n    return \"NA\";\n  }\n\n  if (typeClass === \"magic\") {\n    const variable: string = inputObj.type.variable;\n    if (\n      variable === \"block\" ||\n      variable === \"message\" ||\n      variable === \"transaction\"\n    ) {\n      return inputObj.value;\n    }\n  }\n\n  if (typeClass === \"contract\") {\n    return inputObj.value.address;\n  }\n\n  if (typeClass === \"int\" || typeClass === \"uint\") {\n    return inputObj.value.asBN.toString(); // temporarily converting to string to handle big numbers\n  }\n\n  if (typeClass === \"bool\") {\n    return inputObj.value.asBoolean;\n  }\n\n  if (typeClass === \"string\") {\n    return inputObj.value.asString;\n  }\n\n  if (typeClass === \"bytes\") {\n    return inputObj.value.asHex;\n  }\n\n  if (typeClass === \"address\") {\n    return inputObj.value.asAddress;\n  }\n\n  if (typeClass === \"struct\") {\n    const data = inputObj.value;\n    const arrayOfObjects = data.map(({ name, value }: any) => ({\n      [name]: getDecodedValue(value),\n    }));\n    const mergedObject = arrayOfObjects.reduce(\n      (acc: any, curr: any) => Object.assign(acc, curr),\n      {}\n    );\n    return mergedObject;\n  }\n\n  if (typeClass === \"array\") {\n    const array = inputObj.value;\n    const strArray = array.map(getDecodedValue);\n    return strArray;\n  }\n\n  return `${typeClass} is currently not supported`;\n};\n\nexport default getDecodedValue;\n"]},"metadata":{},"sourceType":"module"}