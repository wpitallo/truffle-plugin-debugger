{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mappingKeyAsHex = exports.encodeMappingKey = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:mapping-key:encode\");\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar BasicEncode = __importStar(require(\"../../basic/encode\"));\n\nvar BytesEncode = __importStar(require(\"../../bytes/encode\")); //UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n\n/**\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeMappingKey(input) {\n  if (input.type.typeClass === \"string\" || input.type.typeClass === \"bytes\" && input.type.kind === \"dynamic\") {\n    return BytesEncode.encodeBytes(input);\n  } else {\n    return BasicEncode.encodeBasic(input);\n  }\n}\n\nexports.encodeMappingKey = encodeMappingKey;\n/**\n * @Category Encoding (low-level)\n */\n\nfunction mappingKeyAsHex(input) {\n  return Conversion.toHexString(encodeMappingKey(input));\n}\n\nexports.mappingKeyAsHex = mappingKeyAsHex;","map":{"version":3,"sources":["../../../../lib/mapping-key/encode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,0BAAZ,CAAd;;AAGA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA,C,CAEA;AACA;AACA;;AAEA;;AAEG;;;AACH,SAAgB,gBAAhB,CACE,KADF,EACsC;AAEpC,MACE,KAAK,CAAC,IAAN,CAAW,SAAX,KAAyB,QAAzB,IACC,KAAK,CAAC,IAAN,CAAW,SAAX,KAAyB,OAAzB,IAAoC,KAAK,CAAC,IAAN,CAAW,IAAX,KAAoB,SAF3D,EAGE;AACA,WAAO,WAAW,CAAC,WAAZ,CAEN,KAFM,CAAP;AAGD,GAPD,MAOO;AACL,WAAO,WAAW,CAAC,WAAZ,CAAwB,KAAxB,CAAP;AACD;AACF;;AAbD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAeA;;AAEG;;AACH,SAAgB,eAAhB,CAAgC,KAAhC,EAAoE;AAClE,SAAO,UAAU,CAAC,WAAX,CAAuB,gBAAgB,CAAC,KAAD,CAAvC,CAAP;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mappingKeyAsHex = exports.encodeMappingKey = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:mapping-key:encode\");\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\nconst BytesEncode = __importStar(require(\"../../bytes/encode\"));\n//UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n/**\n * @Category Encoding (low-level)\n */\nfunction encodeMappingKey(input) {\n    if (input.type.typeClass === \"string\" ||\n        (input.type.typeClass === \"bytes\" && input.type.kind === \"dynamic\")) {\n        return BytesEncode.encodeBytes(input);\n    }\n    else {\n        return BasicEncode.encodeBasic(input);\n    }\n}\nexports.encodeMappingKey = encodeMappingKey;\n/**\n * @Category Encoding (low-level)\n */\nfunction mappingKeyAsHex(input) {\n    return Conversion.toHexString(encodeMappingKey(input));\n}\nexports.mappingKeyAsHex = mappingKeyAsHex;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}