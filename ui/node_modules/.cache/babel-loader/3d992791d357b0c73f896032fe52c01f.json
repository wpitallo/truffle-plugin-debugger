{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeTypeId = exports.contextToType = void 0;\n\nfunction contextToType(context) {\n  if (context.contractId !== undefined) {\n    return {\n      typeClass: \"contract\",\n      kind: \"native\",\n      id: makeTypeId(context.contractId, context.compilationId),\n      typeName: context.contractName,\n      contractKind: context.contractKind,\n      payable: context.payable\n    };\n  } else {\n    return {\n      typeClass: \"contract\",\n      kind: \"foreign\",\n      typeName: context.contractName,\n      contractKind: context.contractKind,\n      payable: context.payable\n    };\n  }\n}\n\nexports.contextToType = contextToType; //NOTE: I am exporting this for use in other import functions, but please don't\n//use this elsewhere!\n//If you have to make a type ID, instead make the type and then\n//take its ID.\n\nfunction makeTypeId(astId, compilationId) {\n  return \"\".concat(compilationId, \":\").concat(astId);\n}\n\nexports.makeTypeId = makeTypeId;","map":{"version":3,"sources":["../../../../lib/contexts/import/index.ts"],"names":[],"mappings":";;;;;;;AAGA,SAAgB,aAAhB,CAA8B,OAA9B,EAA8C;AAC5C,MAAI,OAAO,CAAC,UAAR,KAAuB,SAA3B,EAAsC;AACpC,WAAO;AACL,MAAA,SAAS,EAAE,UADN;AAEL,MAAA,IAAI,EAAE,QAFD;AAGL,MAAA,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,UAAT,EAAqB,OAAO,CAAC,aAA7B,CAHT;AAIL,MAAA,QAAQ,EAAE,OAAO,CAAC,YAJb;AAKL,MAAA,YAAY,EAAE,OAAO,CAAC,YALjB;AAML,MAAA,OAAO,EAAE,OAAO,CAAC;AANZ,KAAP;AAQD,GATD,MASO;AACL,WAAO;AACL,MAAA,SAAS,EAAE,UADN;AAEL,MAAA,IAAI,EAAE,SAFD;AAGL,MAAA,QAAQ,EAAE,OAAO,CAAC,YAHb;AAIL,MAAA,YAAY,EAAE,OAAO,CAAC,YAJjB;AAKL,MAAA,OAAO,EAAE,OAAO,CAAC;AALZ,KAAP;AAOD;AACF;;AAnBD,OAAA,CAAA,aAAA,GAAA,aAAA,C,CAqBA;AACA;AACA;AACA;;AACA,SAAgB,UAAhB,CAA2B,KAA3B,EAA0C,aAA1C,EAA+D;AAC7D,mBAAU,aAAV,cAA2B,KAA3B;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeTypeId = exports.contextToType = void 0;\nfunction contextToType(context) {\n    if (context.contractId !== undefined) {\n        return {\n            typeClass: \"contract\",\n            kind: \"native\",\n            id: makeTypeId(context.contractId, context.compilationId),\n            typeName: context.contractName,\n            contractKind: context.contractKind,\n            payable: context.payable\n        };\n    }\n    else {\n        return {\n            typeClass: \"contract\",\n            kind: \"foreign\",\n            typeName: context.contractName,\n            contractKind: context.contractKind,\n            payable: context.payable\n        };\n    }\n}\nexports.contextToType = contextToType;\n//NOTE: I am exporting this for use in other import functions, but please don't\n//use this elsewhere!\n//If you have to make a type ID, instead make the type and then\n//take its ID.\nfunction makeTypeId(astId, compilationId) {\n    return `${compilationId}:${astId}`;\n}\nexports.makeTypeId = makeTypeId;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}