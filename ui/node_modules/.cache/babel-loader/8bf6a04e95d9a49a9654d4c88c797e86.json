{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar stream = require('stream');\n\nvar util = require('util');\n\nvar utils = require('./utils');\n\nvar Simple = require('./simple');\n\nvar Decoder = require('./decoder');\n\nvar constants = require('./constants');\n\nvar bignumber = require('bignumber.js').BigNumber;\n\nvar NoFilter = require('nofilter');\n\nvar MT = constants.MT;\nvar NUMBYTES = constants.NUMBYTES;\nvar SYMS = constants.SYMS;\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's';\n  } else {\n    return '';\n  }\n}\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\n\n\nvar Commented = /*#__PURE__*/function (_stream$Transform) {\n  _inherits(Commented, _stream$Transform);\n\n  var _super = _createSuper(Commented);\n\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  function Commented(options) {\n    var _this;\n\n    _classCallCheck(this, Commented);\n\n    var opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    });\n    var max_depth = opts.max_depth;\n    delete opts.max_depth;\n    var depth = opts.depth;\n    delete opts.depth;\n    _this = _super.call(this, opts);\n    _this.depth = depth;\n    _this.max_depth = max_depth;\n    _this.all = new NoFilter();\n    opts.tags = {\n      24: _this._tag_24.bind(_assertThisInitialized(_this))\n    };\n    _this.parser = new Decoder(opts);\n\n    _this.parser.on('value', _this._on_value.bind(_assertThisInitialized(_this)));\n\n    _this.parser.on('start', _this._on_start.bind(_assertThisInitialized(_this)));\n\n    _this.parser.on('start-string', _this._on_start_string.bind(_assertThisInitialized(_this)));\n\n    _this.parser.on('stop', _this._on_stop.bind(_assertThisInitialized(_this)));\n\n    _this.parser.on('more-bytes', _this._on_more.bind(_assertThisInitialized(_this)));\n\n    _this.parser.on('error', _this._on_error.bind(_assertThisInitialized(_this)));\n\n    if (!opts.no_summary) {\n      _this.parser.on('data', _this._on_data.bind(_assertThisInitialized(_this)));\n    }\n\n    _this.parser.bs.on('read', _this._on_read.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  _createClass(Commented, [{\n    key: \"_tag_24\",\n    value: function _tag_24(v) {\n      var _this2 = this;\n\n      var c = new Commented({\n        depth: this.depth + 1,\n        no_summary: true\n      });\n      c.on('data', function (b) {\n        return _this2.push(b);\n      });\n      c.on('error', function (er) {\n        return _this2.emit('error', er);\n      });\n      c.end(v);\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(fresh, encoding, cb) {\n      this.parser.write(fresh, encoding, cb);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(cb) {\n      // TODO: find the test that covers this, and look at the return value\n      return this.parser._flush(cb);\n    }\n    /**\n     * @callback commentCallback\n     * @param {Error} [error] - if one was generated\n     * @param {string} [commented] - the comment string\n     */\n\n    /**\n     * @typedef CommentOptions\n     * @property {number} [max_depth=10] how many times to indent the dashes\n     * @property {string} [encoding='hex'] encoding of the input\n     */\n\n    /**\n     * Comment on an input Buffer or string, creating a string passed to the\n     * callback.  If callback not specified, a promise is returned.\n     *\n     * @static\n     * @param {string|Buffer} input\n     * @param {CommentOptions|commentCallback|string} [options] or callback\n     * @param {commentCallback=} cb\n     * @returns {Promise} if cb not specified\n     */\n\n  }, {\n    key: \"_on_error\",\n    value:\n    /**\n     * @private\n     */\n    function _on_error(er) {\n      this.push('ERROR: ');\n      this.push(er.toString());\n      this.push('\\n');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_read\",\n    value: function _on_read(buf) {\n      this.all.write(buf);\n      var hex = buf.toString('hex');\n      this.push(new Array(this.depth + 1).join('  '));\n      this.push(hex);\n      var ind = (this.max_depth - this.depth) * 2;\n      ind -= hex.length;\n\n      if (ind < 1) {\n        ind = 1;\n      }\n\n      this.push(new Array(ind + 1).join(' '));\n      return this.push('-- ');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_more\",\n    value: function _on_more(mt, len, parent_mt, pos) {\n      this.depth++;\n      var desc = '';\n\n      switch (mt) {\n        case MT.POS_INT:\n          desc = 'Positive number,';\n          break;\n\n        case MT.NEG_INT:\n          desc = 'Negative number,';\n          break;\n\n        case MT.ARRAY:\n          desc = 'Array, length';\n          break;\n\n        case MT.MAP:\n          desc = 'Map, count';\n          break;\n\n        case MT.BYTE_STRING:\n          desc = 'Bytes, length';\n          break;\n\n        case MT.UTF8_STRING:\n          desc = 'String, length';\n          break;\n\n        case MT.SIMPLE_FLOAT:\n          if (len === 1) {\n            desc = 'Simple value,';\n          } else {\n            desc = 'Float,';\n          }\n\n          break;\n      }\n\n      return this.push(desc + ' next ' + len + ' byte' + plural(len) + '\\n');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_start_string\",\n    value: function _on_start_string(mt, tag, parent_mt, pos) {\n      this.depth++;\n      var desc = '';\n\n      switch (mt) {\n        case MT.BYTE_STRING:\n          desc = 'Bytes, length: ' + tag;\n          break;\n\n        case MT.UTF8_STRING:\n          desc = 'String, length: ' + tag.toString();\n          break;\n      }\n\n      return this.push(desc + '\\n');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_start\",\n    value: function _on_start(mt, tag, parent_mt, pos) {\n      this.depth++;\n\n      if (tag !== SYMS.BREAK) {\n        switch (parent_mt) {\n          case MT.ARRAY:\n            this.push(\"[\".concat(pos, \"], \"));\n            break;\n\n          case MT.MAP:\n            if (pos % 2) {\n              this.push(\"{Val:\".concat(Math.floor(pos / 2), \"}, \"));\n            } else {\n              this.push(\"{Key:\".concat(Math.floor(pos / 2), \"}, \"));\n            }\n\n            break;\n        }\n      }\n\n      switch (mt) {\n        case MT.TAG:\n          this.push(\"Tag #\".concat(tag));\n\n          if (tag == 24) {\n            this.push(' Encoded CBOR data item');\n          }\n\n          break;\n\n        case MT.ARRAY:\n          if (tag === SYMS.STREAM) {\n            this.push('Array (streaming)');\n          } else {\n            this.push(\"Array, \".concat(tag, \" item\").concat(plural(tag)));\n          }\n\n          break;\n\n        case MT.MAP:\n          if (tag === SYMS.STREAM) {\n            this.push('Map (streaming)');\n          } else {\n            this.push(\"Map, \".concat(tag, \" pair\").concat(plural(tag)));\n          }\n\n          break;\n\n        case MT.BYTE_STRING:\n          this.push('Bytes (streaming)');\n          break;\n\n        case MT.UTF8_STRING:\n          this.push('String (streaming)');\n          break;\n      }\n\n      return this.push('\\n');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_stop\",\n    value: function _on_stop(mt) {\n      return this.depth--;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_value\",\n    value: function _on_value(val, parent_mt, pos, ai) {\n      if (val !== SYMS.BREAK) {\n        switch (parent_mt) {\n          case MT.ARRAY:\n            this.push(\"[\".concat(pos, \"], \"));\n            break;\n\n          case MT.MAP:\n            if (pos % 2) {\n              this.push(\"{Val:\".concat(Math.floor(pos / 2), \"}, \"));\n            } else {\n              this.push(\"{Key:\".concat(Math.floor(pos / 2), \"}, \"));\n            }\n\n            break;\n        }\n      }\n\n      if (val === SYMS.BREAK) {\n        this.push('BREAK\\n');\n      } else if (val === SYMS.NULL) {\n        this.push('null\\n');\n      } else if (val === SYMS.UNDEFINED) {\n        this.push('undefined\\n');\n      } else if (typeof val === 'string') {\n        this.depth--;\n\n        if (val.length > 0) {\n          this.push(JSON.stringify(val));\n          this.push('\\n');\n        }\n      } else if (Buffer.isBuffer(val)) {\n        this.depth--;\n\n        if (val.length > 0) {\n          this.push(val.toString('hex'));\n          this.push('\\n');\n        }\n      } else if (val instanceof bignumber) {\n        this.push(val.toString());\n        this.push('\\n');\n      } else {\n        this.push(util.inspect(val));\n        this.push('\\n');\n      }\n\n      switch (ai) {\n        case NUMBYTES.ONE:\n        case NUMBYTES.TWO:\n        case NUMBYTES.FOUR:\n        case NUMBYTES.EIGHT:\n          this.depth--;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_on_data\",\n    value: function _on_data() {\n      this.push('0x');\n      this.push(this.all.read().toString('hex'));\n      return this.push('\\n');\n    }\n  }], [{\n    key: \"comment\",\n    value: function comment(input, options, cb) {\n      if (input == null) {\n        throw new Error('input required');\n      }\n\n      var encoding = typeof input === 'string' ? 'hex' : void 0;\n      var max_depth = 10;\n\n      switch (typeof options) {\n        case 'function':\n          cb = options;\n          break;\n\n        case 'string':\n          encoding = options;\n          break;\n\n        case 'number':\n          max_depth = options;\n          break;\n\n        case 'object':\n          var ref1 = options.encoding;\n          var ref2 = options.max_depth;\n          encoding = ref1 != null ? ref1 : encoding;\n          max_depth = ref2 != null ? ref2 : max_depth;\n          break;\n\n        case 'undefined':\n          break;\n\n        default:\n          throw new Error('Unknown option type');\n      }\n\n      var bs = new NoFilter();\n      var d = new Commented({\n        max_depth: max_depth\n      });\n      var p = null;\n\n      if (typeof cb === 'function') {\n        d.on('end', function () {\n          cb(null, bs.toString('utf8'));\n        });\n        d.on('error', cb);\n      } else {\n        p = new Promise(function (resolve, reject) {\n          d.on('end', function () {\n            resolve(bs.toString('utf8'));\n          });\n          return d.on('error', reject);\n        });\n      }\n\n      d.pipe(bs);\n      d.end(input, encoding);\n      return p;\n    }\n  }]);\n\n  return Commented;\n}(stream.Transform);\n\nmodule.exports = Commented;","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/cbor/lib/commented.js"],"names":["stream","require","util","utils","Simple","Decoder","constants","bignumber","BigNumber","NoFilter","MT","NUMBYTES","SYMS","plural","c","Commented","options","opts","Object","assign","depth","max_depth","no_summary","readableObjectMode","writableObjectMode","all","tags","_tag_24","bind","parser","on","_on_value","_on_start","_on_start_string","_on_stop","_on_more","_on_error","_on_data","bs","_on_read","v","b","push","er","emit","end","fresh","encoding","cb","write","_flush","toString","buf","hex","Array","join","ind","length","mt","len","parent_mt","pos","desc","POS_INT","NEG_INT","ARRAY","MAP","BYTE_STRING","UTF8_STRING","SIMPLE_FLOAT","tag","BREAK","Math","floor","TAG","STREAM","val","ai","NULL","UNDEFINED","JSON","stringify","Buffer","isBuffer","inspect","ONE","TWO","FOUR","EIGHT","read","input","Error","ref1","ref2","d","p","Promise","resolve","reject","pipe","Transform","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst utils = require('./utils')\nconst Simple = require('./simple')\nconst Decoder = require('./decoder')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SYMS = constants.SYMS\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's'\n  } else {\n    return ''\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    })\n    const max_depth = opts.max_depth\n    delete opts.max_depth\n    const depth = opts.depth\n    delete opts.depth\n    super(opts)\n\n    this.depth = depth\n    this.max_depth = max_depth\n    this.all = new NoFilter()\n\n    opts.tags = {\n      24: this._tag_24.bind(this)\n    }\n    this.parser = new Decoder(opts)\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('start-string', this._on_start_string.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n    if (!opts.no_summary) {\n      this.parser.on('data', this._on_data.bind(this))\n    }\n    this.parser.bs.on('read', this._on_read.bind(this))\n  }\n\n  /**\n   * @private\n   */\n  _tag_24(v) {\n    const c = new Commented({depth: this.depth+1, no_summary: true})\n    c.on('data', b => this.push(b))\n    c.on('error', er => this.emit('error', er))\n    c.end(v)\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb)\n  }\n\n  /**\n   * @private\n   */\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb)\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let encoding = (typeof input === 'string') ? 'hex' : void 0\n    let max_depth = 10\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        break\n      case 'string':\n        encoding = options\n        break\n      case 'number':\n        max_depth = options\n        break\n      case 'object':\n        const ref1 = options.encoding\n        const ref2 = options.max_depth\n        encoding = (ref1 != null) ? ref1 : encoding\n        max_depth = (ref2 != null) ? ref2 : max_depth\n        break\n      case 'undefined':\n        break\n      default:\n        throw new Error('Unknown option type')\n    }\n    const bs = new NoFilter()\n    const d = new Commented({\n      max_depth\n    })\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encoding)\n    return p\n  }\n\n  /**\n   * @private\n   */\n  _on_error(er) {\n    this.push('ERROR: ')\n    this.push(er.toString())\n    this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_read(buf) {\n    this.all.write(buf)\n    const hex = buf.toString('hex')\n    this.push(new Array(this.depth + 1).join('  '))\n    this.push(hex)\n    let ind = (this.max_depth - this.depth) * 2\n    ind -= hex.length\n    if (ind < 1) {\n      ind = 1\n    }\n    this.push(new Array(ind + 1).join(' '))\n    return this.push('-- ')\n  }\n\n  /**\n   * @private\n   */\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,'\n        break\n      case MT.NEG_INT:\n        desc = 'Negative number,'\n        break\n      case MT.ARRAY:\n        desc = 'Array, length'\n        break\n      case MT.MAP:\n        desc = 'Map, count'\n        break\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length'\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length'\n        break\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,'\n        } else {\n          desc = 'Float,'\n        }\n        break\n    }\n    return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + (tag.toString())\n        break\n    }\n    return this.push(desc + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`)\n        if (tag == 24) {\n          this.push(' Encoded CBOR data item')\n        }\n        break\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)')\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`)\n        }\n        break\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)')\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`)\n        }\n        break\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)')\n        break\n      case MT.UTF8_STRING:\n        this.push('String (streaming)')\n        break\n    }\n    return this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_stop(mt) {\n    return this.depth--\n  }\n\n  /**\n   * @private\n   */\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n')\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n')\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n')\n    } else if (typeof val === 'string') {\n      this.depth--\n      if (val.length > 0 ) {\n        this.push(JSON.stringify(val))\n        this.push('\\n')\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--\n      if (val.length > 0) {\n        this.push(val.toString('hex'))\n        this.push('\\n')\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString())\n      this.push('\\n')\n    } else {\n      this.push(util.inspect(val))\n      this.push('\\n')\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data() {\n    this.push('0x')\n    this.push(this.all.read().toString('hex'))\n    return this.push('\\n')\n  }\n}\n\nmodule.exports = Commented\n"]},"metadata":{},"sourceType":"script"}