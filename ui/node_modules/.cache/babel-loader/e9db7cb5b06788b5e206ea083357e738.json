{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _regeneratorRuntime = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Web3Shim = void 0;\n\nvar web3_1 = __importDefault(require(\"web3\"));\n\nvar ethereum_1 = require(\"./overloads/ethereum\");\n\nvar quorum_1 = require(\"./overloads/quorum\");\n\nvar fabric_evm_1 = require(\"./overloads/fabric-evm\");\n\nvar web3js_1 = require(\"./overloads/web3js\");\n\nvar initInterface = function initInterface(web3Shim) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var networkTypes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            networkTypes = new Map(Object.entries({\n              web3js: web3js_1.Web3JsDefinition,\n              ethereum: ethereum_1.EthereumDefinition,\n              quorum: quorum_1.QuorumDefinition,\n              \"fabric-evm\": fabric_evm_1.FabricEvmDefinition\n            }));\n            networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}; // March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `@truffle/interface-adapter`that should use this work in a more\n// sane and organized manner.\n\n\nvar Web3Shim = /*#__PURE__*/function (_web3_1$default) {\n  _inherits(Web3Shim, _web3_1$default);\n\n  var _super = _createSuper(Web3Shim);\n\n  function Web3Shim(options) {\n    var _this;\n\n    _classCallCheck(this, Web3Shim);\n\n    _this = _super.call(this);\n\n    if (options) {\n      _this.networkType = options.networkType || \"ethereum\";\n\n      if (options.provider) {\n        _this.setProvider(options.provider);\n      }\n    } else {\n      _this.networkType = \"ethereum\";\n    }\n\n    initInterface(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Web3Shim, [{\n    key: \"setNetworkType\",\n    value: function setNetworkType(networkType) {\n      this.networkType = networkType;\n      initInterface(this);\n    }\n  }]);\n\n  return Web3Shim;\n}(web3_1.default);\n\nexports.Web3Shim = Web3Shim;","map":{"version":3,"sources":["../../lib/shim/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAO,QAAP;AAAA,SAA6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3C,YAAA,YAD2C,GACR,IAAI,GAAJ,CACvC,MAAM,CAAC,OAAP,CAAe;AACb,cAAA,MAAM,EAAE,QAAA,CAAA,gBADK;AAEb,cAAA,QAAQ,EAAE,UAAA,CAAA,kBAFG;AAGb,cAAA,MAAM,EAAE,QAAA,CAAA,gBAHK;AAIb,4BAAc,YAAA,CAAA;AAJD,aAAf,CADuC,CADQ;AAUjD,YAAA,YAAY,CAAC,GAAb,CAAiB,QAAQ,CAAC,WAA1B,EAAuC,eAAvC,CAAuD,QAAvD;;AAViD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7B;AAAA,CAAtB,C,CAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACa,Q;;;;;AAGX,oBAAY,OAAZ,EAAqC;AAAA;;AAAA;;AACnC;;AAEA,QAAI,OAAJ,EAAa;AACX,YAAK,WAAL,GAAmB,OAAO,CAAC,WAAR,IAAuB,UAA1C;;AAEA,UAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,cAAK,WAAL,CAAiB,OAAO,CAAC,QAAzB;AACD;AACF,KAND,MAMO;AACL,YAAK,WAAL,GAAmB,UAAnB;AACD;;AAED,IAAA,aAAa,+BAAb;AAbmC;AAcpC;;;;WAEM,wBAAe,WAAf,EAAuC;AAC5C,WAAK,WAAL,GAAmB,WAAnB;AACA,MAAA,aAAa,CAAC,IAAD,CAAb;AACD;;;;EAtB2B,MAAA,CAAA,O;;AAA9B,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Web3Shim = void 0;\nconst web3_1 = __importDefault(require(\"web3\"));\nconst ethereum_1 = require(\"./overloads/ethereum\");\nconst quorum_1 = require(\"./overloads/quorum\");\nconst fabric_evm_1 = require(\"./overloads/fabric-evm\");\nconst web3js_1 = require(\"./overloads/web3js\");\nconst initInterface = (web3Shim) => __awaiter(void 0, void 0, void 0, function* () {\n    const networkTypes = new Map(Object.entries({\n        web3js: web3js_1.Web3JsDefinition,\n        ethereum: ethereum_1.EthereumDefinition,\n        quorum: quorum_1.QuorumDefinition,\n        \"fabric-evm\": fabric_evm_1.FabricEvmDefinition\n    }));\n    networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n});\n// March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `@truffle/interface-adapter`that should use this work in a more\n// sane and organized manner.\nclass Web3Shim extends web3_1.default {\n    constructor(options) {\n        super();\n        if (options) {\n            this.networkType = options.networkType || \"ethereum\";\n            if (options.provider) {\n                this.setProvider(options.provider);\n            }\n        }\n        else {\n            this.networkType = \"ethereum\";\n        }\n        initInterface(this);\n    }\n    setNetworkType(networkType) {\n        this.networkType = networkType;\n        initInterface(this);\n    }\n}\nexports.Web3Shim = Web3Shim;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}