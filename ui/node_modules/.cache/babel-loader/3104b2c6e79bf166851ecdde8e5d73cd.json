{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(decodeStack),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(decodeLiteral);\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeLiteral = exports.decodeStack = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:stack:decode\");\n\nvar AbiData = __importStar(require(\"../../abi-data\"));\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Format = __importStar(require(\"../../format\"));\n\nvar read_1 = __importDefault(require(\"../../read\"));\n\nvar Basic = __importStar(require(\"../../basic\"));\n\nvar Memory = __importStar(require(\"../../memory\"));\n\nvar Storage = __importStar(require(\"../../storage\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nfunction decodeStack(dataType, pointer, info) {\n  var rawValue, literalPointer;\n  return _regeneratorRuntime.wrap(function decodeStack$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          return _context.delegateYield(read_1.default(pointer, info.state), \"t0\", 2);\n\n        case 2:\n          rawValue = _context.t0;\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t1 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", {\n            //no idea why TS is failing here\n            type: dataType,\n            kind: \"error\",\n            error: _context.t1.error\n          });\n\n        case 8:\n          literalPointer = {\n            location: \"stackliteral\",\n            literal: rawValue\n          };\n          return _context.delegateYield(decodeLiteral(dataType, literalPointer, info), \"t2\", 10);\n\n        case 10:\n          return _context.abrupt(\"return\", _context.t2);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nexports.decodeStack = decodeStack;\n\nfunction decodeLiteral(dataType, pointer, info) {\n  var lengthAsBN, locationOnly, address, selectorWord, selector;\n  return _regeneratorRuntime.wrap(function decodeLiteral$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          debug(\"type %O\", dataType);\n          debug(\"pointer %o\", pointer);\n\n          if (!Format.Types.isReferenceType(dataType)) {\n            _context2.next = 19;\n            break;\n          }\n\n          _context2.t0 = dataType.location;\n          _context2.next = _context2.t0 === \"memory\" ? 6 : _context2.t0 === \"storage\" ? 8 : _context2.t0 === \"calldata\" ? 10 : 19;\n          break;\n\n        case 6:\n          return _context2.delegateYield(Memory.Decode.decodeMemoryReferenceByAddress(dataType, pointer, info), \"t1\", 7);\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.t1);\n\n        case 8:\n          return _context2.delegateYield(Storage.Decode.decodeStorageReferenceByAddress(dataType, pointer, info), \"t2\", 9);\n\n        case 9:\n          return _context2.abrupt(\"return\", _context2.t2);\n\n        case 10:\n          if (!(dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\" || dataType.typeClass === \"array\" && dataType.kind === \"dynamic\")) {\n            _context2.next = 17;\n            break;\n          }\n\n          lengthAsBN = Conversion.toBN(pointer.literal.slice(Evm.Utils.WORD_SIZE));\n          locationOnly = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n          return _context2.delegateYield(AbiData.Decode.decodeAbiReferenceByAddress(dataType, {\n            location: \"stackliteral\",\n            literal: locationOnly\n          }, info, {\n            abiPointerBase: 0,\n            lengthOverride: lengthAsBN\n          }), \"t3\", 14);\n\n        case 14:\n          return _context2.abrupt(\"return\", _context2.t3);\n\n        case 17:\n          return _context2.delegateYield(AbiData.Decode.decodeAbiReferenceByAddress(dataType, pointer, info, {\n            abiPointerBase: 0 //let's be explicit\n\n          }), \"t4\", 18);\n\n        case 18:\n          return _context2.abrupt(\"return\", _context2.t4);\n\n        case 19:\n          if (!(dataType.typeClass === \"function\" && dataType.visibility === \"external\")) {\n            _context2.next = 29;\n            break;\n          }\n\n          address = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n          selectorWord = pointer.literal.slice(-Evm.Utils.WORD_SIZE);\n\n          if (!(!Basic.Decode.checkPaddingLeft(address, Evm.Utils.ADDRESS_SIZE) || !Basic.Decode.checkPaddingLeft(selectorWord, Evm.Utils.SELECTOR_SIZE))) {\n            _context2.next = 24;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            type: dataType,\n            kind: \"error\",\n            error: {\n              kind: \"FunctionExternalStackPaddingError\",\n              rawAddress: Conversion.toHexString(address),\n              rawSelector: Conversion.toHexString(selectorWord)\n            }\n          });\n\n        case 24:\n          selector = selectorWord.slice(-Evm.Utils.SELECTOR_SIZE);\n          _context2.t5 = dataType;\n          return _context2.delegateYield(Basic.Decode.decodeExternalFunction(address, selector, info), \"t6\", 27);\n\n        case 27:\n          _context2.t7 = _context2.t6;\n          return _context2.abrupt(\"return\", {\n            type: _context2.t5,\n            kind: \"value\",\n            value: _context2.t7\n          });\n\n        case 29:\n          return _context2.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info, {\n            paddingMode: \"permissive\"\n          }), \"t8\", 30);\n\n        case 30:\n          return _context2.abrupt(\"return\", _context2.t8);\n\n        case 31:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexports.decodeLiteral = decodeLiteral;","map":{"version":3,"sources":["../../../../lib/stack/decode/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeLiteral = exports.decodeStack = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:stack:decode\");\nconst AbiData = __importStar(require(\"../../abi-data\"));\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst Format = __importStar(require(\"../../format\"));\nconst read_1 = __importDefault(require(\"../../read\"));\nconst Basic = __importStar(require(\"../../basic\"));\nconst Memory = __importStar(require(\"../../memory\"));\nconst Storage = __importStar(require(\"../../storage\"));\nconst Evm = __importStar(require(\"../../evm\"));\nfunction* decodeStack(dataType, pointer, info) {\n    let rawValue;\n    try {\n        rawValue = yield* read_1.default(pointer, info.state);\n    }\n    catch (error) {\n        return {\n            //no idea why TS is failing here\n            type: dataType,\n            kind: \"error\",\n            error: error.error\n        };\n    }\n    const literalPointer = {\n        location: \"stackliteral\",\n        literal: rawValue\n    };\n    return yield* decodeLiteral(dataType, literalPointer, info);\n}\nexports.decodeStack = decodeStack;\nfunction* decodeLiteral(dataType, pointer, info) {\n    debug(\"type %O\", dataType);\n    debug(\"pointer %o\", pointer);\n    if (Format.Types.isReferenceType(dataType)) {\n        switch (dataType.location) {\n            case \"memory\":\n                //first: do we have a memory pointer? if so we can just dispatch to\n                //decodeMemoryReference\n                return yield* Memory.Decode.decodeMemoryReferenceByAddress(dataType, pointer, info);\n            case \"storage\":\n                //next: do we have a storage pointer (which may be a mapping)? if so, we can\n                //we dispatch to decodeStorageByAddress\n                return yield* Storage.Decode.decodeStorageReferenceByAddress(dataType, pointer, info);\n            case \"calldata\":\n                //next: do we have a calldata pointer?\n                //if it's a lookup type, it'll need special handling\n                if (dataType.typeClass === \"bytes\" ||\n                    dataType.typeClass === \"string\" ||\n                    (dataType.typeClass === \"array\" && dataType.kind === \"dynamic\")) {\n                    const lengthAsBN = Conversion.toBN(pointer.literal.slice(Evm.Utils.WORD_SIZE));\n                    const locationOnly = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n                    return yield* AbiData.Decode.decodeAbiReferenceByAddress(dataType, { location: \"stackliteral\", literal: locationOnly }, info, {\n                        abiPointerBase: 0,\n                        lengthOverride: lengthAsBN\n                    });\n                }\n                else {\n                    //multivalue case -- this case is straightforward\n                    return yield* AbiData.Decode.decodeAbiReferenceByAddress(dataType, pointer, info, {\n                        abiPointerBase: 0 //let's be explicit\n                    });\n                }\n        }\n    }\n    //next: do we have an external function?  these work differently on the stack\n    //than elsewhere, so we can't just pass it on to decodeBasic.\n    if (dataType.typeClass === \"function\" && dataType.visibility === \"external\") {\n        let address = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n        let selectorWord = pointer.literal.slice(-Evm.Utils.WORD_SIZE);\n        if (!Basic.Decode.checkPaddingLeft(address, Evm.Utils.ADDRESS_SIZE) ||\n            !Basic.Decode.checkPaddingLeft(selectorWord, Evm.Utils.SELECTOR_SIZE)) {\n            return {\n                type: dataType,\n                kind: \"error\",\n                error: {\n                    kind: \"FunctionExternalStackPaddingError\",\n                    rawAddress: Conversion.toHexString(address),\n                    rawSelector: Conversion.toHexString(selectorWord)\n                }\n            };\n        }\n        let selector = selectorWord.slice(-Evm.Utils.SELECTOR_SIZE);\n        return {\n            type: dataType,\n            kind: \"value\",\n            value: yield* Basic.Decode.decodeExternalFunction(address, selector, info)\n        };\n    }\n    //finally, if none of the above hold, we can just dispatch to decodeBasic.\n    //however, note that because we're on the stack, we use the permissive padding\n    //option so that errors won't result due to values with bad padding\n    //(of numeric or bytesN type, anyway)\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info, {\n        paddingMode: \"permissive\"\n    });\n}\nexports.decodeLiteral = decodeLiteral;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}