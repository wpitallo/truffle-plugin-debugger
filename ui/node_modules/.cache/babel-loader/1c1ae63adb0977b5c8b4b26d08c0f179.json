{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseCode = void 0;\n\nvar opcodes_1 = __importDefault(require(\"./opcodes\"));\n\nvar cbor = __importStar(require(\"cbor\"));\n/**\n * parseCode - return a list of instructions given a 0x-prefixed code string.\n *\n * If numInstructions is not passed in, we attempt to strip contract\n * metadata.  This won't work very well if the code is for a constructor or a\n * contract that can create other contracts, but it's better than nothing.\n *\n * WARNING: Don't invoke the function that way if you're dealing with a\n * constructor with arguments attached!  Then you could get disaster!\n *\n * If you pass in numInstructions (hint: count the semicolons in the source\n * map, then add one) this is used to exclude metadata instead.\n *\n * @param  {String} hexString Hex string representing the code\n * @return Array               Array of instructions\n */\n\n\nfunction parseCode(hexString) {\n  var numInstructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Convert to an array of bytes\n  var code = new Uint8Array((hexString.slice(2).match(/(..?)/g) || []).map(function (hex) {\n    return parseInt(hex, 16);\n  }));\n  var stripMetadata = numInstructions === null;\n\n  if (stripMetadata && code.length >= 2) {\n    // Remove the contract metadata; last two bytes encode its length (not\n    // including those two bytes)\n    var metadataLength = (code[code.length - 2] << 8) + code[code.length - 1]; //check: is this actually valid CBOR?\n\n    if (metadataLength + 2 <= code.length) {\n      var metadata = code.subarray(-(metadataLength + 2), -2);\n\n      if (isValidCBOR(metadata)) {\n        code = code.subarray(0, -(metadataLength + 2));\n      }\n    }\n  }\n\n  var instructions = [];\n\n  for (var pc = 0; pc < code.length && (stripMetadata || instructions.length < numInstructions); pc++) {\n    var opcode = {\n      pc: pc,\n      name: opcodes_1.default(code[pc])\n    };\n\n    if (opcode.name.slice(0, 4) === \"PUSH\") {\n      var length = code[pc] - 0x60 + 1; //0x60 is code for PUSH1\n\n      var pushData = code.subarray(pc + 1, pc + length + 1);\n\n      if (pushData.length < length) {\n        //if we run out of bytes for our pushdata, fill the rest\n        //with zeroes\n        pushData = Uint8Array.from([].concat(_toConsumableArray(pushData), _toConsumableArray(new Uint8Array(length - pushData.length))));\n      } // convert pushData to hex\n\n\n      opcode.pushData = \"0x\".concat(Buffer.from(pushData).toString(\"hex\"));\n      pc += length;\n    }\n\n    instructions.push(opcode);\n  }\n\n  return instructions;\n}\n\nexports.parseCode = parseCode;\nexports.default = {\n  //for compatibility\n  parseCode: parseCode\n};\n\nfunction isValidCBOR(metadata) {\n  try {\n    //attempt to decode but discard the value\n    //note this *will* throw if there's data left over,\n    //which is what we want it to do\n    cbor.decodeFirstSync(metadata);\n  } catch (_a) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseCode = void 0;\nconst opcodes_1 = __importDefault(require(\"./opcodes\"));\nconst cbor = __importStar(require(\"cbor\"));\n/**\n * parseCode - return a list of instructions given a 0x-prefixed code string.\n *\n * If numInstructions is not passed in, we attempt to strip contract\n * metadata.  This won't work very well if the code is for a constructor or a\n * contract that can create other contracts, but it's better than nothing.\n *\n * WARNING: Don't invoke the function that way if you're dealing with a\n * constructor with arguments attached!  Then you could get disaster!\n *\n * If you pass in numInstructions (hint: count the semicolons in the source\n * map, then add one) this is used to exclude metadata instead.\n *\n * @param  {String} hexString Hex string representing the code\n * @return Array               Array of instructions\n */\nfunction parseCode(hexString, numInstructions = null) {\n    // Convert to an array of bytes\n    let code = new Uint8Array((hexString.slice(2).match(/(..?)/g) || []).map(hex => parseInt(hex, 16)));\n    const stripMetadata = numInstructions === null;\n    if (stripMetadata && code.length >= 2) {\n        // Remove the contract metadata; last two bytes encode its length (not\n        // including those two bytes)\n        const metadataLength = (code[code.length - 2] << 8) + code[code.length - 1];\n        //check: is this actually valid CBOR?\n        if (metadataLength + 2 <= code.length) {\n            const metadata = code.subarray(-(metadataLength + 2), -2);\n            if (isValidCBOR(metadata)) {\n                code = code.subarray(0, -(metadataLength + 2));\n            }\n        }\n    }\n    let instructions = [];\n    for (let pc = 0; pc < code.length &&\n        (stripMetadata || instructions.length < numInstructions); pc++) {\n        let opcode = {\n            pc,\n            name: opcodes_1.default(code[pc])\n        };\n        if (opcode.name.slice(0, 4) === \"PUSH\") {\n            const length = code[pc] - 0x60 + 1; //0x60 is code for PUSH1\n            let pushData = code.subarray(pc + 1, pc + length + 1);\n            if (pushData.length < length) {\n                //if we run out of bytes for our pushdata, fill the rest\n                //with zeroes\n                pushData = Uint8Array.from([\n                    ...pushData,\n                    ...new Uint8Array(length - pushData.length)\n                ]);\n            }\n            // convert pushData to hex\n            opcode.pushData = `0x${Buffer.from(pushData).toString(\"hex\")}`;\n            pc += length;\n        }\n        instructions.push(opcode);\n    }\n    return instructions;\n}\nexports.parseCode = parseCode;\nexports.default = {\n    //for compatibility\n    parseCode\n};\nfunction isValidCBOR(metadata) {\n    try {\n        //attempt to decode but discard the value\n        //note this *will* throw if there's data left over,\n        //which is what we want it to do\n        cbor.decodeFirstSync(metadata);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}