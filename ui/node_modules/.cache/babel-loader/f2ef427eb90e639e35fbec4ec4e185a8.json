{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeTopic = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:topic:encode\");\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nvar BasicEncode = __importStar(require(\"../../basic/encode\"));\n/**\n * Encodes for event topics (indexed parameters).\n * Warning: This function is not fully implemented yet!\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeTopic(input) {\n  //errors can't be encoded\n  if (input.kind === \"error\") {\n    debug(\"input: %O\", input); //...unless it's an IndexedReferenceTypeError, in which\n    //case, let's read otu that raw data!\n\n    if (input.error.kind === \"IndexedReferenceTypeError\") {\n      return Conversion.toBytes(input.error.raw, Evm.Utils.WORD_SIZE);\n    } else {\n      return undefined;\n    }\n  } //otherwise, just dispath to encodeBasic\n\n\n  return BasicEncode.encodeBasic(input); //...of course, really here we should be checking\n  //whether the input *is* a basic type, and if not, handling\n  //that appropriately!  But so far we don't need this, so this\n  //part of the function isn't implemented yet\n}\n\nexports.encodeTopic = encodeTopic;","map":{"version":3,"sources":["../../../../lib/topic/encode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,oBAAZ,CAAd;;AAGA,IAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;AAEA;;;;AAIG;;;AACH,SAAgB,WAAhB,CACE,KADF,EAC6B;AAE3B;AACA,MAAI,KAAK,CAAC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,IAAA,KAAK,CAAC,WAAD,EAAc,KAAd,CAAL,CAD0B,CAE1B;AACA;;AACA,QAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,KAAqB,2BAAzB,EAAsD;AACpD,aAAO,UAAU,CAAC,OAAX,CAAmB,KAAK,CAAC,KAAN,CAAY,GAA/B,EAAoC,GAAG,CAAC,KAAJ,CAAU,SAA9C,CAAP;AACD,KAFD,MAEO;AACL,aAAO,SAAP;AACD;AACF,GAZ0B,CAa3B;;;AACA,SAAO,WAAW,CAAC,WAAZ,CAAwB,KAAxB,CAAP,CAd2B,CAe3B;AACA;AACA;AACA;AACD;;AApBD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeTopic = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:topic:encode\");\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst Evm = __importStar(require(\"../../evm\"));\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\n/**\n * Encodes for event topics (indexed parameters).\n * Warning: This function is not fully implemented yet!\n * @Category Encoding (low-level)\n */\nfunction encodeTopic(input) {\n    //errors can't be encoded\n    if (input.kind === \"error\") {\n        debug(\"input: %O\", input);\n        //...unless it's an IndexedReferenceTypeError, in which\n        //case, let's read otu that raw data!\n        if (input.error.kind === \"IndexedReferenceTypeError\") {\n            return Conversion.toBytes(input.error.raw, Evm.Utils.WORD_SIZE);\n        }\n        else {\n            return undefined;\n        }\n    }\n    //otherwise, just dispath to encodeBasic\n    return BasicEncode.encodeBasic(input);\n    //...of course, really here we should be checking\n    //whether the input *is* a basic type, and if not, handling\n    //that appropriately!  But so far we don't need this, so this\n    //part of the function isn't implemented yet\n}\nexports.encodeTopic = encodeTopic;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}