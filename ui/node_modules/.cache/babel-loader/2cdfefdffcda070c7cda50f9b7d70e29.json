{"ast":null,"code":"var hljs = require('highlight.js');\n\nvar cheerio = require('cheerio');\n\nvar camelCase = require('camelcase');\n\nvar chalk = require('chalk');\n\nvar stripAnsi = require('strip-ansi');\n\nvar merge = require('lodash.merge');\n\nvar ansiMark = require('ansi-mark');\n\nvar stripIndent = require('strip-indent');\n\nvar detectIndent = require('detect-indent');\n\nvar darkPalette = {\n  addition: chalk.green,\n  attr: chalk.yellow,\n  attribute: chalk.blue,\n  attrString: chalk.cyan,\n  base: chalk.white,\n  builtIn: chalk.blue,\n  builtInName: chalk.blue,\n  bullet: chalk.magenta,\n  class: chalk.green,\n  code: chalk.yellow,\n  comment: chalk.white.dim,\n  deletion: chalk.red,\n  doctag: chalk.blue,\n  emphasis: chalk.magenta,\n  function: chalk.white,\n  formula: chalk.green,\n  keyword: chalk.red,\n  lineNumbers: chalk.grey,\n  literal: chalk.magenta,\n  link: chalk.blue.underline,\n  meta: chalk.cyan,\n  name: chalk.cyan,\n  number: chalk.green,\n  params: chalk.blue,\n  quote: chalk.gray,\n  regexp: chalk.magenta,\n  selectorAttr: chalk.green,\n  selectorClass: chalk.yellow,\n  selectorId: chalk.blue,\n  selectorPseudo: chalk.cyan,\n  selectorTag: chalk.magenta,\n  string: chalk.yellow,\n  strong: chalk.red,\n  subst: chalk.cyan,\n  symbol: chalk.cyan,\n  tag: chalk.blue,\n  templateTag: chalk.magenta,\n  templateVariable: chalk.green,\n  title: chalk.green,\n  trailingSpace: chalk,\n  type: chalk.magenta,\n  variable: chalk.red\n};\n\nvar filter = function filter(node, opts) {\n  var color;\n  var text;\n  var childText;\n\n  if (node.type === 'text') {\n    text = node.data;\n    return text;\n  }\n\n  if (node.name === 'span' && node.type === 'tag') {\n    color = camelCase(node.attribs.class.split('-')[1]);\n  }\n\n  if (node.childNodes && node.childNodes.length > 0) {\n    childText = node.childNodes.map(function (childNode) {\n      return filter(childNode, opts);\n    }).join('');\n\n    if (typeof color === 'string') {\n      return opts.colors[color](childText);\n    }\n\n    return childText;\n  }\n\n  return '';\n};\n\nvar findLongestLine = function findLongestLine(text, opts) {\n  var tabPad = '';\n\n  if (opts.$indent.tabs) {\n    tabPad = String().padEnd(opts.consoleTabWidth, ' ');\n  }\n\n  var lines = stripAnsi(text).replace(/\\t/g, tabPad).split('\\n');\n  var max = 0;\n  lines.forEach(function (line) {\n    if (line.length > max) {\n      max = line.length;\n    }\n  });\n  return max;\n};\n\nvar padLine = function padLine(line, padding) {\n  var padStr = String().padStart(padding, ' ');\n  return padStr + line + padStr;\n};\n\nvar getIndentStr = function getIndentStr(opts) {\n  if (opts.$indent.tabs) {\n    return String().padStart(1, '\\t');\n  } // Opts.$indent.spaces === true\n\n\n  if (opts.tabsToSpaces === 0) {\n    return \"\\0\";\n  }\n\n  return String().padEnd(opts.tabsToSpaces, ' ');\n};\n\nvar syntaxHlStr = function syntaxHlStr(lang, script, opts, indentStart) {\n  var indentStr = getIndentStr(opts);\n\n  if (opts.$indent.tabs) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n\n  if (opts.$indent.spaces) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n\n  if (indentStart) {\n    script = indentStr + script;\n  }\n\n  var code = hljs.highlight(lang, script).value;\n  var html = \"<code>\".concat(code, \"</code>\");\n  var $body = cheerio.load(html).root().find('code')[0];\n  var output = filter($body, opts);\n  return output;\n};\n\nvar syntaxHlJson = function syntaxHlJson(json, opts) {\n  var indentStr = getIndentStr(opts);\n\n  try {\n    json = JSON.stringify(json, function (key, val) {\n      if (val instanceof Function) {\n        return \"[FUNCTION]\".concat(String(val), \"[FUNCTION]\");\n      }\n\n      return val;\n    }, indentStr);\n  } catch (err) {\n    err.message = 'ðŸ¦…  Chromafi: ' + err.message;\n    throw new Error(err);\n  }\n\n  var highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, function (match) {\n    var colorClass = 'number'; // eslint-disable-next-line unicorn/prefer-starts-ends-with\n\n    if (/^\"/.test(match)) {\n      // eslint-disable-next-line unicorn/prefer-starts-ends-with\n      if (/:$/.test(match)) {\n        if (match.includes('-')) {\n          colorClass = 'attrString';\n          match = match.replace(/\"/g, '\\'');\n        } else {\n          colorClass = 'attr';\n          match = match.replace(/\"/g, '');\n        }\n      } else {\n        colorClass = 'string';\n\n        if (match.substr(1, 10) === '[FUNCTION]' && match.substr(match.length - 11, 10) === '[FUNCTION]') {\n          colorClass = 'function';\n        } else {\n          match = match.replace(/\"/g, '\\'');\n          match = match.replace(/\\\\n/g, '\\n');\n          match = match.replace(/\\\\t/g, indentStr);\n        }\n      }\n    } else if (/true|false/.test(match)) {\n      colorClass = 'literal';\n    } else if (/null/.test(match)) {\n      colorClass = 'literal';\n    }\n\n    return opts.colors[colorClass](match);\n  });\n\n  var getFnStrIndent = function getFnStrIndent(fnStr, opts) {\n    fnStr = fnStr.replace(/\\t/g, indentStr);\n    var indent = detectIndent(fnStr);\n\n    if (opts.$indent.spaces) {\n      var indentLevel = indent.amount / opts.tabsToSpaces;\n      return indentLevel;\n    }\n\n    if (opts.$indent.tabs) {\n      var _indentLevel = indent.amount;\n      return _indentLevel;\n    }\n  };\n\n  var lines = highlighted.split('\\n').map(function (line) {\n    var fnParts = line.split('[FUNCTION]');\n\n    if (fnParts.length === 3) {\n      var plain = stripAnsi(line);\n      var outerIndent;\n\n      if (opts.$indent.spaces) {\n        outerIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces;\n      }\n\n      if (opts.$indent.tabs) {\n        outerIndent = plain.match(/^\\t*/)[0].length;\n      }\n\n      var fnStr = fnParts[1].replace(/\"/g, '\\'').replace(/\\\\n/g, '\\n').replace(/\\\\t/g, '\\t');\n      var innerIndent = getFnStrIndent(fnStr, opts);\n      var indentOffset = Math.abs(outerIndent - (innerIndent - 1));\n      var re = new RegExp(\"\\n(\\t){\".concat(indentOffset, \"}\"), 'g');\n      var reTabbed = fnStr.replace(re, '\\n').replace(/\\\\t/g, indentStr);\n      var preFn = fnParts[0].substr(0, fnParts[0].length - 1);\n      var postFn = fnParts[2].substr(1);\n      var jsHighlighted = syntaxHlStr('javascript', reTabbed, opts);\n      return preFn + jsHighlighted + postFn;\n    }\n\n    return line;\n  }).join('\\n');\n  return lines;\n};\n\nvar lineNumberPad = function lineNumberPad(number, opts) {\n  if (!opts.lineNumbers) {\n    return '';\n  }\n\n  var output = '';\n  var offsetLineN = number + (opts.lineNumberStart - 1);\n\n  if (opts.$indent.spaces) {\n    var padStr = String().padStart(opts.lineNumberPad, ' ');\n    var prePad = opts.lineNumberPad + opts.$maxDigitWidth;\n    output = String(offsetLineN).padStart(prePad) + padStr;\n  } // Indent using spaces - up to the tabwidth required to contain number str\n\n\n  if (opts.$indent.tabs) {\n    output = String(offsetLineN).padStart(opts.$maxTabSpace, ' ');\n  }\n\n  return opts.colors.lineNumbers(output);\n};\n\nvar cropPadAndNumber = function cropPadAndNumber(text, opts) {\n  var output = '';\n  var lines = text.split('\\n');\n  var maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length; // Tabs needed to contain digits (so we dont break code tab indentation)\n\n  var tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth);\n  var maxTabSpace = tabsNeeded * opts.consoleTabWidth;\n  var longestLineLen = findLongestLine(text, opts);\n  opts.$maxTabSpace = maxTabSpace;\n  opts.$maxDigitWidth = maxDigitWidth;\n  lines.forEach(function (line, i) {\n    var lineNumber = i + 1;\n\n    if (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n      return;\n    }\n\n    var lineNo = lineNumberPad(lineNumber, opts);\n    var tabCount = (line.match(/\\t/g) || []).length;\n    var tabAdjust = tabCount * opts.consoleTabWidth;\n    var plain = stripAnsi(line).replace(/\\t/g, '');\n    var runLengthLine;\n\n    if (opts.lineEndPad === true) {\n      var linePad = String().padEnd(longestLineLen - plain.length - tabAdjust, ' ');\n      runLengthLine = line + opts.colors.trailingSpace(linePad);\n    } else {\n      runLengthLine = line;\n    }\n\n    var lineOutput;\n\n    if (opts.tabsToSpaces === false) {\n      lineOutput = lineNo + runLengthLine;\n    }\n\n    if (typeof opts.tabsToSpaces === 'number') {\n      lineOutput = lineNo + padLine(runLengthLine, opts.codePad);\n    }\n\n    output += lineOutput + '\\n';\n  });\n  return opts.colors.base(output);\n};\n\nvar decorate = function decorate(ansiStr, opts) {\n  if (opts.highlight) {\n    ansiStr = ansiMark(ansiStr, opts.highlight);\n  }\n\n  ansiStr = cropPadAndNumber(ansiStr, opts);\n  return ansiStr;\n};\n\nvar nameifyArrowFn = function nameifyArrowFn(fn, opts) {\n  if (Reflect.has(fn, 'prototype') && Reflect.has(fn.prototype, 'constructor')) {\n    return '';\n  }\n\n  return \"\".concat(opts.arrowKeyword, \" \").concat(fn.name, \" = \");\n};\n\nvar procOpts = function procOpts() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = {\n    lineNumbers: true,\n    lang: 'javascript',\n    lineNumberPad: 0,\n    lineNumberStart: 1,\n    start: 1,\n    end: Infinity,\n    highlight: false,\n    stripIndent: true,\n    codePad: 1,\n    colors: darkPalette,\n    tabsToSpaces: 4,\n    consoleTabWidth: 8,\n    arrowKeyword: 'const',\n    lineEndPad: true\n  };\n  options = merge(options, opts);\n  options.$indent = {\n    spaces: typeof options.tabsToSpaces === 'number',\n    tabs: typeof options.tabsToSpaces === 'boolean' && options.tabsToSpaces === false,\n    size: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n  };\n  return options;\n};\n\nvar chromafi = function chromafi(value, opts) {\n  opts = procOpts(opts);\n\n  if (typeof value === 'function') {\n    value = nameifyArrowFn(value, opts) + String(value);\n    var indentStart = true;\n    value = syntaxHlStr('javascript', value, opts, indentStart);\n    value = stripIndent(value);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    value = syntaxHlStr(opts.lang, value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  if (typeof value === 'object') {\n    value = syntaxHlJson(value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  throw new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.');\n};\n\nchromafi.hljs = hljs; // Expose hljs for modification\n\nmodule.exports = chromafi;","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/@trufflesuite/chromafi/index.js"],"names":["hljs","require","cheerio","camelCase","chalk","stripAnsi","merge","ansiMark","stripIndent","detectIndent","darkPalette","addition","green","attr","yellow","attribute","blue","attrString","cyan","base","white","builtIn","builtInName","bullet","magenta","class","code","comment","dim","deletion","red","doctag","emphasis","function","formula","keyword","lineNumbers","grey","literal","link","underline","meta","name","number","params","quote","gray","regexp","selectorAttr","selectorClass","selectorId","selectorPseudo","selectorTag","string","strong","subst","symbol","tag","templateTag","templateVariable","title","trailingSpace","type","variable","filter","node","opts","color","text","childText","data","attribs","split","childNodes","length","map","childNode","join","colors","findLongestLine","tabPad","$indent","tabs","String","padEnd","consoleTabWidth","lines","replace","max","forEach","line","padLine","padding","padStr","padStart","getIndentStr","tabsToSpaces","syntaxHlStr","lang","script","indentStart","indentStr","spaces","highlight","value","html","$body","load","root","find","output","syntaxHlJson","json","JSON","stringify","key","val","Function","err","message","Error","highlighted","match","colorClass","test","includes","substr","getFnStrIndent","fnStr","indent","indentLevel","amount","fnParts","plain","outerIndent","innerIndent","indentOffset","Math","abs","re","RegExp","reTabbed","preFn","postFn","jsHighlighted","lineNumberPad","offsetLineN","lineNumberStart","prePad","$maxDigitWidth","$maxTabSpace","cropPadAndNumber","maxDigitWidth","tabsNeeded","ceil","maxTabSpace","longestLineLen","i","lineNumber","firstLine","lastLine","lineNo","tabCount","tabAdjust","runLengthLine","lineEndPad","linePad","lineOutput","codePad","decorate","ansiStr","nameifyArrowFn","fn","Reflect","has","prototype","arrowKeyword","procOpts","options","start","end","Infinity","size","chromafi","module","exports"],"mappings":"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","sourcesContent":["const hljs = require('highlight.js')\nconst cheerio = require('cheerio')\nconst camelCase = require('camelcase')\nconst chalk = require('chalk')\nconst stripAnsi = require('strip-ansi')\nconst merge = require('lodash.merge')\nconst ansiMark = require('ansi-mark')\nconst stripIndent = require('strip-indent')\nconst detectIndent = require('detect-indent')\n\nconst darkPalette = {\n\taddition: chalk.green,\n\tattr: chalk.yellow,\n\tattribute: chalk.blue,\n\tattrString: chalk.cyan,\n\tbase: chalk.white,\n\tbuiltIn: chalk.blue,\n\tbuiltInName: chalk.blue,\n\tbullet: chalk.magenta,\n\tclass: chalk.green,\n\tcode: chalk.yellow,\n\tcomment: chalk.white.dim,\n\tdeletion: chalk.red,\n\tdoctag: chalk.blue,\n\temphasis: chalk.magenta,\n\tfunction: chalk.white,\n\tformula: chalk.green,\n\tkeyword: chalk.red,\n\tlineNumbers: chalk.grey,\n\tliteral: chalk.magenta,\n\tlink: chalk.blue.underline,\n\tmeta: chalk.cyan,\n\tname: chalk.cyan,\n\tnumber: chalk.green,\n\tparams: chalk.blue,\n\tquote: chalk.gray,\n\tregexp: chalk.magenta,\n\tselectorAttr: chalk.green,\n\tselectorClass: chalk.yellow,\n\tselectorId: chalk.blue,\n\tselectorPseudo: chalk.cyan,\n\tselectorTag: chalk.magenta,\n\tstring: chalk.yellow,\n\tstrong: chalk.red,\n\tsubst: chalk.cyan,\n\tsymbol: chalk.cyan,\n\ttag: chalk.blue,\n\ttemplateTag: chalk.magenta,\n\ttemplateVariable: chalk.green,\n\ttitle: chalk.green,\n\ttrailingSpace: chalk,\n\ttype: chalk.magenta,\n\tvariable: chalk.red\n}\n\nconst filter = (node, opts) => {\n\tlet color\n\tlet text\n\tlet childText\n\n\tif (node.type === 'text') {\n\t\ttext = node.data\n\t\treturn text\n\t}\n\n\tif (node.name === 'span' && node.type === 'tag') {\n\t\tcolor = camelCase(node.attribs.class.split('-')[1])\n\t}\n\n\tif (node.childNodes && node.childNodes.length > 0) {\n\t\tchildText = node.childNodes.map(childNode => filter(childNode, opts)).join('')\n\n\t\tif (typeof color === 'string') {\n\t\t\treturn opts.colors[color](childText)\n\t\t}\n\n\t\treturn childText\n\t}\n\n\treturn ''\n}\n\nconst findLongestLine = (text, opts) => {\n\tlet tabPad = ''\n\n\tif (opts.$indent.tabs) {\n\t\ttabPad = String().padEnd(opts.consoleTabWidth, ' ')\n\t}\n\n\tconst lines = stripAnsi(text)\n\t\t.replace(/\\t/g, tabPad)\n\t\t.split('\\n')\n\n\tlet max = 0\n\n\tlines.forEach(line => {\n\t\tif (line.length > max) {\n\t\t\tmax = line.length\n\t\t}\n\t})\n\n\treturn max\n}\n\nconst padLine = (line, padding) => {\n\tconst padStr = String().padStart(padding, ' ')\n\treturn padStr + line + padStr\n}\n\nconst getIndentStr = opts => {\n\tif (opts.$indent.tabs) {\n\t\treturn String().padStart(1, '\\t')\n\t}\n\n\t// Opts.$indent.spaces === true\n\tif (opts.tabsToSpaces === 0) {\n\t\treturn '\\u0000'\n\t}\n\n\treturn String().padEnd(opts.tabsToSpaces, ' ')\n}\n\nconst syntaxHlStr = (lang, script, opts, indentStart) => {\n\tconst indentStr = getIndentStr(opts)\n\n\tif (opts.$indent.tabs) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (opts.$indent.spaces) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (indentStart) {\n\t\tscript = indentStr + script\n\t}\n\n\tconst code = hljs.highlight(lang, script).value\n\tconst html = `<code>${code}</code>`\n\tconst $body = cheerio.load(html).root().find('code')[0]\n\tconst output = filter($body, opts)\n\n\treturn output\n}\n\nconst syntaxHlJson = (json, opts) => {\n\tconst indentStr = getIndentStr(opts)\n\n\ttry {\n\t\tjson = JSON.stringify(json, (key, val) => {\n\t\t\tif (val instanceof Function) {\n\t\t\t\treturn `[FUNCTION]${String(val)}[FUNCTION]`\n\t\t\t}\n\t\t\treturn val\n\t\t}, indentStr)\n\t} catch (err) {\n\t\terr.message = 'ðŸ¦…  Chromafi: ' + err.message\n\t\tthrow new Error(err)\n\t}\n\n\tconst highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, match => {\n\t\tlet colorClass = 'number'\n\n\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\tif (/^\"/.test(match)) {\n\t\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\t\tif (/:$/.test(match)) {\n\t\t\t\tif (match.includes('-')) {\n\t\t\t\t\tcolorClass = 'attrString'\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t} else {\n\t\t\t\t\tcolorClass = 'attr'\n\t\t\t\t\tmatch = match.replace(/\"/g, '')\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcolorClass = 'string'\n\n\t\t\t\tif (match.substr(1, 10) === '[FUNCTION]' &&\n\t\t\t\t\tmatch.substr(match.length - 11, 10) === '[FUNCTION]') {\n\t\t\t\t\tcolorClass = 'function'\n\t\t\t\t} else {\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t\tmatch = match.replace(/\\\\n/g, '\\n')\n\t\t\t\t\tmatch = match.replace(/\\\\t/g, indentStr)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (/true|false/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t} else if (/null/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t}\n\n\t\treturn opts.colors[colorClass](match)\n\t})\n\n\tconst getFnStrIndent = (fnStr, opts) => {\n\t\tfnStr = fnStr.replace(/\\t/g, indentStr)\n\t\tconst indent = detectIndent(fnStr)\n\n\t\tif (opts.$indent.spaces) {\n\t\t\tconst indentLevel = indent.amount / opts.tabsToSpaces\n\t\t\treturn indentLevel\n\t\t}\n\n\t\tif (opts.$indent.tabs) {\n\t\t\tconst indentLevel = indent.amount\n\t\t\treturn indentLevel\n\t\t}\n\t}\n\n\tconst lines = highlighted.split('\\n').map(line => {\n\t\tconst fnParts = line.split('[FUNCTION]')\n\t\tif (fnParts.length === 3) {\n\t\t\tconst plain = stripAnsi(line)\n\n\t\t\tlet outerIndent\n\n\t\t\tif (opts.$indent.spaces) {\n\t\t\t\touterIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces\n\t\t\t}\n\t\t\tif (opts.$indent.tabs) {\n\t\t\t\touterIndent = plain.match(/^\\t*/)[0].length\n\t\t\t}\n\n\t\t\tconst fnStr = fnParts[1]\n\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t.replace(/\\\\n/g, '\\n')\n\t\t\t\t.replace(/\\\\t/g, '\\t')\n\n\t\t\tconst innerIndent = getFnStrIndent(fnStr, opts)\n\t\t\tconst indentOffset = Math.abs(outerIndent - (innerIndent - 1))\n\n\t\t\tconst re = new RegExp(`\\n(\\t){${indentOffset}}`, 'g')\n\t\t\tconst reTabbed = fnStr\n\t\t\t\t.replace(re, '\\n')\n\t\t\t\t.replace(/\\\\t/g, indentStr)\n\n\t\t\tconst preFn = fnParts[0].substr(0, fnParts[0].length - 1)\n\t\t\tconst postFn = fnParts[2].substr(1)\n\t\t\tconst jsHighlighted = syntaxHlStr('javascript', reTabbed, opts)\n\n\t\t\treturn preFn + jsHighlighted + postFn\n\t\t}\n\n\t\treturn line\n\t}).join('\\n')\n\n\treturn lines\n}\n\nconst lineNumberPad = (number, opts) => {\n\tif (!opts.lineNumbers) {\n\t\treturn ''\n\t}\n\n\tlet output = ''\n\n\tconst offsetLineN = number + (opts.lineNumberStart - 1)\n\n\tif (opts.$indent.spaces) {\n\t\tconst padStr = String().padStart(opts.lineNumberPad, ' ')\n\t\tconst prePad = opts.lineNumberPad + opts.$maxDigitWidth\n\t\toutput = String(offsetLineN).padStart(prePad) + padStr\n\t}\n\n\t// Indent using spaces - up to the tabwidth required to contain number str\n\tif (opts.$indent.tabs) {\n\t\toutput = String(offsetLineN).padStart(opts.$maxTabSpace, ' ')\n\t}\n\n\treturn opts.colors.lineNumbers(output)\n}\n\nconst cropPadAndNumber = (text, opts) => {\n\tlet output = ''\n\n\tconst lines = text.split('\\n')\n\tconst maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length\n\t// Tabs needed to contain digits (so we dont break code tab indentation)\n\tconst tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth)\n\tconst maxTabSpace = tabsNeeded * opts.consoleTabWidth\n\tconst longestLineLen = findLongestLine(text, opts)\n\n\topts.$maxTabSpace = maxTabSpace\n\topts.$maxDigitWidth = maxDigitWidth\n\n\tlines.forEach((line, i) => {\n\t\tconst lineNumber = i + 1\n\t\tif (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n\t\t\treturn\n\t\t}\n\n\t\tconst lineNo = lineNumberPad(lineNumber, opts)\n\n\t\tconst tabCount = (line.match(/\\t/g) || []).length\n\t\tconst tabAdjust = (tabCount * opts.consoleTabWidth)\n\n\t\tconst plain = stripAnsi(line).replace(/\\t/g, '')\n\t\tlet runLengthLine\n\t\tif (opts.lineEndPad === true) {\n\t\t\tconst linePad = String().padEnd((longestLineLen - plain.length) - tabAdjust, ' ')\n\t\t\trunLengthLine = line + opts.colors.trailingSpace(linePad)\n\t\t} else {\n\t\t\trunLengthLine = line\n\t\t}\n\n\t\tlet lineOutput\n\n\t\tif (opts.tabsToSpaces === false) {\n\t\t\tlineOutput = lineNo + runLengthLine\n\t\t}\n\n\t\tif (typeof opts.tabsToSpaces === 'number') {\n\t\t\tlineOutput = lineNo + padLine(runLengthLine, opts.codePad)\n\t\t}\n\n\t\toutput += lineOutput + '\\n'\n\t})\n\n\treturn opts.colors.base(output)\n}\n\nconst decorate = (ansiStr, opts) => {\n\tif (opts.highlight) {\n\t\tansiStr = ansiMark(ansiStr, opts.highlight)\n\t}\n\tansiStr = cropPadAndNumber(ansiStr, opts)\n\treturn ansiStr\n}\n\nconst nameifyArrowFn = (fn, opts) => {\n\tif (Reflect.has(fn, 'prototype') &&\n\t\tReflect.has(fn.prototype, 'constructor')) {\n\t\treturn ''\n\t}\n\n\treturn `${opts.arrowKeyword} ${fn.name} = `\n}\n\nconst procOpts = (opts = {}) => {\n\tlet options = {\n\t\tlineNumbers: true,\n\t\tlang: 'javascript',\n\t\tlineNumberPad: 0,\n\t\tlineNumberStart: 1,\n\t\tstart: 1,\n\t\tend: Infinity,\n\t\thighlight: false,\n\t\tstripIndent: true,\n\t\tcodePad: 1,\n\t\tcolors: darkPalette,\n\t\ttabsToSpaces: 4,\n\t\tconsoleTabWidth: 8,\n\t\tarrowKeyword: 'const',\n\t\tlineEndPad: true\n\t}\n\n\toptions = merge(options, opts)\n\n\toptions.$indent = {\n\t\tspaces: typeof options.tabsToSpaces === 'number',\n\t\ttabs: typeof options.tabsToSpaces === 'boolean' &&\n\t\t\toptions.tabsToSpaces === false,\n\t\tsize: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n\t}\n\n\treturn options\n}\n\nconst chromafi = (value, opts) => {\n\topts = procOpts(opts)\n\n\tif (typeof value === 'function') {\n\t\tvalue = nameifyArrowFn(value, opts) + String(value)\n\t\tconst indentStart = true\n\t\tvalue = syntaxHlStr('javascript', value, opts, indentStart)\n\t\tvalue = stripIndent(value)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'string') {\n\t\tvalue = syntaxHlStr(opts.lang, value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'object') {\n\t\tvalue = syntaxHlJson(value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tthrow new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.')\n}\n\nchromafi.hljs = hljs // Expose hljs for modification\n\nmodule.exports = chromafi\n"]},"metadata":{},"sourceType":"script"}