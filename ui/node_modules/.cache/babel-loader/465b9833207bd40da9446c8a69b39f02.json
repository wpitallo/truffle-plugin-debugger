{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\nvar module = module ? module : {}; // shim for browser use\n\nfunction hljsDefineSolidity(hljs) {\n  //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n  //NOTE: unparameterized versions are *not* included here, those are included\n  //manually\n  var byteSizes = [];\n\n  for (var i = 0; i < 32; i++) {\n    byteSizes[i] = i + 1;\n  }\n\n  var numSizes = byteSizes.map(function (bytes) {\n    return bytes * 8;\n  });\n  var precisions = [];\n\n  for (i = 0; i <= 80; i++) {\n    precisions[i] = i;\n  }\n\n  var bytesTypes = byteSizes.map(function (size) {\n    return 'bytes' + size;\n  });\n  var bytesTypesString = bytesTypes.join(' ') + ' ';\n  var uintTypes = numSizes.map(function (size) {\n    return 'uint' + size;\n  });\n  var uintTypesString = uintTypes.join(' ') + ' ';\n  var intTypes = numSizes.map(function (size) {\n    return 'int' + size;\n  });\n  var intTypesString = intTypes.join(' ') + ' ';\n  var sizePrecisionPairs = [].concat.apply([], numSizes.map(function (size) {\n    return precisions.map(function (precision) {\n      return size + 'x' + precision;\n    });\n  }));\n  var fixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'fixed' + pair;\n  });\n  var fixedTypesString = fixedTypes.join(' ') + ' ';\n  var ufixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'ufixed' + pair;\n  });\n  var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n  var SOL_KEYWORDS = {\n    keyword: 'var bool string ' + 'int uint ' + intTypesString + uintTypesString + 'byte bytes ' + bytesTypesString + 'fixed ufixed ' + fixedTypesString + ufixedTypesString + 'enum struct mapping address ' + 'new delete ' + 'if else for while continue break return throw emit try catch ' + 'unchecked ' + //NOTE: doesn't always act as a keyword, but seems fine to include\n    '_ ' + 'function modifier event constructor fallback receive ' + 'virtual override ' + 'constant immutable anonymous indexed ' + 'storage memory calldata ' + 'external public internal payable pure view private returns ' + 'import from as using pragma ' + 'contract interface library is abstract ' + 'assembly',\n    literal: 'true false ' + 'wei gwei szabo finney ether ' + 'seconds minutes hours days weeks years',\n    built_in: 'self ' + // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n    'this super selfdestruct suicide ' + 'now ' + 'msg block tx abi ' + 'type ' + 'blockhash gasleft ' + 'assert revert require ' + 'Error Panic ' + 'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' + 'log0 log1 log2 log3 log4' + // :NOTE: not really toplevel, but advantageous to have highlighted as if reserved to\n    //        avoid newcomers making mistakes due to accidental name collisions.\n    'send transfer call callcode delegatecall staticcall '\n  };\n  var SOL_ASSEMBLY_KEYWORDS = {\n    keyword: 'assembly ' + 'let function ' + 'if switch case default for leave ' + 'break continue ' + 'u256 ' + //not in old-style assembly, but in Yul\n    //NOTE: We're counting most opcodes as builtins, but the following ones we're\n    //treating as keywords because they alter control flow or halt execution\n    'jump jumpi ' + 'stop return revert selfdestruct invalid',\n    built_in: //NOTE that push1 through push32, as well as jumpdest, are not included\n    'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' + 'and or xor byte shl shr sar ' + 'addmod mulmod signextend keccak256 ' + 'pc pop ' + 'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' + 'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' + 'mload mstore mstore8 sload sstore msize ' + 'gas address balance selfbalance caller callvalue ' + 'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' + 'create create2 call callcode delegatecall staticcall ' + 'log0 log1 log2 log3 log4 ' + 'chainid origin gasprice blockhash coinbase timestamp number difficulty gaslimit',\n    literal: 'true false'\n  }; //covers the special slot/offset notation in assembly\n  //(old-style, with an underscore)\n\n  var SOL_ASSEMBLY_MEMBERS_OLD = {\n    begin: /_/,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset'\n    },\n    relevance: 2\n  }; //covers the special slot/offset notation in assembly\n  //(new-style, with a dot; keeping this separate as it\n  //may be expanded in the future)\n\n  var SOL_ASSEMBLY_MEMBERS = {\n    begin: /\\./,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset length'\n    },\n    relevance: 2\n  };\n\n  function isNegativeLookbehindAvailable() {\n    try {\n      new RegExp('(?<!.)');\n      return true;\n    } catch (_) {\n      return false;\n    }\n  } //like a C number, except:\n  //1. no octal literals (leading zeroes disallowed)\n  //2. underscores (1 apiece) are allowed between consecutive digits\n  //(including hex digits)\n  //also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n  //NOTE: we use string rather than regexp in the case where negative lookbehind\n  //is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\n\n\n  if (isNegativeLookbehindAvailable()) {\n    var SOL_NUMBER_RE = '-?((?<!\\\\$)\\\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|((?<!\\\\$)\\\\b[1-9](_?\\\\d)*(\\\\.((\\\\d_?)*\\\\d)?)?|\\\\.\\\\d(_?\\\\d)*)([eE][-+]?\\\\d(_?\\\\d)*)?|(?<!\\\\$)\\\\b0)';\n  } else {\n    var SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)/;\n  }\n\n  var SOL_NUMBER = {\n    className: 'number',\n    begin: SOL_NUMBER_RE,\n    relevance: 0\n  };\n  var HEX_APOS_STRING_MODE = {\n    className: 'string',\n    begin: /hex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/ //please also update HEX_QUOTE_STRING_MODE\n\n  };\n  var HEX_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: /hex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/ //please also update HEX_APOS_STRING_MODE\n\n  }; //I've set these up exactly like hljs's builtin STRING_MODEs,\n  //except with the optional initial \"unicode\" text\n\n  var SOL_APOS_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, //please also update SOL_QUOTE_STRING_MODE\n  {\n    begin: /(unicode)?'/\n  });\n  var SOL_QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, //please also update SOL_APOS_STRING_MODE\n  {\n    begin: /(unicode)?\"/\n  });\n  var SOL_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: SOL_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER, 'self' //to account for mappings and fn variables\n    ]\n  }; //NOTE: including \"*\" as a \"lexeme\" because we use it as a \"keyword\" below\n\n  var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*|\\*/; //in assembly, identifiers can contain periods (but may not start with them)\n\n  var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n  var SOL_RESERVED_MEMBERS = {\n    begin: /\\.\\s*/,\n    // match any property access up to start of prop\n    end: /[^A-Za-z0-9$_\\.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'gas value selector address length push pop ' + 'send transfer call callcode delegatecall staticcall ' + 'balance code codehash ' + 'name creationCode runtimeCode interfaceId min max'\n    },\n    relevance: 2\n  };\n  var SOL_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS\n  });\n  var SOL_SPECIAL_PARAMETERS = {\n    //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n    className: 'built_in',\n    begin: /(gas|value|salt):/\n  };\n\n  function makeBuiltinProps(obj, props) {\n    return {\n      begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n      end: /[^A-Za-z0-9$_\\.]/,\n      excludeBegin: false,\n      excludeEnd: true,\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        built_in: obj + ' ' + props\n      },\n      contains: [SOL_RESERVED_MEMBERS],\n      relevance: 10\n    };\n  }\n\n  return {\n    aliases: ['sol'],\n    keywords: SOL_KEYWORDS,\n    lexemes: SOL_LEXEMES_RE,\n    contains: [// basic literal definitions\n    SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_SPECIAL_PARAMETERS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'function modifier event constructor',\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n      illegal: /%/\n    }, // built-in members\n    makeBuiltinProps('msg', 'gas value data sender sig'), makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit number timestamp chainid'), makeBuiltinProps('tx', 'gasprice origin'), makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature'), SOL_RESERVED_MEMBERS, {\n      // contracts & libraries & interfaces\n      className: 'class',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'contract interface library',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'is',\n        lexemes: SOL_LEXEMES_RE\n      }, SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // structs & enums\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'struct enum',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // imports\n      beginKeywords: 'import',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'import * from as',\n      contains: [SOL_TITLE_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // using\n      beginKeywords: 'using',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'using * for',\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // pragmas\n      className: 'meta',\n      beginKeywords: 'pragma',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        keyword: 'pragma solidity experimental abicoder',\n        built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n      },\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      })]\n    }, {\n      //assembly section\n      beginKeywords: 'assembly',\n      end: /\\b\\B/,\n      //unsatisfiable regex; ended by endsParent instead\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {\n        //the actual *block* in the assembly section\n        begin: '{',\n        end: '}',\n        endsParent: true,\n        keywords: SOL_ASSEMBLY_KEYWORDS,\n        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n        contains: [SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_ASSEMBLY_MEMBERS, SOL_ASSEMBLY_MEMBERS_OLD, {\n          //block within assembly; note the lack of endsParent\n          begin: '{',\n          end: '}',\n          keywords: SOL_ASSEMBLY_KEYWORDS,\n          lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n          contains: [SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_ASSEMBLY_MEMBERS, SOL_ASSEMBLY_MEMBERS_OLD, 'self']\n        }]\n      }]\n    }],\n    illegal: /#/\n  };\n}\n\nmodule.exports = function (hljs) {\n  hljs.registerLanguage('solidity', hljsDefineSolidity);\n};\n\nmodule.exports.definer = hljsDefineSolidity;","map":{"version":3,"sources":["/home/warren/environment/consensus bootcamp/truffle-testNft/node_modules/truffle-plugin-debugger/ui/node_modules/highlightjs-solidity/solidity.js"],"names":["module","hljsDefineSolidity","hljs","byteSizes","i","numSizes","map","bytes","precisions","bytesTypes","size","bytesTypesString","join","uintTypes","uintTypesString","intTypes","intTypesString","sizePrecisionPairs","concat","apply","precision","fixedTypes","pair","fixedTypesString","ufixedTypes","ufixedTypesString","SOL_KEYWORDS","keyword","literal","built_in","SOL_ASSEMBLY_KEYWORDS","SOL_ASSEMBLY_MEMBERS_OLD","begin","end","excludeBegin","excludeEnd","keywords","relevance","SOL_ASSEMBLY_MEMBERS","isNegativeLookbehindAvailable","RegExp","_","SOL_NUMBER_RE","SOL_NUMBER","className","HEX_APOS_STRING_MODE","HEX_QUOTE_STRING_MODE","SOL_APOS_STRING_MODE","inherit","APOS_STRING_MODE","SOL_QUOTE_STRING_MODE","QUOTE_STRING_MODE","SOL_FUNC_PARAMS","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","SOL_LEXEMES_RE","SOL_ASSEMBLY_LEXEMES_RE","SOL_RESERVED_MEMBERS","SOL_TITLE_MODE","TITLE_MODE","lexemes","SOL_SPECIAL_PARAMETERS","makeBuiltinProps","obj","props","aliases","beginKeywords","illegal","endsParent","exports","registerLanguage","definer"],"mappings":"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","sourcesContent":["/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nvar module = module ? module : {};     // shim for browser use\n\nfunction hljsDefineSolidity(hljs) {\n\n    //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n    //NOTE: unparameterized versions are *not* included here, those are included\n    //manually\n    var byteSizes = [];\n    for(var i = 0; i < 32; i++) {\n        byteSizes[i] = i+1;\n    }\n    var numSizes = byteSizes.map(function(bytes) { return bytes * 8 } );\n    var precisions = [];\n    for(i = 0; i <= 80; i++) {\n        precisions[i] = i;\n    }\n\n    var bytesTypes = byteSizes.map(function(size) { return 'bytes' + size });\n    var bytesTypesString = bytesTypes.join(' ') + ' ';\n\n    var uintTypes = numSizes.map(function(size) { return 'uint' + size });\n    var uintTypesString = uintTypes.join(' ') + ' ';\n\n    var intTypes = numSizes.map(function(size) { return 'int' + size });\n    var intTypesString = intTypes.join(' ') + ' ';\n\n    var sizePrecisionPairs = [].concat.apply([],\n        numSizes.map(function(size) {\n            return precisions.map(function(precision) {\n                return size + 'x' + precision;\n            })\n        })\n    );\n\n    var fixedTypes = sizePrecisionPairs.map(function(pair) { return 'fixed' + pair });\n    var fixedTypesString = fixedTypes.join(' ') + ' ';\n\n    var ufixedTypes = sizePrecisionPairs.map(function(pair) { return 'ufixed' + pair });\n    var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n\n    var SOL_KEYWORDS = {\n        keyword:\n            'var bool string ' +\n            'int uint ' + intTypesString + uintTypesString +\n            'byte bytes ' + bytesTypesString +\n            'fixed ufixed ' + fixedTypesString + ufixedTypesString +\n            'enum struct mapping address ' +\n\n            'new delete ' +\n            'if else for while continue break return throw emit try catch ' +\n            'unchecked ' +\n            //NOTE: doesn't always act as a keyword, but seems fine to include\n            '_ ' +\n\n            'function modifier event constructor fallback receive ' +\n            'virtual override ' +\n            'constant immutable anonymous indexed ' +\n            'storage memory calldata ' +\n            'external public internal payable pure view private returns ' +\n\n            'import from as using pragma ' +\n            'contract interface library is abstract ' +\n            'assembly',\n        literal:\n            'true false ' +\n            'wei gwei szabo finney ether ' +\n            'seconds minutes hours days weeks years',\n        built_in:\n            'self ' +   // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n            'this super selfdestruct suicide ' +\n            'now ' +\n            'msg block tx abi ' +\n            'type ' +\n            'blockhash gasleft ' +\n            'assert revert require ' +\n            'Error Panic ' +\n            'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' +\n            'log0 log1 log2 log3 log4' +\n            // :NOTE: not really toplevel, but advantageous to have highlighted as if reserved to\n            //        avoid newcomers making mistakes due to accidental name collisions.\n            'send transfer call callcode delegatecall staticcall '\n    };\n\n    var SOL_ASSEMBLY_KEYWORDS = {\n        keyword:\n            'assembly ' +\n            'let function ' +\n            'if switch case default for leave ' +\n            'break continue ' +\n            'u256 ' + //not in old-style assembly, but in Yul\n            //NOTE: We're counting most opcodes as builtins, but the following ones we're\n            //treating as keywords because they alter control flow or halt execution\n            'jump jumpi ' +\n            'stop return revert selfdestruct invalid',\n        built_in:\n            //NOTE that push1 through push32, as well as jumpdest, are not included\n            'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' +\n            'and or xor byte shl shr sar ' +\n            'addmod mulmod signextend keccak256 ' +\n            'pc pop ' +\n            'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' +\n            'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' +\n            'mload mstore mstore8 sload sstore msize ' +\n            'gas address balance selfbalance caller callvalue ' +\n            'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' +\n            'create create2 call callcode delegatecall staticcall ' +\n            'log0 log1 log2 log3 log4 ' +\n            'chainid origin gasprice blockhash coinbase timestamp number difficulty gaslimit',\n        literal:\n            'true false'\n    };\n\n    //covers the special slot/offset notation in assembly\n    //(old-style, with an underscore)\n    var SOL_ASSEMBLY_MEMBERS_OLD = {\n        begin: /_/,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset'\n        },\n        relevance: 2,\n    };\n\n    //covers the special slot/offset notation in assembly\n    //(new-style, with a dot; keeping this separate as it\n    //may be expanded in the future)\n    var SOL_ASSEMBLY_MEMBERS = {\n        begin: /\\./,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset length'\n        },\n        relevance: 2,\n    };\n\n    function isNegativeLookbehindAvailable() {\n        try {\n            new RegExp('(?<!.)');\n            return true;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    //like a C number, except:\n    //1. no octal literals (leading zeroes disallowed)\n    //2. underscores (1 apiece) are allowed between consecutive digits\n    //(including hex digits)\n    //also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n    //NOTE: we use string rather than regexp in the case where negative lookbehind\n    //is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\n    if (isNegativeLookbehindAvailable()) {\n        var SOL_NUMBER_RE = '-?((?<!\\\\$)\\\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|((?<!\\\\$)\\\\b[1-9](_?\\\\d)*(\\\\.((\\\\d_?)*\\\\d)?)?|\\\\.\\\\d(_?\\\\d)*)([eE][-+]?\\\\d(_?\\\\d)*)?|(?<!\\\\$)\\\\b0)';\n    } else {\n        var SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)/;\n    }\n\n\n    var SOL_NUMBER = {\n        className: 'number',\n        begin: SOL_NUMBER_RE,\n        relevance: 0,\n    };\n\n    var HEX_APOS_STRING_MODE = {\n        className: 'string',\n        begin: /hex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/, //please also update HEX_QUOTE_STRING_MODE\n    };\n    var HEX_QUOTE_STRING_MODE = {\n        className: 'string',\n        begin: /hex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/, //please also update HEX_APOS_STRING_MODE\n    };\n\n    //I've set these up exactly like hljs's builtin STRING_MODEs,\n    //except with the optional initial \"unicode\" text\n    var SOL_APOS_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, //please also update SOL_QUOTE_STRING_MODE\n        { begin: /(unicode)?'/ }\n    );\n    var SOL_QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, //please also update SOL_APOS_STRING_MODE\n        { begin: /(unicode)?\"/ }\n    );\n\n    var SOL_FUNC_PARAMS = {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: SOL_KEYWORDS,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            SOL_NUMBER,\n            'self' //to account for mappings and fn variables\n        ]\n    };\n\n    //NOTE: including \"*\" as a \"lexeme\" because we use it as a \"keyword\" below\n    var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*|\\*/;\n    //in assembly, identifiers can contain periods (but may not start with them)\n    var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n\n    var SOL_RESERVED_MEMBERS = {\n        begin: /\\.\\s*/,  // match any property access up to start of prop\n        end: /[^A-Za-z0-9$_\\.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'gas value selector address length push pop ' +\n               'send transfer call callcode delegatecall staticcall ' +\n               'balance code codehash ' +\n               'name creationCode runtimeCode interfaceId min max'\n        },\n        relevance: 2,\n    };\n\n    var SOL_TITLE_MODE =\n        hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: SOL_KEYWORDS,\n        });\n\n    var SOL_SPECIAL_PARAMETERS = {\n        //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n        className: 'built_in',\n        begin: /(gas|value|salt):/\n    };\n\n    function makeBuiltinProps(obj, props) {\n        return {\n            begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n            end: /[^A-Za-z0-9$_\\.]/,\n            excludeBegin: false,\n            excludeEnd: true,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: {\n                built_in: obj + ' ' + props,\n            },\n            contains: [\n                SOL_RESERVED_MEMBERS\n            ],\n            relevance: 10,\n        };\n    }\n\n    return {\n        aliases: ['sol'],\n        keywords: SOL_KEYWORDS,\n        lexemes: SOL_LEXEMES_RE,\n        contains: [\n            // basic literal definitions\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            HEX_APOS_STRING_MODE,\n            HEX_QUOTE_STRING_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_NUMBER,\n            SOL_SPECIAL_PARAMETERS,\n            { // functions\n                className: 'function',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'function modifier event constructor', end: /[{;]/, excludeEnd: true,\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ],\n                illegal: /%/,\n            },\n            // built-in members\n            makeBuiltinProps('msg', 'gas value data sender sig'),\n            makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit number timestamp chainid'),\n            makeBuiltinProps('tx', 'gasprice origin'),\n            makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature'),\n            SOL_RESERVED_MEMBERS,\n            { // contracts & libraries & interfaces\n                className: 'class',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'contract interface library', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    { beginKeywords: 'is', lexemes: SOL_LEXEMES_RE },\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // structs & enums\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'struct enum', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // imports\n                beginKeywords: 'import', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'import * from as',\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_APOS_STRING_MODE,\n                    SOL_QUOTE_STRING_MODE,\n                    HEX_APOS_STRING_MODE,\n                    HEX_QUOTE_STRING_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // using\n                beginKeywords: 'using', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'using * for',\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // pragmas\n                className: 'meta',\n                beginKeywords: 'pragma', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: {\n                    keyword: 'pragma solidity experimental abicoder',\n                    built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n                },\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.inherit(SOL_APOS_STRING_MODE, { className: 'meta-string' }),\n                    hljs.inherit(SOL_QUOTE_STRING_MODE, { className: 'meta-string' })\n                ]\n            },\n            { //assembly section\n                beginKeywords: 'assembly',\n                end: /\\b\\B/, //unsatisfiable regex; ended by endsParent instead\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    { //the actual *block* in the assembly section\n                        begin: '{', end: '}',\n                        endsParent: true,\n                        keywords: SOL_ASSEMBLY_KEYWORDS,\n                        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n                        contains: [\n                            SOL_APOS_STRING_MODE,\n                            SOL_QUOTE_STRING_MODE,\n                            HEX_APOS_STRING_MODE,\n                            HEX_QUOTE_STRING_MODE,\n                            hljs.C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            SOL_NUMBER,\n                            SOL_ASSEMBLY_MEMBERS,\n                            SOL_ASSEMBLY_MEMBERS_OLD,\n                            { //block within assembly; note the lack of endsParent\n                                begin: '{', end: '}',\n                                keywords: SOL_ASSEMBLY_KEYWORDS,\n                                lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n                                contains: [\n                                    SOL_APOS_STRING_MODE,\n                                    SOL_QUOTE_STRING_MODE,\n                                    HEX_APOS_STRING_MODE,\n                                    HEX_QUOTE_STRING_MODE,\n                                    hljs.C_LINE_COMMENT_MODE,\n                                    hljs.C_BLOCK_COMMENT_MODE,\n                                    SOL_NUMBER,\n                                    SOL_ASSEMBLY_MEMBERS,\n                                    SOL_ASSEMBLY_MEMBERS_OLD,\n                                    'self'\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ],\n        illegal: /#/\n    };\n}\n\nmodule.exports = function(hljs) {\n    hljs.registerLanguage('solidity', hljsDefineSolidity);\n};\n\nmodule.exports.definer = hljsDefineSolidity;\n"]},"metadata":{},"sourceType":"script"}