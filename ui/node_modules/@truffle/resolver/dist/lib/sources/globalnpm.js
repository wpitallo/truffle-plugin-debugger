"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalNPM = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const detectInstalled = require("detect-installed");
const get_installed_path = require("get-installed-path");
class GlobalNPM {
    require(importPath) {
        if (importPath.indexOf(".") === 0 || path_1.default.isAbsolute(importPath)) {
            return null;
        }
        const contract_name = path_1.default.basename(importPath, ".sol");
        let [package_name] = importPath.split("/", 1);
        if (detectInstalled.sync(package_name)) {
            const regex = new RegExp(`/${package_name}$`);
            const global_package_path = get_installed_path
                .getInstalledPathSync(package_name)
                .replace(regex, "");
            const expected_path = path_1.default.join(global_package_path, package_name, "build", "contracts", contract_name + ".json");
            try {
                const result = fs_1.default.readFileSync(expected_path, "utf8");
                return JSON.parse(result);
            }
            catch (e) {
                return null;
            }
        }
    }
    resolve(importPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let [package_name] = importPath.split("/", 1);
            let body;
            if (detectInstalled.sync(package_name)) {
                const regex = new RegExp(`/${package_name}$`);
                const global_package_path = get_installed_path
                    .getInstalledPathSync(package_name)
                    .replace(regex, "");
                const expected_path = path_1.default.join(global_package_path, importPath);
                try {
                    body = fs_1.default.readFileSync(expected_path, { encoding: "utf8" });
                }
                catch (err) { }
            }
            // If nothing's found, body returns `undefined`
            return { body, filePath: importPath };
        });
    }
    // We're resolving package paths to other package paths, not absolute paths.
    // This will ensure the source fetcher conintues to use the correct sources for packages.
    // i.e., if some_module/contracts/MyContract.sol imported "./AnotherContract.sol",
    // we're going to resolve it to some_module/contracts/AnotherContract.sol, ensuring
    // that when this path is evaluated this source is used again.
    resolveDependencyPath(importPath, dependencyPath) {
        var dirname = path_1.default.dirname(importPath);
        return path_1.default.join(dirname, dependencyPath);
    }
}
exports.GlobalNPM = GlobalNPM;
//# sourceMappingURL=globalnpm.js.map