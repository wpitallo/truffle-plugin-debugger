"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABI = void 0;
const path_1 = __importDefault(require("path"));
const abi_to_sol_1 = require("abi-to-sol");
const fs_1 = require("./fs");
class ABI extends fs_1.FS {
    // requiring artifacts is out of scope for this ResolverSource
    // just return `null` here and let another ResolverSource handle it
    require() {
        return null;
    }
    resolve(importPath, importedFrom = "") {
        const _super = Object.create(null, {
            resolve: { get: () => super.resolve }
        });
        return __awaiter(this, void 0, void 0, function* () {
            let filePath;
            let body;
            if (!importPath.endsWith(".json")) {
                return { filePath, body };
            }
            const resolution = yield _super.resolve.call(this, importPath, importedFrom);
            if (!resolution.body) {
                return { filePath, body };
            }
            ({ filePath, body } = resolution);
            // extract basename twice to support .json and .abi.json
            const name = path_1.default.basename(path_1.default.basename(filePath, ".json"), ".abi");
            try {
                const abi = JSON.parse(body);
                const soliditySource = abi_to_sol_1.generateSolidity({
                    name,
                    abi,
                    license: "MIT" // as per the rest of Truffle
                });
                return {
                    filePath,
                    body: soliditySource
                };
            }
            catch (e) {
                const emptySolidity = `
        // SPDX-License-Identifier: MIT
        pragma solidity >0.0.0;
      `;
                return {
                    filePath,
                    body: emptySolidity
                };
            }
        });
    }
}
exports.ABI = ABI;
//# sourceMappingURL=abi.js.map