"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vyper = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("resolver:sources:vyper");
const path_1 = __importDefault(require("path"));
class Vyper {
    constructor(wrappedSource) {
        this.wrappedSource = wrappedSource;
    }
    require() {
        //out of scope for this resolver source
        return null;
    }
    resolve(importModule, importedFrom) {
        return __awaiter(this, void 0, void 0, function* () {
            importedFrom = importedFrom || "";
            //attempt to just resolve as if it's a file path rather than Vyper module
            const directlyResolvedSource = yield this.wrappedSource.resolve(importModule, importedFrom);
            if (directlyResolvedSource.body) {
                return directlyResolvedSource;
            }
            //otherwise, it's time for some Vyper module processing...
            const importPath = moduleToPath(importModule); //note: no file extension yet
            const possiblePaths = [];
            //first: check for JSON in local directory
            possiblePaths.push(path_1.default.join(path_1.default.dirname(importedFrom), importPath + ".json"));
            //next: check for Vyper in local directory
            possiblePaths.push(path_1.default.join(path_1.default.dirname(importedFrom), importPath + ".vy"));
            for (const possiblePath of possiblePaths) {
                const resolvedSource = yield this.wrappedSource.resolve(possiblePath, importedFrom);
                if (resolvedSource.body) {
                    return resolvedSource;
                }
            }
            //if not found, return nothing
            return { body: undefined, filePath: undefined };
        });
    }
    resolveDependencyPath(importPath, dependencyPath) {
        return __awaiter(this, void 0, void 0, function* () {
            //unfortunately, for this sort of source to resolve a dependency path,
            //it's going to need to do a resolve :-/
            const resolved = yield this.resolve(dependencyPath, importPath);
            if (resolved) {
                return resolved.filePath;
            }
            else {
                return null;
            }
        });
    }
}
exports.Vyper = Vyper;
function moduleToPath(moduleName) {
    const initialDotCount = (moduleName.match(/^\.*/) || []).length;
    const withoutInitialDots = moduleName.replace(/^\.*/, "");
    const pathWithoutDots = withoutInitialDots.replace(/\./g, path_1.default.sep);
    let initialDotPath;
    switch (initialDotCount) {
        case 0:
            initialDotPath = "";
            break;
        case 1:
            initialDotPath = "./";
            break;
        default:
            initialDotPath = "../".repeat(initialDotCount - 1);
            break;
    }
    return initialDotPath + pathWithoutDots;
}
//# sourceMappingURL=vyper.js.map